<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis下Mapper文件例子</title>
      <link href="//db/mybatis-mapper.html"/>
      <url>//db/mybatis-mapper.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。</p><hr><h3 id="choose-用法"><a href="#choose-用法" class="headerlink" title="choose 用法"></a>choose 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 3&quot;</span>&gt;</span></span><br><span class="line">        SQL1...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 4&quot;</span>&gt;</span></span><br><span class="line">        SQL2...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        SQL3...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach-用法"><a href="#foreach-用法" class="headerlink" title="foreach 用法"></a>foreach 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;categoryIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;categoryId&quot;</span>&gt;</span></span><br><span class="line">    #&#123;categoryId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名自动化更新证书</title>
      <link href="//network/acme_sh.html"/>
      <url>//network/acme_sh.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。</p><hr><p><em>斜体</em> <strong>粗体</strong> <strong><em>粗斜体</em></strong></p><p><u>下划线</u> <del>删除线</del></p><!--注释--><ul><li>1</li><li>2</li><li>3</li><li>5</li></ul><blockquote><p>qhjfj</p><p>ffdgdh</p><blockquote><p>123</p><p>243546</p><blockquote><p>2335454</p><p>6568</p><blockquote><p>56</p></blockquote></blockquote></blockquote></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="number">111</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/markdown/md-link.html">Aaa</a></p><div class="table-container"><table><thead><tr><th>11</th><th>22</th><th>33</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><script type="math/tex; mode=display">\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t</script><script type="math/tex; mode=display">W_G^{mn}=max\{0,W_G.\xi_G(f_G^m,f_G^n)\}</script><script type="math/tex; mode=display">\begin{Bmatrix}   a & b \\   c & d \\\end{Bmatrix}</script><script type="math/tex; mode=display">\begin{CD}   A @>a>> B \\@VbVV @AAcA \\   C @= D\end{CD}</script><script type="math/tex; mode=display">\begin{bmatrix}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}} \\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}} \\{\vdots}&{\vdots}&{\ddots}&{\vdots} \\{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}} \\\end{bmatrix}</script><script type="math/tex; mode=display">\begin{cases}a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end{cases}</script><pre><code class="highlight mermaid">gantt                dateFormat  YYYY-MM-DD          title 使用mermaid语言定制甘特图       section 任务1       已完成的任务:done,    des1, 2014-01-06,2014-01-08       正在进行的任务 :active,  des2, 2014-01-09, 3d       待完成任务1            :         des3, after des2, 5d       待完成任务2 :         des4, after des3, 5d           section 关键任务       已完成的关键任务 :crit, done, 2014-01-06,24h       已完成的关键任务2         :crit, done, after des1, 2d       正在进行的关键任务             :crit, active, 3d       待完成的关键任务        :crit, 5d       待完成任务           :2d       待完成任务2                      :1d           section 文档编写       描述甘特图语法               :active, a1, after des1, 3d       完成甘特图实例1      :after a1  , 20h       完成甘特图实例2    :doc1, after a1  , 48h</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和git实现多地更新和配置博客源文件</title>
      <link href="//hexo/hexo-git.html"/>
      <url>//hexo/hexo-git.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用<a href="https://hexo.io/zh-cn/">hexo</a>写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。</p><ul><li>利用git分支实现</li><li>hexo生成的静态博客文件默认放在master分支上。</li><li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li></ul><h3 id="hexo搭建博客原理"><a href="#hexo搭建博客原理" class="headerlink" title="hexo搭建博客原理"></a>hexo搭建博客原理</h3><ul><li>hexo帮助把博客发送到github，同时把md文件转换成网页文件。</li><li>hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。</li></ul><h3 id="搭建hexo服务器端电脑设置"><a href="#搭建hexo服务器端电脑设置" class="headerlink" title="搭建hexo服务器端电脑设置"></a>搭建hexo服务器端电脑设置</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>首先确保自己已经使用hexo在<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>搭建好了自己的个人博客。</li></ul><h4 id="对username-github-io仓库新建hexo分支，并克隆"><a href="#对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="对username.github.io仓库新建hexo分支，并克隆"></a>对username.github.io仓库新建hexo分支，并克隆</h4><ul><li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录</li><li>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx</li></ul><h4 id="将本地博客的部署文件拷贝进username-github-io文件目录"><a href="#将本地博客的部署文件拷贝进username-github-io文件目录" class="headerlink" title="将本地博客的部署文件拷贝进username.github.io文件目录"></a>将本地博客的部署文件拷贝进username.github.io文件目录</h4><ul><li>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。</li><li>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：<ul><li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li><li>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目</li></ul></li></ul><h4 id="提交hexo分支"><a href="#提交hexo分支" class="headerlink" title="提交hexo分支"></a>提交hexo分支</h4><ul><li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：</p><p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p></li></ul><h3 id="其他任何一台电脑"><a href="#其他任何一台电脑" class="headerlink" title="其他任何一台电脑"></a>其他任何一台电脑</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p><ul><li>将新电脑的生成的ssh key添加到GitHub账户上</li><li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li><li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li><li>到这里了就可以开始在自己的电脑上写博客了！</li></ul><p>编辑、撰写文章或其他博客更新改动：</p><ul><li>依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新</li><li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li></ul><h3 id="回到hexo服务器端电脑更新并提交博客"><a href="#回到hexo服务器端电脑更新并提交博客" class="headerlink" title="回到hexo服务器端电脑更新并提交博客"></a>回到hexo服务器端电脑更新并提交博客</h3><p>注：<a href="https://blog.csdn.net/qq_41684957/article/details/90680765">原地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo命令</title>
      <link href="//hello-word.html"/>
      <url>//hello-word.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p><h3 id="总要记录一点什么吧"><a href="#总要记录一点什么吧" class="headerlink" title="总要记录一点什么吧"></a>总要记录一点什么吧</h3><p>hexo的一些常用命令模版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s # 启动服务</span><br><span class="line">hexo d -g # 编译项目并推送到github下mater分支</span><br><span class="line">hexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
