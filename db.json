{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/img/img.png","path":"img/img.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/cover/0.jpg","path":"img/cover/0.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/1.jpg","path":"img/cover/1.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/10.jpg","path":"img/cover/10.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/11.jpg","path":"img/cover/11.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/12.jpg","path":"img/cover/12.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/13.jpg","path":"img/cover/13.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/14.jpg","path":"img/cover/14.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/15.jpg","path":"img/cover/15.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/16.jpg","path":"img/cover/16.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/17.jpg","path":"img/cover/17.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/2.jpg","path":"img/cover/2.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/3.jpg","path":"img/cover/3.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/4.jpg","path":"img/cover/4.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/5.jpg","path":"img/cover/5.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/6.jpg","path":"img/cover/6.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/7.jpg","path":"img/cover/7.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/8.jpg","path":"img/cover/8.jpg","modified":0,"renderable":0},{"_id":"source/img/cover/9.jpg","path":"img/cover/9.jpg","modified":0,"renderable":0},{"_id":"source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":0},{"_id":"source/img/404.png","path":"img/404.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"8e37694a06ca035dfdeff2478d294f769c591a8f","modified":1717395986095},{"_id":"source/_posts/hello-world.md","hash":"58e7696d7ecfcb938807c23056e79965d8ccfece","modified":1717468225282},{"_id":"source/.DS_Store","hash":"b576b05f5eea6fb681c7512512b0a9137e2b51c5","modified":1741665066813},{"_id":"source/friends/index.md","hash":"4af7e3f29529d21dc874a040d7d44d846d626a59","modified":1716621446890},{"_id":"source/img/img.png","hash":"62efbec711ae4f6dcb2f9e0ec6bc0b6786855ac0","modified":1716630090035},{"_id":"source/_posts/network/acme.sh域名自动化更新证书.md","hash":"49e22c8c4feeb6b3976555a62ff47ca792f5aad4","modified":1717087443126},{"_id":"source/about/index.md","hash":"8db62735fe3d535195093e083d78a6d0d1944dee","modified":1717396065699},{"_id":"source/tags/index.md","hash":"4d7a0fdf830dda843cb7f16b29093c6495bb3e83","modified":1717396061476},{"_id":"source/_posts/hexo/使用hexo和git实现多地更新和配置博客源文件.md","hash":"33fa5192da395fde0edd7e67d46155036231f490","modified":1742289410299},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1716626729898},{"_id":"themes/butterfly/package.json","hash":"314b0271ba3f668d0d6081b499b2d24e90dab25e","modified":1716626729906},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1716626729898},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1716626729898},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1716626729898},{"_id":"themes/butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":1716626729898},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1716626729899},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1716626729899},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1716626729899},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1716626729899},{"_id":"themes/butterfly/plugins.yml","hash":"d807fbb62163bb6fc5a83a24ebd69ac14cf45f67","modified":1716626729906},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1716626729906},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1716626729899},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1716626729906},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1716626729906},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1716626729906},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1716626729899},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1716626729898},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1716626729898},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1716626729898},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"16a828637dfaece0b9b8ef0593523f1c662b668b","modified":1720162309863},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1716626729898},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1716626729898},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"93a7f11ba0eea6d0e492d66c86e9ee983a272300","modified":1716627256739},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1716626729906},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1716626729906},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1716626729900},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1716626729906},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1716626729907},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1716626729907},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1716626729907},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1716626729908},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1716626729907},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1716626729907},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1716626729908},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1716626729908},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1716626729908},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1716626729901},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1716626729908},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1716626729908},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1716626729901},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1716626729911},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1716626729911},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1716626729911},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1716626729912},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1716626729911},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1716626729911},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1716626729900},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1716626729912},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1716626729912},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c107ecdba368b59fdcb085e440ebadd91e0e1426","modified":1720172425823},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1716626729899},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1716626729901},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1716626729900},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"657f46ce39ecd0de948c9c70279ecfabb9808a25","modified":1717085176281},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1716626729906},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1716626729906},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1716626729908},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1716626729908},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1716626729909},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1716626729908},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1716626729909},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1716626729908},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"18d08be0cd9b1f8c049d4b922e80f8163a55c947","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1716626729909},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1716626729909},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1716626729909},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1716626729910},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1716626729909},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1716626729909},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1716626729910},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1716626729910},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1716626729910},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1716626729910},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1716626729910},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1716626729910},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1716626729911},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1716626729911},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1716626729911},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1716626729911},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1716626729911},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1716626729911},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1716626729910},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1716626729910},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1716626729910},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1716626729910},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1716626729910},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1716626729912},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1716626729910},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1716626729910},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1716626729902},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1716626729912},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1716626729902},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f77f0fdeac2bc8a72f71a58f9b75aa39f0a108c8","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"5c29b5887e2e6cd81e1f13b32da53d9c139b788b","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7aa443b4881448979b810864e206e58c9ed787e3","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1716626729903},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"17080aba1754478197ab089f7948ed900f116d2b","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1716626729904},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1716626729905},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1716626729905},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1716626729908},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1716626729905},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1716626729908},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1716626729908},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1716626729908},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1716626729908},{"_id":"source/_posts/hexo/test.md","hash":"df21804e793c845d5ff79e968c4a00e7b7e47b93","modified":1717086513465},{"_id":"public/search.xml","hash":"2c8fd3ab784c55e61d5b1df8aee77eea7f848586","modified":1742291347106},{"_id":"public/404.html","hash":"745587b0cb1731c6dd170e3d309e5b1f58ed6ee5","modified":1742291347106},{"_id":"public/categories/index.html","hash":"b8f655197b7cdd81b0779e1f1e84e1e94490abfc","modified":1742291347106},{"_id":"public/friends/index.html","hash":"a98af49c0ba8af94997361896fbfac4c109ee6a7","modified":1742291347106},{"_id":"public/tags/index.html","hash":"b4d001cb84a5e0ae9abc76b6c2d657226887fdb1","modified":1742291347106},{"_id":"public/about/index.html","hash":"05c26f102be889b001d6596c55f1e749431134ae","modified":1742291347106},{"_id":"public/hexo/test.html","hash":"dcd86934c707477b80d329492a48ccf0e6bc0d95","modified":1716897279673},{"_id":"public/2024/05/24/network/acme.sh域名自动化更新证书/index.html","hash":"3323a8f7eacb3d3910e44deefb9312791babe862","modified":1716897279673},{"_id":"public/2024/05/23/hexo/使用hexo和git实现多地更新和配置博客源文件/index.html","hash":"6dcd0314ceeffd3f38970d45c822fc91e7159b7d","modified":1716897279673},{"_id":"public/2022/05/23/hello-world/index.html","hash":"cbcdac625edb82b178cf83433043c4f069258256","modified":1716897279673},{"_id":"public/archives/index.html","hash":"1e5507e5c4ceb0d9adb514960fd0442e3a73576c","modified":1742291347106},{"_id":"public/archives/2022/index.html","hash":"1875e33f5bb802e4b311b5a6b2fbbd68c8fc0dce","modified":1742291347106},{"_id":"public/archives/2022/05/index.html","hash":"913a047bbbecd0e0b46ee7128843a5545ec3f8c4","modified":1742291347106},{"_id":"public/archives/2024/index.html","hash":"b9d22c2fb11b30d8e765de8763125e26daae2182","modified":1742291347106},{"_id":"public/archives/2024/05/index.html","hash":"157a8e70c0a0d4e99714a342be651b271467472f","modified":1742291347106},{"_id":"public/categories/Network/index.html","hash":"d32b85c5f04c45903e8f716c8ba5cfa96b821f85","modified":1716897279673},{"_id":"public/index.html","hash":"8e039811f056ef6bdce13071678a40c8018a417c","modified":1742291347106},{"_id":"public/tags/Hexo/index.html","hash":"009bf41e13033995a5cf215799aba2f7e1679292","modified":1741679617770},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1716726556434},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1716726556434},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1716726556434},{"_id":"public/img/img.png","hash":"62efbec711ae4f6dcb2f9e0ec6bc0b6786855ac0","modified":1716726556434},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716726556434},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1716726556434},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1716726556434},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1716726556434},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1716726556434},{"_id":"public/css/index.css","hash":"d7dc4c614453c1f1d44cbd043871a2a4b9d1603f","modified":1716726556434},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1716726556434},{"_id":"source/img/.DS_Store","hash":"767434723348416aa5765ada23e8432d801f2bdd","modified":1741665076172},{"_id":"source/img/cover/10.jpg","hash":"ac2b6a1ca01d5dc7111379b25e16301c28ebbd3d","modified":1716991952907},{"_id":"source/img/cover/15.jpg","hash":"d852de3e6d3eae8741d728d90a98cd81b5a94edc","modified":1716991992398},{"_id":"source/img/cover/16.jpg","hash":"da90ac43d30bc03fb9e50099f143a46b34e4b029","modified":1716992094641},{"_id":"source/img/cover/9.jpg","hash":"d27124ab6b9df2d699a1cd9b4c843b633b88d5f5","modified":1716991982190},{"_id":"source/img/cover/8.jpg","hash":"91b54ffce287ddae8f14ca5a2197977198439e4b","modified":1716991938791},{"_id":"source/img/cover/0.jpg","hash":"0a033be563250c89299380c825d47724f767f4d7","modified":1716992079954},{"_id":"source/img/cover/11.jpg","hash":"de0cec9e04a127d1724fff9467f47a7966182394","modified":1716992071698},{"_id":"source/img/cover/17.jpg","hash":"091b5944d7d84cbc62070e5d0d0009344397f8e4","modified":1716992058469},{"_id":"source/img/cover/2.jpg","hash":"af60c715c8c34d6a3265a59879ea2e204a79a18f","modified":1716992013027},{"_id":"source/img/cover/1.jpg","hash":"98e06641570ef203f907d9ec55354dd4c4e3e37b","modified":1716992039521},{"_id":"source/img/cover/13.jpg","hash":"8175eb6a1a3e6a2de31c3d28dc0e26d0467af738","modified":1716991928073},{"_id":"source/img/cover/14.jpg","hash":"c01cf72ad89971e4e339d15d7d2347bc8a0b41aa","modified":1716991886185},{"_id":"source/img/cover/7.jpg","hash":"262619b1f3446e2f111e9c9c848bfc2e25d11236","modified":1716991919038},{"_id":"source/img/cover/5.jpg","hash":"2f80d2cf36a01cb119805e55c830bf79610ebfd8","modified":1716991728905},{"_id":"source/img/cover/6.jpg","hash":"09717e4d8f49b29d783ac4ce348ba3a7f7ac4f12","modified":1716991871071},{"_id":"source/img/cover/12.jpg","hash":"04dc71d36c848562013f3cdbb01aa52f88598e8c","modified":1716992117070},{"_id":"source/img/cover/3.jpg","hash":"94fd7940cc4b5e435e877e28f92b608c2b816d61","modified":1716991902610},{"_id":"source/img/cover/4.jpg","hash":"8b474baca3334aa2c9df123f37f6e4fbbd21c440","modified":1716992025397},{"_id":"source/_posts/hexo/test1.md","hash":"83ea9dfbd058c0006ef2a6769a5ac63d77464f65","modified":1717086513459},{"_id":"source/_posts/db/mybatis-mapper.md","hash":"5c11b0af59a9b6019d7153cfc205b00ce1b7c8b8","modified":1742289456473},{"_id":"source/_posts/network/域名自动化更新证书.md","hash":"013cae633aa3beab51ae096edba97e0d6a962f5d","modified":1741672447171},{"_id":"source/archive/index.md","hash":"0104bde8cb64b88aff7d3b30202810175b129a35","modified":1717395275885},{"_id":"source/archives/index.md","hash":"d55d7a84a5079f9c6572b4c4db0fb7c703c1e6da","modified":1717395431035},{"_id":"source/img/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1717395905085},{"_id":"source/img/404.png","hash":"5e75790171ca6a8a3446be21aa787deb1c58e8db","modified":1717397341059},{"_id":"public/db/mybatis-mapper.html","hash":"9d95f7ae2d9b688817fa253d8ec769ee4938eebb","modified":1742291347106},{"_id":"public/network/acme_sh.html","hash":"0b3a3dd9fd47f0994c325f527e37fead008a0210","modified":1742291347106},{"_id":"public/hello-word.html","hash":"66dc9cc1dc8ea2651b3bdf33bd032fcc657b7b76","modified":1742291347106},{"_id":"public/hexo/hexo-git.html","hash":"1e1d9999808f7ba5ad774332bb04d2f08414fe88","modified":1742291347106},{"_id":"public/archives/2024/06/index.html","hash":"1f65e22c14b931daeb1b9eb4534df0c824fcf634","modified":1742291347106},{"_id":"public/categories/网络/index.html","hash":"41991a03c1c6a16f129f2208092c28c21198d95a","modified":1742291347106},{"_id":"public/categories/数据库/index.html","hash":"2e7b4c964d04b72d0045df8c0cf96536dad98248","modified":1742291347106},{"_id":"public/tags/Mybatis/index.html","hash":"0fad8092587352199324c1dfbd4fca01c25480b6","modified":1741679617770},{"_id":"public/tags/Mysql/index.html","hash":"0dff36ce4037144ca808a32f61a3da1787507273","modified":1741679617770},{"_id":"public/img/404.png","hash":"5e75790171ca6a8a3446be21aa787deb1c58e8db","modified":1717398126688},{"_id":"public/img/cover/10.jpg","hash":"ac2b6a1ca01d5dc7111379b25e16301c28ebbd3d","modified":1717398126688},{"_id":"public/img/cover/15.jpg","hash":"d852de3e6d3eae8741d728d90a98cd81b5a94edc","modified":1717398126688},{"_id":"public/img/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1717398126688},{"_id":"public/img/cover/16.jpg","hash":"da90ac43d30bc03fb9e50099f143a46b34e4b029","modified":1717398126688},{"_id":"public/img/cover/8.jpg","hash":"91b54ffce287ddae8f14ca5a2197977198439e4b","modified":1717398126688},{"_id":"public/img/cover/9.jpg","hash":"d27124ab6b9df2d699a1cd9b4c843b633b88d5f5","modified":1717398126688},{"_id":"public/img/cover/0.jpg","hash":"0a033be563250c89299380c825d47724f767f4d7","modified":1717398126688},{"_id":"public/img/cover/17.jpg","hash":"091b5944d7d84cbc62070e5d0d0009344397f8e4","modified":1717398126688},{"_id":"public/img/cover/2.jpg","hash":"af60c715c8c34d6a3265a59879ea2e204a79a18f","modified":1717398126688},{"_id":"public/img/cover/11.jpg","hash":"de0cec9e04a127d1724fff9467f47a7966182394","modified":1717398126688},{"_id":"public/img/cover/1.jpg","hash":"98e06641570ef203f907d9ec55354dd4c4e3e37b","modified":1717398126688},{"_id":"public/img/cover/13.jpg","hash":"8175eb6a1a3e6a2de31c3d28dc0e26d0467af738","modified":1717398126688},{"_id":"public/img/cover/14.jpg","hash":"c01cf72ad89971e4e339d15d7d2347bc8a0b41aa","modified":1717398126688},{"_id":"public/img/cover/7.jpg","hash":"262619b1f3446e2f111e9c9c848bfc2e25d11236","modified":1717398126688},{"_id":"public/img/cover/6.jpg","hash":"09717e4d8f49b29d783ac4ce348ba3a7f7ac4f12","modified":1717398126688},{"_id":"public/img/cover/5.jpg","hash":"2f80d2cf36a01cb119805e55c830bf79610ebfd8","modified":1717398126688},{"_id":"public/img/cover/12.jpg","hash":"04dc71d36c848562013f3cdbb01aa52f88598e8c","modified":1717398126688},{"_id":"public/img/cover/3.jpg","hash":"94fd7940cc4b5e435e877e28f92b608c2b816d61","modified":1717398126688},{"_id":"public/img/cover/4.jpg","hash":"8b474baca3334aa2c9df123f37f6e4fbbd21c440","modified":1717398126688},{"_id":"source/_posts/db/sql.md","hash":"e8dc4e365676470edec8364dc3972b1f74194a2e","modified":1742289468197},{"_id":"source/_posts/live/减肥记录.md","hash":"b7233f54a7d1ef027e7c7a3f14d60e06a4f8c286","modified":1719506808498},{"_id":"public/db/sql.html","hash":"c0ddcdc1b9a4415b99dc8ad5c49684133d7db0af","modified":1742291347106},{"_id":"public/live/lose-weight-records.html","hash":"3344d08bb8c3b4e5fcaff76c567ef7dbd77405b2","modified":1741058123913},{"_id":"public/categories/生活/index.html","hash":"bda61b4de5142ed3f7fc1a014b01686c1642f52c","modified":1741058757720},{"_id":"public/tags/DM/index.html","hash":"d910186f4450b64b8fa97d209de535546ca1e40e","modified":1742291347106},{"_id":"public/tags/生活/index.html","hash":"4e8690d22d9a70da46e0cb7658b355dba2e28ac3","modified":1741058757720},{"_id":"public/tags/减肥/index.html","hash":"08ab6d3a9f9bfa911753985a0498340b6e1d7f20","modified":1741058757720},{"_id":"source/_posts/html/css实用代码合集.md","hash":"07882c7e8d9bbc62e05f254de0c45798645c8b4b","modified":1742289399335},{"_id":"public/html/practical-css.html","hash":"d9c417c84201a07e9c518096301b1fd81213198f","modified":1742291347106},{"_id":"public/categories/前端/index.html","hash":"0d5d33380b552d434ff5f9b21f2018a3567cd41d","modified":1742291347106},{"_id":"public/tags/前端/index.html","hash":"d2927cbd41b4a869e53b281a77ab5ed05885549c","modified":1742291347106},{"_id":"public/tags/CSS/index.html","hash":"adb9209e0415c390ae91ed9ada15043454576508","modified":1741679617770},{"_id":"source/_posts/.DS_Store","hash":"f11e114b893e7c8f9c49e771088604a66fe9e2f8","modified":1718183049053},{"_id":"source/_posts/java/List对象排序.md","hash":"0647aa19583cbbfaefb7a4886aff60cd7ade09a8","modified":1742289388132},{"_id":"source/_posts/linux/fireword-cmd.md","hash":"7dcaeb479e6d4e860e4ac9f2ff1ab20bdeb36ec2","modified":1719508617849},{"_id":"source/_posts/linux/firewall-cmd.md","hash":"1534c799a9adb71c195a715711d381b062efea4c","modified":1742289354534},{"_id":"public/linux/firewall-cmd.html","hash":"3cbad02cc32835a9e4ee1ea40f07367a2175e602","modified":1742291347106},{"_id":"public/java/collections-sort.html","hash":"666453f06c7715828ad49d629730cdc1944d4a63","modified":1742291347106},{"_id":"public/categories/Java/index.html","hash":"b1dab39fef37fb00324b6e85cc72539b0460253e","modified":1742291347106},{"_id":"public/categories/Linux/index.html","hash":"35afdf44eabf3767558f939b607576b1a250b5b1","modified":1742291347106},{"_id":"public/tags/Java/index.html","hash":"177f722aa2fb5424a8265ab89a46a01ad60084d7","modified":1741679617770},{"_id":"public/tags/List/index.html","hash":"f4a186fa517b3ab611513c59b9ee58729a8a8211","modified":1741679617770},{"_id":"public/tags/Sort/index.html","hash":"1378d1c0706c4231e581f0d62f3e04af57c11764","modified":1741679617770},{"_id":"public/tags/Linux/index.html","hash":"1b0026626f015115f2bbcd6b408513b59fee4821","modified":1741679617770},{"_id":"public/tags/防火墙/index.html","hash":"8b5cac0fddaed4e11c60f99cc70b387071b46c91","modified":1742291347106},{"_id":"source/_posts/db/dimp-and-dexp.md","hash":"5da319690f2e2d5ebcb1b7b9e797828b48016606","modified":1719987759143},{"_id":"public/archives/page/2/index.html","hash":"8d170f311531d8f7e8bc9aabb332c31b4dfd2c6c","modified":1742291347106},{"_id":"public/archives/2024/07/index.html","hash":"b9ac4ca385dfe68701b5655b6a515c5191cb2850","modified":1742291347106},{"_id":"public/page/2/index.html","hash":"445b72ee62116b5be5949b366914d5c07db6ec23","modified":1742291347106},{"_id":"public/db/dimp-and-dexp.html","hash":"c1cfe2b9b2abd24d095a1bdb755734799e8fe0fc","modified":1742291347106},{"_id":"source/_data/widget.yml","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1720173234841},{"_id":"source/_posts/linux/yum-change-source.md","hash":"e1e4f780c1cd6c4e92c49c874d518fcb6c5fd655","modified":1742289369474},{"_id":"public/archives/2024/page/2/index.html","hash":"98b0e4e966f9af2f18bfa07ebe498e0726aa6d75","modified":1742291347106},{"_id":"public/linux/yum-change-source.html","hash":"9f6e13736a34f15aec2fc7091f84fa8743019dcf","modified":1742291347106},{"_id":"source/_posts/db/mysql-master-slave.md","hash":"82085c59b44f93b180c492911a4362d934b41052","modified":1721013111433},{"_id":"public/db/mysql-master-slave.html","hash":"ef66a25f5608b686359179c89817d2729c360120","modified":1742291347106},{"_id":"public/categories/Mysql/index.html","hash":"11d1107c93a336901a1b53fe2e70772c0175c6e6","modified":1742291347106},{"_id":"source/_posts/linux/log.md","hash":"5a0c71428ecc33a1ce6fbc215c7a0341077c1aa9","modified":1742289365005},{"_id":"source/_posts/docker/自建镜像仓库.md","hash":"a463b912cc5d6d239c380c4096706a7399e19a73","modified":1742289435952},{"_id":"public/docker/docker-registry.html","hash":"0b37df60ebe9c718d95852e7e91be1f293095e59","modified":1742291347106},{"_id":"public/archives/2024/09/index.html","hash":"5af8ea417f26a56004d27d298e24adc4eb760c2f","modified":1742291347106},{"_id":"public/archives/2024/11/index.html","hash":"4277dc6190ec7a7bbc688344970c5811699015d2","modified":1742291347106},{"_id":"public/linux/log.html","hash":"342f064808ec05dcac2cd8c6470c54eea114bb84","modified":1742291347106},{"_id":"source/_posts/python/conda命令.md","hash":"ae7c5973f6eb0db70e14b89e73a51ed8d7541064","modified":1742289317875},{"_id":"source/_posts/python/conda占用高CPU问题.md","hash":"801a998ddee1846c675475816184b4f82b26bd59","modified":1742289322763},{"_id":"source/_posts/linux/Linux挂载网络硬盘.md","hash":"341ef54fd313a8d9198df8aa6036605eff7a4e50","modified":1742289349379},{"_id":"public/python/conda-command.html","hash":"451130461644c120e73423f42acadbe53398a4d5","modified":1742291347106},{"_id":"public/python/conda-problem0.html","hash":"df7c24617f2ecf85615191e3d809d60f81e9d5fa","modified":1742291347106},{"_id":"public/archives/2025/index.html","hash":"9fc1ac2a380ea0d1f61bc7fa73eb3f287e6cbf37","modified":1742291347106},{"_id":"public/archives/2025/03/index.html","hash":"5eb183b8b0eef1db44247c255e963013a68dfb9f","modified":1742291347106},{"_id":"public/categories/Python/index.html","hash":"22f72aa34867b2d44f5a2bed5d5d7ea906af0831","modified":1742291347106},{"_id":"public/tags/Python/index.html","hash":"1b0e8ac159a3757df5b0558b6cbd3ecba860f3db","modified":1741679617770},{"_id":"public/tags/conda/index.html","hash":"df50d22fbedf753e00e8f8abc26e29862e0d8a7c","modified":1742291347106},{"_id":"public/tags/网络硬盘/index.html","hash":"6667047faacb15c289e1170748a7560b8d597bc9","modified":1742291347106},{"_id":"public/linux/network-hard-disk.html","hash":"cc96614f96b540c4fd91da427ec30c88ac504e68","modified":1742291347106},{"_id":"source/_posts/git/git项目同步上游项目到本项目.md","hash":"e3b345bbd2b5510959866baa880089ff1dfe1a02","modified":1742291269926},{"_id":"public/git/git-fork-sync.html","hash":"877580dff74df4dc43eeff4bc8e20c79d9ce16ae","modified":1742291347106},{"_id":"public/categories/Git/index.html","hash":"c12f3829473a709a19756690b90ab0d3913a9515","modified":1742291347106},{"_id":"public/categories/Docker/index.html","hash":"0bc0bb54072a5efcaa5cc630e00fc9fab7b38a28","modified":1742291347106},{"_id":"public/tags/mybatis/index.html","hash":"76146dd65d21b7ff1e209a053fb59c430226b8ac","modified":1742291347106},{"_id":"public/tags/mysql/index.html","hash":"5e9341e541db7332f4d00f59fc9f79f33511d3c0","modified":1742291347106},{"_id":"public/tags/git/index.html","hash":"f43b9b46d81362a24a2a5871f3620c94be3f1017","modified":1742291347106},{"_id":"public/tags/fork/index.html","hash":"bdb25288e7c17c89ca300d33383036cb006f1a6a","modified":1742291347106},{"_id":"public/tags/hexo/index.html","hash":"86864deb4a2ecd889ec1ea22da30b26d650618ba","modified":1742291347106},{"_id":"public/tags/css/index.html","hash":"555f83a260f254f2c4b5ba725eaede73476ea519","modified":1742291347106},{"_id":"public/tags/java/index.html","hash":"deee446b5b18bf448fcb0825103f2997dbee52dd","modified":1742291347106},{"_id":"public/tags/list/index.html","hash":"3a488e9a92e70e04d66eaa25677320651060e62b","modified":1742291347106},{"_id":"public/tags/sort/index.html","hash":"a8e9c521b86a1bd76aa7fa2118411feadd93e2ed","modified":1742291347106},{"_id":"public/tags/linux/index.html","hash":"041814e24b3a10ed37c2231e07dfb378c4b236fe","modified":1742291347106},{"_id":"public/tags/docker/index.html","hash":"b40cd52282421fcccf8f31ef865acb3c602e7121","modified":1742291347106},{"_id":"public/tags/python/index.html","hash":"a0054803da54132f7441d4cf362e5a44f6dfd468","modified":1742291347106}],"Category":[{"name":"Network","_id":"clwlyxfaz0008l8qf72kt10nt"},{"name":"数据库","_id":"clwyfai2k00017lqf0raz5mtd"},{"name":"网络","_id":"clwyfor6u000b7lqf4bxbbd9g"},{"name":"生活","_id":"clx204ldq0001p4qfeneqd9t7"},{"name":"前端","_id":"clx2ziu2t00012eqf32u19rem"},{"name":"Java","_id":"clxxdot1s0001bbqffdg6g2ye"},{"name":"Linux","_id":"clxxj2j0h0001vaqf1kn3cmhj"},{"name":"Mysql","_id":"clyiix09p0001rlqfbtsrdfdc"},{"name":"Python","_id":"cm842o98600023nqf99rbb5qd"},{"name":"Git","_id":"cm8eb5uwd00016hqf78r81j6b"},{"name":"Docker","_id":"cm8eb5uxo000g6hqfdir47ktj"}],"Data":[],"Page":[{"title":"所有分类","date":"2019-05-24T16:00:00.000Z","type":"categories","comments":0,"categories":null,"tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\ndate: 2019-05-25\ntype: \"categories\"\ncomments: false\ncategories:\ntags:\n---\n","updated":"2024-06-03T06:26:26.095Z","path":"categories/index.html","_id":"clwlyxfau0000l8qf34g52gu4","layout":"page","content":"","cover":"img/cover/0.jpg","cover_type":"img","excerpt":"","more":""},{"title":"friends","date":"2024-05-24T16:00:00.000Z","type":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2024-05-25\ntype: friends\n---\n","updated":"2024-05-25T07:17:26.890Z","path":"friends/index.html","comments":1,"layout":"page","_id":"clwlyxfax0002l8qf480757dm","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"所有标签","date":"2019-05-03T04:03:35.000Z","type":"tags","description":"2w435是","comments":0,"categories":null,"tags":null,"top_img":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ndate: 2019-05-03 12:03:35\ntype: \"tags\"\ndescription: 2w435是\ncomments: false\ncategories:\ntags:\ntop_img:\n---\n","updated":"2024-06-03T06:27:41.476Z","path":"tags/index.html","_id":"clwlyxfay0004l8qfa6k7a62a","layout":"page","content":"","cover":"img/cover/0.jpg","cover_type":"img","excerpt":"","more":""},{"title":"关于我","date":"2019-05-03T04:03:35.000Z","type":"about","cover":"img/cover/0.jpg","categories":null,"tags":null,"top_img":null,"_content":"第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！\n\n## 我也不知道我自己要写一些什么\n\n兜兜转转，一年又一年，以后一周怎么说也要弄一篇文章出来吧，记录一下自己工作中遇到的问题，记录一下处理方式，也记录一下别的什么～～～\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-05-03 12:03:35\ntype: \"about\"\ncover:\ncategories:\ntags:\ntop_img:\n---\n第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！\n\n## 我也不知道我自己要写一些什么\n\n兜兜转转，一年又一年，以后一周怎么说也要弄一篇文章出来吧，记录一下自己工作中遇到的问题，记录一下处理方式，也记录一下别的什么～～～\n","updated":"2024-06-03T06:27:45.699Z","path":"about/index.html","_id":"clwlyxfaz0007l8qf0jtba5kv","comments":1,"layout":"page","content":"<p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p>\n<h2 id=\"我也不知道我自己要写一些什么\"><a href=\"#我也不知道我自己要写一些什么\" class=\"headerlink\" title=\"我也不知道我自己要写一些什么\"></a>我也不知道我自己要写一些什么</h2><p>兜兜转转，一年又一年，以后一周怎么说也要弄一篇文章出来吧，记录一下自己工作中遇到的问题，记录一下处理方式，也记录一下别的什么～～～</p>\n","cover_type":"img","excerpt":"","more":"<p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p>\n<h2 id=\"我也不知道我自己要写一些什么\"><a href=\"#我也不知道我自己要写一些什么\" class=\"headerlink\" title=\"我也不知道我自己要写一些什么\"></a>我也不知道我自己要写一些什么</h2><p>兜兜转转，一年又一年，以后一周怎么说也要弄一篇文章出来吧，记录一下自己工作中遇到的问题，记录一下处理方式，也记录一下别的什么～～～</p>\n"}],"Post":[{"title":"hexo命令","cover":"img/cover/17.jpg","date":"2022-05-22T16:00:00.000Z","_content":"### 前言\n\n第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！\n\n---\n\n### 总要记录一点什么吧\n\nhexo的一些常用命令模版\n\n```shell\nhexo s # 启动服务\nhexo d -g # 编译项目并推送到github下mater分支\nhexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo命令\npermalink: hello-word.html\ncover: img/cover/17.jpg\ndate: 2022-05-23\ncategories:\ntags:\n---\n### 前言\n\n第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！\n\n---\n\n### 总要记录一点什么吧\n\nhexo的一些常用命令模版\n\n```shell\nhexo s # 启动服务\nhexo d -g # 编译项目并推送到github下mater分支\nhexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章\n```\n","slug":"hello-world","published":1,"updated":"2024-06-12T08:22:54.469Z","__permalink":"hello-word.html","_id":"clwlyxfaw0001l8qf5huo6205","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p>\n<hr>\n<h3 id=\"总要记录一点什么吧\"><a href=\"#总要记录一点什么吧\" class=\"headerlink\" title=\"总要记录一点什么吧\"></a>总要记录一点什么吧</h3><p>hexo的一些常用命令模版</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s # 启动服务</span><br><span class=\"line\">hexo d -g # 编译项目并推送到github下mater分支</span><br><span class=\"line\">hexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章</span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p>\n<hr>\n<h3 id=\"总要记录一点什么吧\"><a href=\"#总要记录一点什么吧\" class=\"headerlink\" title=\"总要记录一点什么吧\"></a>总要记录一点什么吧</h3><p>hexo的一些常用命令模版</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s # 启动服务</span><br><span class=\"line\">hexo d -g # 编译项目并推送到github下mater分支</span><br><span class=\"line\">hexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章</span><br></pre></td></tr></table></figure>\n"},{"title":"使用hexo和git实现多地更新和配置博客源文件","date":"2024-05-22T16:00:00.000Z","cover":"/img/cover/11.jpg","_content":"### 前言\n\n使用[hexo](https://hexo.io/zh-cn/)写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。\n\n- 利用git分支实现\n- hexo生成的静态博客文件默认放在master分支上。\n- hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支\n\n### hexo搭建博客原理\n\n- hexo帮助把博客发送到github，同时把md文件转换成网页文件。\n- hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。\n\n### 搭建hexo服务器端电脑设置\n\n#### 准备工作\n\n- 首先确保自己已经使用hexo在[github](https://so.csdn.net/so/search?q=github&spm=1001.2101.3001.7020)搭建好了自己的个人博客。\n\n#### 对username.github.io仓库新建hexo分支，并克隆\n\n- 在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库->Settings->Branches->Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录\n- 完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx\n\n#### 将本地博客的部署文件拷贝进username.github.io文件目录\n\n-  如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。\n- 接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：\n  - 将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。\n  - 可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目\n\n#### 提交hexo分支\n\n- 执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：\n\n  现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。\n  master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。\n\n### 其他任何一台电脑\n\n至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：\n\n- 将新电脑的生成的ssh key添加到GitHub账户上\n- 在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支\n- 切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)\n- 到这里了就可以开始在自己的电脑上写博客了！\n\n编辑、撰写文章或其他博客更新改动：\n\n- 依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新\n- 执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！\n\n### 回到hexo服务器端电脑更新并提交博客\n\n\n\n注：[原地址](https://blog.csdn.net/qq_41684957/article/details/90680765)\n","source":"_posts/hexo/使用hexo和git实现多地更新和配置博客源文件.md","raw":"---\ntitle: 使用hexo和git实现多地更新和配置博客源文件\ndate: 2024-05-23\npermalink: hexo/hexo-git.html\ncover: /img/cover/11.jpg\ncategories:\ntags:\n  - hexo\n---\n### 前言\n\n使用[hexo](https://hexo.io/zh-cn/)写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。\n\n- 利用git分支实现\n- hexo生成的静态博客文件默认放在master分支上。\n- hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支\n\n### hexo搭建博客原理\n\n- hexo帮助把博客发送到github，同时把md文件转换成网页文件。\n- hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。\n\n### 搭建hexo服务器端电脑设置\n\n#### 准备工作\n\n- 首先确保自己已经使用hexo在[github](https://so.csdn.net/so/search?q=github&spm=1001.2101.3001.7020)搭建好了自己的个人博客。\n\n#### 对username.github.io仓库新建hexo分支，并克隆\n\n- 在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库->Settings->Branches->Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录\n- 完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx\n\n#### 将本地博客的部署文件拷贝进username.github.io文件目录\n\n-  如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。\n- 接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：\n  - 将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。\n  - 可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目\n\n#### 提交hexo分支\n\n- 执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：\n\n  现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。\n  master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。\n\n### 其他任何一台电脑\n\n至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：\n\n- 将新电脑的生成的ssh key添加到GitHub账户上\n- 在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支\n- 切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)\n- 到这里了就可以开始在自己的电脑上写博客了！\n\n编辑、撰写文章或其他博客更新改动：\n\n- 依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新\n- 执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！\n\n### 回到hexo服务器端电脑更新并提交博客\n\n\n\n注：[原地址](https://blog.csdn.net/qq_41684957/article/details/90680765)\n","slug":"hexo/使用hexo和git实现多地更新和配置博客源文件","published":1,"updated":"2025-03-18T09:16:50.299Z","__permalink":"hexo/hexo-git.html","_id":"clwlyxfax0003l8qf97ms7u9o","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用<a href=\"https://hexo.io/zh-cn/\">hexo</a>写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。</p>\n<ul>\n<li>利用git分支实现</li>\n<li>hexo生成的静态博客文件默认放在master分支上。</li>\n<li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li>\n</ul>\n<h3 id=\"hexo搭建博客原理\"><a href=\"#hexo搭建博客原理\" class=\"headerlink\" title=\"hexo搭建博客原理\"></a>hexo搭建博客原理</h3><ul>\n<li>hexo帮助把博客发送到github，同时把md文件转换成网页文件。</li>\n<li>hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。</li>\n</ul>\n<h3 id=\"搭建hexo服务器端电脑设置\"><a href=\"#搭建hexo服务器端电脑设置\" class=\"headerlink\" title=\"搭建hexo服务器端电脑设置\"></a>搭建hexo服务器端电脑设置</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>首先确保自己已经使用hexo在<a href=\"https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020\">github</a>搭建好了自己的个人博客。</li>\n</ul>\n<h4 id=\"对username-github-io仓库新建hexo分支，并克隆\"><a href=\"#对username-github-io仓库新建hexo分支，并克隆\" class=\"headerlink\" title=\"对username.github.io仓库新建hexo分支，并克隆\"></a>对username.github.io仓库新建hexo分支，并克隆</h4><ul>\n<li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录</li>\n<li>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx</li>\n</ul>\n<h4 id=\"将本地博客的部署文件拷贝进username-github-io文件目录\"><a href=\"#将本地博客的部署文件拷贝进username-github-io文件目录\" class=\"headerlink\" title=\"将本地博客的部署文件拷贝进username.github.io文件目录\"></a>将本地博客的部署文件拷贝进username.github.io文件目录</h4><ul>\n<li>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。</li>\n<li>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：<ul>\n<li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li>\n<li>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"提交hexo分支\"><a href=\"#提交hexo分支\" class=\"headerlink\" title=\"提交hexo分支\"></a>提交hexo分支</h4><ul>\n<li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：</p>\n<p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p>\n</li>\n</ul>\n<h3 id=\"其他任何一台电脑\"><a href=\"#其他任何一台电脑\" class=\"headerlink\" title=\"其他任何一台电脑\"></a>其他任何一台电脑</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p>\n<ul>\n<li>将新电脑的生成的ssh key添加到GitHub账户上</li>\n<li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li>\n<li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li>\n<li>到这里了就可以开始在自己的电脑上写博客了！</li>\n</ul>\n<p>编辑、撰写文章或其他博客更新改动：</p>\n<ul>\n<li>依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新</li>\n<li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li>\n</ul>\n<h3 id=\"回到hexo服务器端电脑更新并提交博客\"><a href=\"#回到hexo服务器端电脑更新并提交博客\" class=\"headerlink\" title=\"回到hexo服务器端电脑更新并提交博客\"></a>回到hexo服务器端电脑更新并提交博客</h3><p>注：<a href=\"https://blog.csdn.net/qq_41684957/article/details/90680765\">原地址</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用<a href=\"https://hexo.io/zh-cn/\">hexo</a>写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。</p>\n<ul>\n<li>利用git分支实现</li>\n<li>hexo生成的静态博客文件默认放在master分支上。</li>\n<li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li>\n</ul>\n<h3 id=\"hexo搭建博客原理\"><a href=\"#hexo搭建博客原理\" class=\"headerlink\" title=\"hexo搭建博客原理\"></a>hexo搭建博客原理</h3><ul>\n<li>hexo帮助把博客发送到github，同时把md文件转换成网页文件。</li>\n<li>hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。</li>\n</ul>\n<h3 id=\"搭建hexo服务器端电脑设置\"><a href=\"#搭建hexo服务器端电脑设置\" class=\"headerlink\" title=\"搭建hexo服务器端电脑设置\"></a>搭建hexo服务器端电脑设置</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>首先确保自己已经使用hexo在<a href=\"https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020\">github</a>搭建好了自己的个人博客。</li>\n</ul>\n<h4 id=\"对username-github-io仓库新建hexo分支，并克隆\"><a href=\"#对username-github-io仓库新建hexo分支，并克隆\" class=\"headerlink\" title=\"对username.github.io仓库新建hexo分支，并克隆\"></a>对username.github.io仓库新建hexo分支，并克隆</h4><ul>\n<li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录</li>\n<li>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx</li>\n</ul>\n<h4 id=\"将本地博客的部署文件拷贝进username-github-io文件目录\"><a href=\"#将本地博客的部署文件拷贝进username-github-io文件目录\" class=\"headerlink\" title=\"将本地博客的部署文件拷贝进username.github.io文件目录\"></a>将本地博客的部署文件拷贝进username.github.io文件目录</h4><ul>\n<li>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。</li>\n<li>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：<ul>\n<li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li>\n<li>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"提交hexo分支\"><a href=\"#提交hexo分支\" class=\"headerlink\" title=\"提交hexo分支\"></a>提交hexo分支</h4><ul>\n<li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：</p>\n<p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p>\n</li>\n</ul>\n<h3 id=\"其他任何一台电脑\"><a href=\"#其他任何一台电脑\" class=\"headerlink\" title=\"其他任何一台电脑\"></a>其他任何一台电脑</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p>\n<ul>\n<li>将新电脑的生成的ssh key添加到GitHub账户上</li>\n<li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li>\n<li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li>\n<li>到这里了就可以开始在自己的电脑上写博客了！</li>\n</ul>\n<p>编辑、撰写文章或其他博客更新改动：</p>\n<ul>\n<li>依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新</li>\n<li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li>\n</ul>\n<h3 id=\"回到hexo服务器端电脑更新并提交博客\"><a href=\"#回到hexo服务器端电脑更新并提交博客\" class=\"headerlink\" title=\"回到hexo服务器端电脑更新并提交博客\"></a>回到hexo服务器端电脑更新并提交博客</h3><p>注：<a href=\"https://blog.csdn.net/qq_41684957/article/details/90680765\">原地址</a></p>\n"},{"title":"Mybatis下Mapper文件例子","cover":"/img/cover/5.jpg","hide":false,"date":"2024-06-03T03:39:03.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。\n\n----\n\n### choose 用法\n\n```xml\n<choose>\n    <when test=\"reqVo.inspectionType == 3\">\n        SQL1...\n    </when>\n    <when test=\"reqVo.inspectionType == 4\">\n        SQL2...\n    </when>\n    <otherwise>\n        SQL3...\n    </otherwise>\n</choose>\n```\n\n### foreach 用法\n\n```xml\n<foreach collection=\"categoryIds\" open=\"(\" separator=\",\" close=\")\" item=\"categoryId\">\n    #{categoryId}\n</foreach>\n```\n\n","source":"_posts/db/mybatis-mapper.md","raw":"---\n\ntitle: Mybatis下Mapper文件例子\ncover: /img/cover/5.jpg\nhide: false\ndate: 2024-06-03 11:39:03\npermalink: db/mybatis-mapper.html\ntags: \n - mysql\n - mybatis\ncategories:\n - 数据库\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。\n\n----\n\n### choose 用法\n\n```xml\n<choose>\n    <when test=\"reqVo.inspectionType == 3\">\n        SQL1...\n    </when>\n    <when test=\"reqVo.inspectionType == 4\">\n        SQL2...\n    </when>\n    <otherwise>\n        SQL3...\n    </otherwise>\n</choose>\n```\n\n### foreach 用法\n\n```xml\n<foreach collection=\"categoryIds\" open=\"(\" separator=\",\" close=\")\" item=\"categoryId\">\n    #{categoryId}\n</foreach>\n```\n\n","slug":"db/mybatis-mapper","published":1,"updated":"2025-03-18T09:17:36.473Z","__permalink":"db/mybatis-mapper.html","_id":"clwyf8zbu00007lqfas2b6scs","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。</p>\n<hr>\n<h3 id=\"choose-用法\"><a href=\"#choose-用法\" class=\"headerlink\" title=\"choose 用法\"></a>choose 用法</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;reqVo.inspectionType == 3&quot;</span>&gt;</span></span><br><span class=\"line\">        SQL1...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;reqVo.inspectionType == 4&quot;</span>&gt;</span></span><br><span class=\"line\">        SQL2...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">        SQL3...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"foreach-用法\"><a href=\"#foreach-用法\" class=\"headerlink\" title=\"foreach 用法\"></a>foreach 用法</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;categoryIds&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;categoryId&quot;</span>&gt;</span></span><br><span class=\"line\">    #&#123;categoryId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。</p>\n<hr>\n<h3 id=\"choose-用法\"><a href=\"#choose-用法\" class=\"headerlink\" title=\"choose 用法\"></a>choose 用法</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;reqVo.inspectionType == 3&quot;</span>&gt;</span></span><br><span class=\"line\">        SQL1...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;reqVo.inspectionType == 4&quot;</span>&gt;</span></span><br><span class=\"line\">        SQL2...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">        SQL3...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"foreach-用法\"><a href=\"#foreach-用法\" class=\"headerlink\" title=\"foreach 用法\"></a>foreach 用法</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;categoryIds&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;categoryId&quot;</span>&gt;</span></span><br><span class=\"line\">    #&#123;categoryId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"域名自动化更新证书","date":"2024-05-23T16:00:00.000Z","cover":"img/cover/6.jpg","_content":"\n### 前言\n\n目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。\n\n----\n\n### 安装\n\n安装很简单，一个命令:\n\n```shell\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\n创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: `alias acme.sh=~/.acme.sh/acme.sh`；\n\n自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。\n\n注：如果没有安装crontab，可在安装crontab之后加入以下任务：\n\n```shell\n0 0 * * * \"~/.acme.sh\"/acme.sh --cron --home \"~/.acme.sh\" > /dev/null\n```\n\n### 更改服务地址\n\nacme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pendi ng，The CA is processing your order,please just wait.\n\n只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。\n\n```shell\nacme.sh --set-default-ca --server letsencrypt\n```\n\n### 生成证书\n\n**acme.sh** 实现了 **acme** 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。\n\n#### http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。\n\n```shell\n# 注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放\n# 如果是多个不同的二级域名，要每个单独执行一次\n# 有可能出现curl不可用的情况，可以用 -- use-wget强制用wget替代curl\nacme.sh --issue -d mydomain.com --webroot /home/wwwroot/mydomain.com/\n```\n\n只需要指定域名，并指定域名所在的网站根目录。 **acme.sh** 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。\n\n注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:\n\n```shell\nacme.sh --issue -d mydomain.com --standalone\n```\n\n#### 安装证书\n\n前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。\n\n注：默认生成的证书都放在安装目录下: `~/.acme.sh/`，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 `--install-cert` 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:\n\n##### Apache example:\n\n---\n\n```shell\n# 注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试\nacme.sh --install-cert -d example.com \\\n--cert-file      /path/to/certfile/in/apache/cert.pem  \\\n--key-file       /path/to/keyfile/in/apache/key.key  \\\n--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\\n--reloadcmd     \"service apache2 force-reload\"\n```\n\n##### Nginx example:\n\n---\n\n```shell\n# 网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，\n# 如果是docker，可改成 docker exec -it 容器名 nginx -s reload \nacme.sh --install-cert -d example.com \\\n--key-file       /path/to/keyfile/in/nginx/key.key  \\\n--fullchain-file /path/to/fullchain/nginx/cert.pem \\\n--reloadcmd     \"nginx -s reload\"\n```\n\n#### 查看已安装证书信息\n\n```shell\nacme.sh --info -d example.com\n# 会输出如下内容：\nDOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf\nLe_Domain=example.com\nLe_Alt=no\nLe_Webroot=dns_ali\nLe_PreHook=\nLe_PostHook=\nLe_RenewHook=\nLe_API=https://acme-v02.api.letsencrypt.org/directory\nLe_Keylength=\nLe_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310\nLe_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310\nLe_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07\nLe_CertCreateTime=1649358725\nLe_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022\nLe_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022\nLe_NextRenewTime=1654456325\nLe_RealCertPath=\nLe_RealCACertPath=\nLe_RealKeyPath=/etc/acme/example.com/privkey.pem\nLe_ReloadCmd=service nginx force-reload\nLe_RealFullChainPath=/etc/acme/example.com/chain.pem\n```\n\n#### 更新证书\n\n目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:\n\n```shell\ncrontab  -l\n56 * * * * \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" > /dev/null\n```\n\n### 关于修改ReloadCmd\n\n目前修改`ReloadCmd`没有专门的命令，可以通过重新安装证书来实现修改`reloadCmd`的目的。 此外，安装证书后，相关信息是保存在`~/.acme.sh/example.com/example.conf`文件下的，内容就是`acme.sh --info -d example.com`输出的信息，不过`ReloadCmd`在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改`ReloadCmd`，且修改时，无需Base64编码，直接写命令原文`acme.sh`也可以识别。 不过，`example.conf`文件的位置和内容格式以后可能会改变！`example.conf`一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。\n\n### 更新 acme.sh\n\n目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :\n\n```shell\nacme.sh --upgrade\n```\n\n如果你不想手动升级， 可以开启自动升级:\n\n```shell\n acme.sh --upgrade --auto-upgrade\n```\n\n之后，acme.sh 就会自动保持更新了。\n\n你也可以随时关闭自动更新:\n\n```shell\nacme.sh --upgrade --auto-upgrade  0\n```\n\n### 注意事项\n\n如果服务http服务设置了`return 301 https://$host$request_uri;`来跳转到https服务下，且https服务又是代理其他服务，如：\n\n```conf\nserver {\n    listen 80;\n    server_name example.com;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen       443 ssl;\n    server_name  example.com;\n    ssl_certificate      conf.d/cert.pem;\n    ssl_certificate_key  conf.d/key.key;\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers  on;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    # 这里要加上以下设置，防止nginx找不到文件\n    location ^~ /.well-known/acme-challenge/ {\n        root /home/wwwroot/mydomain.com;\n    }\n  \n    location ^~/ {\n        proxy_pass http://127.0.0.1:10080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_http_version 1.1;\n    }\n}\n```\n\n---\n\n### 后记\n\n有时候自动更新证书没有成功，用以下命令可手动更新：\n\n```shell\n# 更新所有\nacme.sh --renew-all\n# 更新指定的 exam.com 域名\t\nacme.sh --renew -d exam.com\n```\n\n但有时候证书已更新，但未能同步到服务器中，可以在以上命令行最后加上 `--force`。\n\n---\n\n官网地址：https://github.com/acmesh-official/acme.sh\n\n官方文档：https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\n","source":"_posts/network/域名自动化更新证书.md","raw":"---\ntitle: 域名自动化更新证书\ndate: 2024-05-24\npermalink: network/acme_sh.html\ncategories:\n  - 网络\ntags: \ncover: img/cover/6.jpg\n---\n\n### 前言\n\n目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。\n\n----\n\n### 安装\n\n安装很简单，一个命令:\n\n```shell\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\n创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: `alias acme.sh=~/.acme.sh/acme.sh`；\n\n自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。\n\n注：如果没有安装crontab，可在安装crontab之后加入以下任务：\n\n```shell\n0 0 * * * \"~/.acme.sh\"/acme.sh --cron --home \"~/.acme.sh\" > /dev/null\n```\n\n### 更改服务地址\n\nacme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pendi ng，The CA is processing your order,please just wait.\n\n只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。\n\n```shell\nacme.sh --set-default-ca --server letsencrypt\n```\n\n### 生成证书\n\n**acme.sh** 实现了 **acme** 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。\n\n#### http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。\n\n```shell\n# 注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放\n# 如果是多个不同的二级域名，要每个单独执行一次\n# 有可能出现curl不可用的情况，可以用 -- use-wget强制用wget替代curl\nacme.sh --issue -d mydomain.com --webroot /home/wwwroot/mydomain.com/\n```\n\n只需要指定域名，并指定域名所在的网站根目录。 **acme.sh** 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。\n\n注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:\n\n```shell\nacme.sh --issue -d mydomain.com --standalone\n```\n\n#### 安装证书\n\n前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。\n\n注：默认生成的证书都放在安装目录下: `~/.acme.sh/`，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 `--install-cert` 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:\n\n##### Apache example:\n\n---\n\n```shell\n# 注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试\nacme.sh --install-cert -d example.com \\\n--cert-file      /path/to/certfile/in/apache/cert.pem  \\\n--key-file       /path/to/keyfile/in/apache/key.key  \\\n--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\\n--reloadcmd     \"service apache2 force-reload\"\n```\n\n##### Nginx example:\n\n---\n\n```shell\n# 网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，\n# 如果是docker，可改成 docker exec -it 容器名 nginx -s reload \nacme.sh --install-cert -d example.com \\\n--key-file       /path/to/keyfile/in/nginx/key.key  \\\n--fullchain-file /path/to/fullchain/nginx/cert.pem \\\n--reloadcmd     \"nginx -s reload\"\n```\n\n#### 查看已安装证书信息\n\n```shell\nacme.sh --info -d example.com\n# 会输出如下内容：\nDOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf\nLe_Domain=example.com\nLe_Alt=no\nLe_Webroot=dns_ali\nLe_PreHook=\nLe_PostHook=\nLe_RenewHook=\nLe_API=https://acme-v02.api.letsencrypt.org/directory\nLe_Keylength=\nLe_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310\nLe_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310\nLe_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07\nLe_CertCreateTime=1649358725\nLe_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022\nLe_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022\nLe_NextRenewTime=1654456325\nLe_RealCertPath=\nLe_RealCACertPath=\nLe_RealKeyPath=/etc/acme/example.com/privkey.pem\nLe_ReloadCmd=service nginx force-reload\nLe_RealFullChainPath=/etc/acme/example.com/chain.pem\n```\n\n#### 更新证书\n\n目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:\n\n```shell\ncrontab  -l\n56 * * * * \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" > /dev/null\n```\n\n### 关于修改ReloadCmd\n\n目前修改`ReloadCmd`没有专门的命令，可以通过重新安装证书来实现修改`reloadCmd`的目的。 此外，安装证书后，相关信息是保存在`~/.acme.sh/example.com/example.conf`文件下的，内容就是`acme.sh --info -d example.com`输出的信息，不过`ReloadCmd`在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改`ReloadCmd`，且修改时，无需Base64编码，直接写命令原文`acme.sh`也可以识别。 不过，`example.conf`文件的位置和内容格式以后可能会改变！`example.conf`一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。\n\n### 更新 acme.sh\n\n目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :\n\n```shell\nacme.sh --upgrade\n```\n\n如果你不想手动升级， 可以开启自动升级:\n\n```shell\n acme.sh --upgrade --auto-upgrade\n```\n\n之后，acme.sh 就会自动保持更新了。\n\n你也可以随时关闭自动更新:\n\n```shell\nacme.sh --upgrade --auto-upgrade  0\n```\n\n### 注意事项\n\n如果服务http服务设置了`return 301 https://$host$request_uri;`来跳转到https服务下，且https服务又是代理其他服务，如：\n\n```conf\nserver {\n    listen 80;\n    server_name example.com;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen       443 ssl;\n    server_name  example.com;\n    ssl_certificate      conf.d/cert.pem;\n    ssl_certificate_key  conf.d/key.key;\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers  on;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    # 这里要加上以下设置，防止nginx找不到文件\n    location ^~ /.well-known/acme-challenge/ {\n        root /home/wwwroot/mydomain.com;\n    }\n  \n    location ^~/ {\n        proxy_pass http://127.0.0.1:10080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_http_version 1.1;\n    }\n}\n```\n\n---\n\n### 后记\n\n有时候自动更新证书没有成功，用以下命令可手动更新：\n\n```shell\n# 更新所有\nacme.sh --renew-all\n# 更新指定的 exam.com 域名\t\nacme.sh --renew -d exam.com\n```\n\n但有时候证书已更新，但未能同步到服务器中，可以在以上命令行最后加上 `--force`。\n\n---\n\n官网地址：https://github.com/acmesh-official/acme.sh\n\n官方文档：https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\n","slug":"network/域名自动化更新证书","published":1,"updated":"2025-03-11T05:54:07.171Z","__permalink":"network/acme_sh.html","_id":"clwyftmq1000d7lqf4o59g0du","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装很简单，一个命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>\n<p>创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code>；</p>\n<p>自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。</p>\n<p>注：如果没有安装crontab，可在安装crontab之后加入以下任务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 0 * * * &quot;~/.acme.sh&quot;/acme.sh --cron --home &quot;~/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改服务地址\"><a href=\"#更改服务地址\" class=\"headerlink\" title=\"更改服务地址\"></a>更改服务地址</h3><p>acme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pendi ng，The CA is processing your order,please just wait.</p>\n<p>只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。</p>\n<h4 id=\"http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。\"><a href=\"#http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。\" class=\"headerlink\" title=\"http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。\"></a>http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果是多个不同的二级域名，要每个单独执行一次</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">有可能出现curl不可用的情况，可以用 -- use-wget强制用wget替代curl</span></span><br><span class=\"line\">acme.sh --issue -d mydomain.com --webroot /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure>\n<p>只需要指定域名，并指定域名所在的网站根目录。 <strong>acme.sh</strong> 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。</p>\n<p>注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --issue -d mydomain.com --standalone</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装证书\"><a href=\"#安装证书\" class=\"headerlink\" title=\"安装证书\"></a>安装证书</h4><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p>\n<p>注：默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 <code>--install-cert</code> 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:</p>\n<h5 id=\"Apache-example\"><a href=\"#Apache-example\" class=\"headerlink\" title=\"Apache example:\"></a>Apache example:</h5><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试</span></span><br><span class=\"line\">acme.sh --install-cert -d example.com \\</span><br><span class=\"line\">--cert-file      /path/to/certfile/in/apache/cert.pem  \\</span><br><span class=\"line\">--key-file       /path/to/keyfile/in/apache/key.key  \\</span><br><span class=\"line\">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\</span><br><span class=\"line\">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Nginx-example\"><a href=\"#Nginx-example\" class=\"headerlink\" title=\"Nginx example:\"></a>Nginx example:</h5><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果是docker，可改成 docker <span class=\"built_in\">exec</span> -it 容器名 nginx -s reload</span> </span><br><span class=\"line\">acme.sh --install-cert -d example.com \\</span><br><span class=\"line\">--key-file       /path/to/keyfile/in/nginx/key.key  \\</span><br><span class=\"line\">--fullchain-file /path/to/fullchain/nginx/cert.pem \\</span><br><span class=\"line\">--reloadcmd     &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看已安装证书信息\"><a href=\"#查看已安装证书信息\" class=\"headerlink\" title=\"查看已安装证书信息\"></a>查看已安装证书信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --info -d example.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会输出如下内容：</span></span><br><span class=\"line\">DOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf</span><br><span class=\"line\">Le_Domain=example.com</span><br><span class=\"line\">Le_Alt=no</span><br><span class=\"line\">Le_Webroot=dns_ali</span><br><span class=\"line\">Le_PreHook=</span><br><span class=\"line\">Le_PostHook=</span><br><span class=\"line\">Le_RenewHook=</span><br><span class=\"line\">Le_API=https://acme-v02.api.letsencrypt.org/directory</span><br><span class=\"line\">Le_Keylength=</span><br><span class=\"line\">Le_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span><br><span class=\"line\">Le_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span><br><span class=\"line\">Le_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span><br><span class=\"line\">Le_CertCreateTime=1649358725</span><br><span class=\"line\">Le_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022</span><br><span class=\"line\">Le_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022</span><br><span class=\"line\">Le_NextRenewTime=1654456325</span><br><span class=\"line\">Le_RealCertPath=</span><br><span class=\"line\">Le_RealCACertPath=</span><br><span class=\"line\">Le_RealKeyPath=/etc/acme/example.com/privkey.pem</span><br><span class=\"line\">Le_ReloadCmd=service nginx force-reload</span><br><span class=\"line\">Le_RealFullChainPath=/etc/acme/example.com/chain.pem</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h4><p>目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab  -l</span><br><span class=\"line\">56 * * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于修改ReloadCmd\"><a href=\"#关于修改ReloadCmd\" class=\"headerlink\" title=\"关于修改ReloadCmd\"></a>关于修改ReloadCmd</h3><p>目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来实现修改<code>reloadCmd</code>的目的。 此外，安装证书后，相关信息是保存在<code>~/.acme.sh/example.com/example.conf</code>文件下的，内容就是<code>acme.sh --info -d example.com</code>输出的信息，不过<code>ReloadCmd</code>在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改<code>ReloadCmd</code>，且修改时，无需Base64编码，直接写命令原文<code>acme.sh</code>也可以识别。 不过，<code>example.conf</code>文件的位置和内容格式以后可能会改变！<code>example.conf</code>一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。</p>\n<h3 id=\"更新-acme-sh\"><a href=\"#更新-acme-sh\" class=\"headerlink\" title=\"更新 acme.sh\"></a>更新 acme.sh</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade</span><br></pre></td></tr></table></figure>\n<p>如果你不想手动升级， 可以开启自动升级:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure>\n<p>之后，acme.sh 就会自动保持更新了。</p>\n<p>你也可以随时关闭自动更新:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade --auto-upgrade  0</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>如果服务http服务设置了<code>return 301 https://$host$request_uri;</code>来跳转到https服务下，且https服务又是代理其他服务，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name  example.com;</span><br><span class=\"line\">    ssl_certificate      conf.d/cert.pem;</span><br><span class=\"line\">    ssl_certificate_key  conf.d/key.key;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class=\"line\">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class=\"line\">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这里要加上以下设置，防止nginx找不到文件</span><br><span class=\"line\">    location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        root /home/wwwroot/mydomain.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    location ^~/ &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:10080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>有时候自动更新证书没有成功，用以下命令可手动更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有</span></span><br><span class=\"line\">acme.sh --renew-all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新指定的 exam.com 域名</span>\t</span><br><span class=\"line\">acme.sh --renew -d exam.com</span><br></pre></td></tr></table></figure>\n<p>但有时候证书已更新，但未能同步到服务器中，可以在以上命令行最后加上 <code>--force</code>。</p>\n<hr>\n<p>官网地址：<a href=\"https://github.com/acmesh-official/acme.sh\">https://github.com/acmesh-official/acme.sh</a></p>\n<p>官方文档：<a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装很简单，一个命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>\n<p>创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code>；</p>\n<p>自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。</p>\n<p>注：如果没有安装crontab，可在安装crontab之后加入以下任务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 0 * * * &quot;~/.acme.sh&quot;/acme.sh --cron --home &quot;~/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改服务地址\"><a href=\"#更改服务地址\" class=\"headerlink\" title=\"更改服务地址\"></a>更改服务地址</h3><p>acme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pendi ng，The CA is processing your order,please just wait.</p>\n<p>只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。</p>\n<h4 id=\"http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。\"><a href=\"#http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。\" class=\"headerlink\" title=\"http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。\"></a>http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果是多个不同的二级域名，要每个单独执行一次</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">有可能出现curl不可用的情况，可以用 -- use-wget强制用wget替代curl</span></span><br><span class=\"line\">acme.sh --issue -d mydomain.com --webroot /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure>\n<p>只需要指定域名，并指定域名所在的网站根目录。 <strong>acme.sh</strong> 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。</p>\n<p>注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --issue -d mydomain.com --standalone</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装证书\"><a href=\"#安装证书\" class=\"headerlink\" title=\"安装证书\"></a>安装证书</h4><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p>\n<p>注：默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 <code>--install-cert</code> 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:</p>\n<h5 id=\"Apache-example\"><a href=\"#Apache-example\" class=\"headerlink\" title=\"Apache example:\"></a>Apache example:</h5><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试</span></span><br><span class=\"line\">acme.sh --install-cert -d example.com \\</span><br><span class=\"line\">--cert-file      /path/to/certfile/in/apache/cert.pem  \\</span><br><span class=\"line\">--key-file       /path/to/keyfile/in/apache/key.key  \\</span><br><span class=\"line\">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\</span><br><span class=\"line\">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Nginx-example\"><a href=\"#Nginx-example\" class=\"headerlink\" title=\"Nginx example:\"></a>Nginx example:</h5><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果是docker，可改成 docker <span class=\"built_in\">exec</span> -it 容器名 nginx -s reload</span> </span><br><span class=\"line\">acme.sh --install-cert -d example.com \\</span><br><span class=\"line\">--key-file       /path/to/keyfile/in/nginx/key.key  \\</span><br><span class=\"line\">--fullchain-file /path/to/fullchain/nginx/cert.pem \\</span><br><span class=\"line\">--reloadcmd     &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看已安装证书信息\"><a href=\"#查看已安装证书信息\" class=\"headerlink\" title=\"查看已安装证书信息\"></a>查看已安装证书信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --info -d example.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会输出如下内容：</span></span><br><span class=\"line\">DOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf</span><br><span class=\"line\">Le_Domain=example.com</span><br><span class=\"line\">Le_Alt=no</span><br><span class=\"line\">Le_Webroot=dns_ali</span><br><span class=\"line\">Le_PreHook=</span><br><span class=\"line\">Le_PostHook=</span><br><span class=\"line\">Le_RenewHook=</span><br><span class=\"line\">Le_API=https://acme-v02.api.letsencrypt.org/directory</span><br><span class=\"line\">Le_Keylength=</span><br><span class=\"line\">Le_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span><br><span class=\"line\">Le_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span><br><span class=\"line\">Le_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span><br><span class=\"line\">Le_CertCreateTime=1649358725</span><br><span class=\"line\">Le_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022</span><br><span class=\"line\">Le_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022</span><br><span class=\"line\">Le_NextRenewTime=1654456325</span><br><span class=\"line\">Le_RealCertPath=</span><br><span class=\"line\">Le_RealCACertPath=</span><br><span class=\"line\">Le_RealKeyPath=/etc/acme/example.com/privkey.pem</span><br><span class=\"line\">Le_ReloadCmd=service nginx force-reload</span><br><span class=\"line\">Le_RealFullChainPath=/etc/acme/example.com/chain.pem</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h4><p>目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab  -l</span><br><span class=\"line\">56 * * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于修改ReloadCmd\"><a href=\"#关于修改ReloadCmd\" class=\"headerlink\" title=\"关于修改ReloadCmd\"></a>关于修改ReloadCmd</h3><p>目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来实现修改<code>reloadCmd</code>的目的。 此外，安装证书后，相关信息是保存在<code>~/.acme.sh/example.com/example.conf</code>文件下的，内容就是<code>acme.sh --info -d example.com</code>输出的信息，不过<code>ReloadCmd</code>在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改<code>ReloadCmd</code>，且修改时，无需Base64编码，直接写命令原文<code>acme.sh</code>也可以识别。 不过，<code>example.conf</code>文件的位置和内容格式以后可能会改变！<code>example.conf</code>一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。</p>\n<h3 id=\"更新-acme-sh\"><a href=\"#更新-acme-sh\" class=\"headerlink\" title=\"更新 acme.sh\"></a>更新 acme.sh</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade</span><br></pre></td></tr></table></figure>\n<p>如果你不想手动升级， 可以开启自动升级:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure>\n<p>之后，acme.sh 就会自动保持更新了。</p>\n<p>你也可以随时关闭自动更新:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade --auto-upgrade  0</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>如果服务http服务设置了<code>return 301 https://$host$request_uri;</code>来跳转到https服务下，且https服务又是代理其他服务，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    return 301 https://$host$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name  example.com;</span><br><span class=\"line\">    ssl_certificate      conf.d/cert.pem;</span><br><span class=\"line\">    ssl_certificate_key  conf.d/key.key;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class=\"line\">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class=\"line\">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这里要加上以下设置，防止nginx找不到文件</span><br><span class=\"line\">    location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">        root /home/wwwroot/mydomain.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    location ^~/ &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:10080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>有时候自动更新证书没有成功，用以下命令可手动更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有</span></span><br><span class=\"line\">acme.sh --renew-all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新指定的 exam.com 域名</span>\t</span><br><span class=\"line\">acme.sh --renew -d exam.com</span><br></pre></td></tr></table></figure>\n<p>但有时候证书已更新，但未能同步到服务器中，可以在以上命令行最后加上 <code>--force</code>。</p>\n<hr>\n<p>官网地址：<a href=\"https://github.com/acmesh-official/acme.sh\">https://github.com/acmesh-official/acme.sh</a></p>\n<p>官方文档：<a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p>\n"},{"title":"Sql语句","cover":"/img/cover/14.jpg","hide":false,"date":"2024-06-03T09:33:25.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n工作中遇到的SQL查询方法、语法、和优化记录。\n\n----\n\n### SQL 方法和关键字\n\n#### GROUP_COUNT\\WM_COUNT\n\n```sql\n# mysql group_concat\n# separator 用来替换拼接字段， eg: 水果-素菜\nselect\n\tgroup_concat(c.category_name separator '-') category_name,\n\tcs.store_id\nfrom\n\tdt_category_store as cs\n\tinner join\n\tdt_category as c\n\ton \n\t\tcs.category_id = c.category_id and cs.category_type = 6\ngroup by cs.store_id\n```\n\n```sql\n# dm wm_concat 方式\nselect\n\twm_concat(c.category_name) category_name,\n\tcs.store_id\nfrom\n\tdt_category_store as cs\n\tinner join\n\tdt_category as c\n\ton \n\t\tcs.category_id = c.category_id and cs.category_type = 6\ngroup by cs.store_id\n```\n\n#### LEFT（从**左**开始截取字符串）\n\n用法：left(str, length)，即：left(被截取字符串， 截取长度)\n\n```sql\nSELECT LEFT('www.jzwfan.com',8)\n```\n\n结果为：www.jzwf\n\n#### RIGHT(从**右**开始截取字符串)\n\n用法：right(str, length)，即：right(被截取字符串， 截取长度)\n\n```SQL\nSELECT RIGHT('www.jzwfan.com',6)\n```\n\n结果为：an.com\n\n#### SUBSTRING(截取**特定长度**的字符串)\n\n用法：\n\n- substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)\n- substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)\n\n1.从字符串的第9个字符开始读取直至结束\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', 9)\n```\n\n结果为：an.com\n\n2.从字符串的第5个字符开始，只取3个字符\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', 5, 3)\n```\n\n结果为：jzw\n\n3.从字符串的倒数第6个字符开始读取直至结束\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', -6)\n```\n\n结果为：an.com\n\n4.从字符串的倒数第6个字符开始读取，只取2个字符\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', -6, 2)\n```\n\n结果为：an\n\n#### SUBSTRING_INDEX(按**关键字**进行读取)\n\n用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)\n\n1.截取第二个“.”之**前**的所有字符\n\n```sql\nSELECT SUBSTRING_INDEX('www.jzwfan.com', '.', 2);\n```\n\n结果为：www.jzwfan\n\n2.截取倒数第二个“.”之**后**的所有字符\n\n```sql\nSELECT SUBSTRING_INDEX('www.jzwfan.com', '.', -2);\n```\n\n结果为：jzwfan.com\n\n3.如果关键字不存在，则返回整个字符串\n\n```sql\nSELECT SUBSTRING_INDEX('www.yuanrengu.com', 'sprite', 1);\n```\n\n结果为：www.jzwfan.com\n\n以上，源地址：https://www.cnblogs.com/heyonggang/p/8117754.html\n\n#### FROM_UNIXTIME(时间戳格式化)\n\n```sql\n# FROM_UNIXTIME(unix_timestamp, format)\nSELECT FROM_UNIXTIME(1459338786, '%Y-%m-%d %H:%i:%s');\n```\n\nformat格式说明：\n\n%M 月名字(January～December)\n%W 星期名字(Sunday～Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun～Sat)\n%d 月份中的天数, 数字(00～31)\n%e 月份中的天数, 数字(0～31)\n%m 月, 数字(01～12)\n%c 月, 数字(1～12)\n%b 缩写的月份名字(Jan～Dec)\n%j 一年中的天数(001～366)\n%H 小时(00～23)\n%k 小时(0～23)\n%h 小时(01～12)\n%I 小时(01～12)\n%l 小时(1～12)\n%i 分钟, 数字(00～59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00～59)\n%s 秒(00～59)\n%p AM或PM\n%w 一个星期中的天数(0=Sunday ～6=Saturday ）\n%U 星期(0～52), 这里星期天是星期的第一天\n%u 星期(0～52), 这里星期一是星期的第一天\n%% 一个文字%\n\n原地址：https://blog.csdn.net/fdipzone/article/details/51018930\n\n#### DROP（删除表｜通用）\n\n```sql\n# Mysql\nDROP TABLE 表名;\n# DM\nDROP TABLE 空间名.表名;\n```\n\n#### TRUNCATE（清空表数据｜通用）\n\n```sql\n# Mysql\nTRUNCATE TABLE 表名;\n# DM\nTRUNCATE TABLE 空间名.表名;\n```\n\n\n\n### SQL一些常用命令\n\n#### DM设置表主键是否自动递增\n\n```sql\n# OFF 开启， ON 关闭\nSET IDENTITY_INSERT 空间名.表名 ON;\n```\n\n### DM添加索引例子\n\n```sql\nCREATE OR REPLACE  INDEX \"索引名\" ON \"空间名\".\"表名\"(\"列名1\" ASC,\"列名2\" ASC,\"列名3\" ASC...) STORAGE(ON \"MAIN\", CLUSTERBTR);\n```\n\n#### DM创建表语句模版\n\n```sql\nCREATE TABLE \"空间名\".\"表名\"\n(\n\"ID\" BIGINT IDENTITY(1, 1) NOT NULL,\n\"NEIBH_ID\" BIGINT,\n\"CATEGORY_ID\" BIGINT,\n\"CATEGORY_TYPE\" VARCHAR(2),\n\"INSPECTOR_IDS\" VARCHAR(255) DEFAULT '',\n\"INSPECTOR_NAMES\" VARCHAR(255) DEFAULT '',\n\"TENANT_ID\" INT,\n\"DELETED\" BIT DEFAULT 0,\n\"CREATOR\" INT,\n\"CREATE_TIME\" TIMESTAMP(0),\n\"UPDATER\" INT,\n\"UPDATE_TIME\" TIMESTAMP(0),\nNOT CLUSTER PRIMARY KEY(\"ID\")) STORAGE(ON \"MAIN\", CLUSTERBTR) ;\n```\n\n\n\n","source":"_posts/db/sql.md","raw":"---\ntitle: Sql语句\ncover: /img/cover/14.jpg\nhide: false\ndate: 2024-06-03 17:33:25\npermalink: db/sql.html\ntags:\n - mysql\n - DM\ncategories:\n - 数据库\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n工作中遇到的SQL查询方法、语法、和优化记录。\n\n----\n\n### SQL 方法和关键字\n\n#### GROUP_COUNT\\WM_COUNT\n\n```sql\n# mysql group_concat\n# separator 用来替换拼接字段， eg: 水果-素菜\nselect\n\tgroup_concat(c.category_name separator '-') category_name,\n\tcs.store_id\nfrom\n\tdt_category_store as cs\n\tinner join\n\tdt_category as c\n\ton \n\t\tcs.category_id = c.category_id and cs.category_type = 6\ngroup by cs.store_id\n```\n\n```sql\n# dm wm_concat 方式\nselect\n\twm_concat(c.category_name) category_name,\n\tcs.store_id\nfrom\n\tdt_category_store as cs\n\tinner join\n\tdt_category as c\n\ton \n\t\tcs.category_id = c.category_id and cs.category_type = 6\ngroup by cs.store_id\n```\n\n#### LEFT（从**左**开始截取字符串）\n\n用法：left(str, length)，即：left(被截取字符串， 截取长度)\n\n```sql\nSELECT LEFT('www.jzwfan.com',8)\n```\n\n结果为：www.jzwf\n\n#### RIGHT(从**右**开始截取字符串)\n\n用法：right(str, length)，即：right(被截取字符串， 截取长度)\n\n```SQL\nSELECT RIGHT('www.jzwfan.com',6)\n```\n\n结果为：an.com\n\n#### SUBSTRING(截取**特定长度**的字符串)\n\n用法：\n\n- substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)\n- substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)\n\n1.从字符串的第9个字符开始读取直至结束\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', 9)\n```\n\n结果为：an.com\n\n2.从字符串的第5个字符开始，只取3个字符\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', 5, 3)\n```\n\n结果为：jzw\n\n3.从字符串的倒数第6个字符开始读取直至结束\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', -6)\n```\n\n结果为：an.com\n\n4.从字符串的倒数第6个字符开始读取，只取2个字符\n\n```sql\nSELECT SUBSTRING('www.jzwfan.com', -6, 2)\n```\n\n结果为：an\n\n#### SUBSTRING_INDEX(按**关键字**进行读取)\n\n用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)\n\n1.截取第二个“.”之**前**的所有字符\n\n```sql\nSELECT SUBSTRING_INDEX('www.jzwfan.com', '.', 2);\n```\n\n结果为：www.jzwfan\n\n2.截取倒数第二个“.”之**后**的所有字符\n\n```sql\nSELECT SUBSTRING_INDEX('www.jzwfan.com', '.', -2);\n```\n\n结果为：jzwfan.com\n\n3.如果关键字不存在，则返回整个字符串\n\n```sql\nSELECT SUBSTRING_INDEX('www.yuanrengu.com', 'sprite', 1);\n```\n\n结果为：www.jzwfan.com\n\n以上，源地址：https://www.cnblogs.com/heyonggang/p/8117754.html\n\n#### FROM_UNIXTIME(时间戳格式化)\n\n```sql\n# FROM_UNIXTIME(unix_timestamp, format)\nSELECT FROM_UNIXTIME(1459338786, '%Y-%m-%d %H:%i:%s');\n```\n\nformat格式说明：\n\n%M 月名字(January～December)\n%W 星期名字(Sunday～Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun～Sat)\n%d 月份中的天数, 数字(00～31)\n%e 月份中的天数, 数字(0～31)\n%m 月, 数字(01～12)\n%c 月, 数字(1～12)\n%b 缩写的月份名字(Jan～Dec)\n%j 一年中的天数(001～366)\n%H 小时(00～23)\n%k 小时(0～23)\n%h 小时(01～12)\n%I 小时(01～12)\n%l 小时(1～12)\n%i 分钟, 数字(00～59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00～59)\n%s 秒(00～59)\n%p AM或PM\n%w 一个星期中的天数(0=Sunday ～6=Saturday ）\n%U 星期(0～52), 这里星期天是星期的第一天\n%u 星期(0～52), 这里星期一是星期的第一天\n%% 一个文字%\n\n原地址：https://blog.csdn.net/fdipzone/article/details/51018930\n\n#### DROP（删除表｜通用）\n\n```sql\n# Mysql\nDROP TABLE 表名;\n# DM\nDROP TABLE 空间名.表名;\n```\n\n#### TRUNCATE（清空表数据｜通用）\n\n```sql\n# Mysql\nTRUNCATE TABLE 表名;\n# DM\nTRUNCATE TABLE 空间名.表名;\n```\n\n\n\n### SQL一些常用命令\n\n#### DM设置表主键是否自动递增\n\n```sql\n# OFF 开启， ON 关闭\nSET IDENTITY_INSERT 空间名.表名 ON;\n```\n\n### DM添加索引例子\n\n```sql\nCREATE OR REPLACE  INDEX \"索引名\" ON \"空间名\".\"表名\"(\"列名1\" ASC,\"列名2\" ASC,\"列名3\" ASC...) STORAGE(ON \"MAIN\", CLUSTERBTR);\n```\n\n#### DM创建表语句模版\n\n```sql\nCREATE TABLE \"空间名\".\"表名\"\n(\n\"ID\" BIGINT IDENTITY(1, 1) NOT NULL,\n\"NEIBH_ID\" BIGINT,\n\"CATEGORY_ID\" BIGINT,\n\"CATEGORY_TYPE\" VARCHAR(2),\n\"INSPECTOR_IDS\" VARCHAR(255) DEFAULT '',\n\"INSPECTOR_NAMES\" VARCHAR(255) DEFAULT '',\n\"TENANT_ID\" INT,\n\"DELETED\" BIT DEFAULT 0,\n\"CREATOR\" INT,\n\"CREATE_TIME\" TIMESTAMP(0),\n\"UPDATER\" INT,\n\"UPDATE_TIME\" TIMESTAMP(0),\nNOT CLUSTER PRIMARY KEY(\"ID\")) STORAGE(ON \"MAIN\", CLUSTERBTR) ;\n```\n\n\n\n","slug":"db/sql","published":1,"updated":"2025-03-18T09:17:48.197Z","__permalink":"db/sql.html","_id":"clwyshhq500006uqf4enabmn2","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工作中遇到的SQL查询方法、语法、和优化记录。</p>\n<hr>\n<h3 id=\"SQL-方法和关键字\"><a href=\"#SQL-方法和关键字\" class=\"headerlink\" title=\"SQL 方法和关键字\"></a>SQL 方法和关键字</h3><h4 id=\"GROUP-COUNT-WM-COUNT\"><a href=\"#GROUP-COUNT-WM-COUNT\" class=\"headerlink\" title=\"GROUP_COUNT\\WM_COUNT\"></a>GROUP_COUNT\\WM_COUNT</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># mysql group_concat</span><br><span class=\"line\"># separator 用来替换拼接字段， eg: 水果<span class=\"operator\">-</span>素菜</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\tgroup_concat(c.category_name separator <span class=\"string\">&#x27;-&#x27;</span>) category_name,</span><br><span class=\"line\">\tcs.store_id</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\tdt_category_store <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">\t<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\tdt_category <span class=\"keyword\">as</span> c</span><br><span class=\"line\">\t<span class=\"keyword\">on</span> </span><br><span class=\"line\">\t\tcs.category_id <span class=\"operator\">=</span> c.category_id <span class=\"keyword\">and</span> cs.category_type <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cs.store_id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># dm wm_concat 方式</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\twm_concat(c.category_name) category_name,</span><br><span class=\"line\">\tcs.store_id</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\tdt_category_store <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">\t<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\tdt_category <span class=\"keyword\">as</span> c</span><br><span class=\"line\">\t<span class=\"keyword\">on</span> </span><br><span class=\"line\">\t\tcs.category_id <span class=\"operator\">=</span> c.category_id <span class=\"keyword\">and</span> cs.category_type <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cs.store_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"LEFT（从左开始截取字符串）\"><a href=\"#LEFT（从左开始截取字符串）\" class=\"headerlink\" title=\"LEFT（从左开始截取字符串）\"></a>LEFT（从<strong>左</strong>开始截取字符串）</h4><p>用法：left(str, length)，即：left(被截取字符串， 截取长度)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>,<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwf</p>\n<h4 id=\"RIGHT-从右开始截取字符串\"><a href=\"#RIGHT-从右开始截取字符串\" class=\"headerlink\" title=\"RIGHT(从右开始截取字符串)\"></a>RIGHT(从<strong>右</strong>开始截取字符串)</h4><p>用法：right(str, length)，即：right(被截取字符串， 截取长度)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RIGHT</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<h4 id=\"SUBSTRING-截取特定长度的字符串\"><a href=\"#SUBSTRING-截取特定长度的字符串\" class=\"headerlink\" title=\"SUBSTRING(截取特定长度的字符串)\"></a>SUBSTRING(截取<strong>特定长度</strong>的字符串)</h4><p>用法：</p>\n<ul>\n<li>substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)</li>\n<li>substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)</li>\n</ul>\n<p>1.从字符串的第9个字符开始读取直至结束</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">9</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<p>2.从字符串的第5个字符开始，只取3个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：jzw</p>\n<p>3.从字符串的倒数第6个字符开始读取直至结束</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">-6</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<p>4.从字符串的倒数第6个字符开始读取，只取2个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">-6</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an</p>\n<h4 id=\"SUBSTRING-INDEX-按关键字进行读取\"><a href=\"#SUBSTRING-INDEX-按关键字进行读取\" class=\"headerlink\" title=\"SUBSTRING_INDEX(按关键字进行读取)\"></a>SUBSTRING_INDEX(按<strong>关键字</strong>进行读取)</h4><p>用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)</p>\n<p>1.截取第二个“.”之<strong>前</strong>的所有字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwfan</p>\n<p>2.截取倒数第二个“.”之<strong>后</strong>的所有字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"number\">-2</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：jzwfan.com</p>\n<p>3.如果关键字不存在，则返回整个字符串</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.yuanrengu.com&#x27;</span>, <span class=\"string\">&#x27;sprite&#x27;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwfan.com</p>\n<p>以上，源地址：<a href=\"https://www.cnblogs.com/heyonggang/p/8117754.html\">https://www.cnblogs.com/heyonggang/p/8117754.html</a></p>\n<h4 id=\"FROM-UNIXTIME-时间戳格式化\"><a href=\"#FROM-UNIXTIME-时间戳格式化\" class=\"headerlink\" title=\"FROM_UNIXTIME(时间戳格式化)\"></a>FROM_UNIXTIME(时间戳格式化)</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># FROM_UNIXTIME(unix_timestamp, format)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1459338786</span>, <span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>format格式说明：</p>\n<p>%M 月名字(January～December)<br>%W 星期名字(Sunday～Saturday)<br>%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）<br>%Y 年, 数字, 4 位<br>%y 年, 数字, 2 位<br>%a 缩写的星期名字(Sun～Sat)<br>%d 月份中的天数, 数字(00～31)<br>%e 月份中的天数, 数字(0～31)<br>%m 月, 数字(01～12)<br>%c 月, 数字(1～12)<br>%b 缩写的月份名字(Jan～Dec)<br>%j 一年中的天数(001～366)<br>%H 小时(00～23)<br>%k 小时(0～23)<br>%h 小时(01～12)<br>%I 小时(01～12)<br>%l 小时(1～12)<br>%i 分钟, 数字(00～59)<br>%r 时间,12 小时(hh:mm:ss [AP]M)<br>%T 时间,24 小时(hh:mm:ss)<br>%S 秒(00～59)<br>%s 秒(00～59)<br>%p AM或PM<br>%w 一个星期中的天数(0=Sunday ～6=Saturday ）<br>%U 星期(0～52), 这里星期天是星期的第一天<br>%u 星期(0～52), 这里星期一是星期的第一天<br>%% 一个文字%</p>\n<p>原地址：<a href=\"https://blog.csdn.net/fdipzone/article/details/51018930\">https://blog.csdn.net/fdipzone/article/details/51018930</a></p>\n<h4 id=\"DROP（删除表｜通用）\"><a href=\"#DROP（删除表｜通用）\" class=\"headerlink\" title=\"DROP（删除表｜通用）\"></a>DROP（删除表｜通用）</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Mysql</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> 表名;</span><br><span class=\"line\"># DM</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"TRUNCATE（清空表数据｜通用）\"><a href=\"#TRUNCATE（清空表数据｜通用）\" class=\"headerlink\" title=\"TRUNCATE（清空表数据｜通用）\"></a>TRUNCATE（清空表数据｜通用）</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Mysql</span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> 表名;</span><br><span class=\"line\"># DM</span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL一些常用命令\"><a href=\"#SQL一些常用命令\" class=\"headerlink\" title=\"SQL一些常用命令\"></a>SQL一些常用命令</h3><h4 id=\"DM设置表主键是否自动递增\"><a href=\"#DM设置表主键是否自动递增\" class=\"headerlink\" title=\"DM设置表主键是否自动递增\"></a>DM设置表主键是否自动递增</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># OFF 开启， <span class=\"keyword\">ON</span> 关闭</span><br><span class=\"line\"><span class=\"keyword\">SET</span> IDENTITY_INSERT 空间名.表名 <span class=\"keyword\">ON</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DM添加索引例子\"><a href=\"#DM添加索引例子\" class=\"headerlink\" title=\"DM添加索引例子\"></a>DM添加索引例子</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE  INDEX &quot;索引名&quot; <span class=\"keyword\">ON</span> &quot;空间名&quot;.&quot;表名&quot;(&quot;列名1&quot; <span class=\"keyword\">ASC</span>,&quot;列名2&quot; <span class=\"keyword\">ASC</span>,&quot;列名3&quot; ASC...) STORAGE(<span class=\"keyword\">ON</span> &quot;MAIN&quot;, CLUSTERBTR);</span><br></pre></td></tr></table></figure>\n<h4 id=\"DM创建表语句模版\"><a href=\"#DM创建表语句模版\" class=\"headerlink\" title=\"DM创建表语句模版\"></a>DM创建表语句模版</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &quot;空间名&quot;.&quot;表名&quot;</span><br><span class=\"line\">(</span><br><span class=\"line\">&quot;ID&quot; <span class=\"type\">BIGINT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">&quot;NEIBH_ID&quot; <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">&quot;CATEGORY_ID&quot; <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">&quot;CATEGORY_TYPE&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">&quot;INSPECTOR_IDS&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&quot;INSPECTOR_NAMES&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&quot;TENANT_ID&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;DELETED&quot; BIT <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">&quot;CREATOR&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;CREATE_TIME&quot; <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\">&quot;UPDATER&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;UPDATE_TIME&quot; <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\"><span class=\"keyword\">NOT</span> CLUSTER <span class=\"keyword\">PRIMARY</span> KEY(&quot;ID&quot;)) STORAGE(<span class=\"keyword\">ON</span> &quot;MAIN&quot;, CLUSTERBTR) ;</span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工作中遇到的SQL查询方法、语法、和优化记录。</p>\n<hr>\n<h3 id=\"SQL-方法和关键字\"><a href=\"#SQL-方法和关键字\" class=\"headerlink\" title=\"SQL 方法和关键字\"></a>SQL 方法和关键字</h3><h4 id=\"GROUP-COUNT-WM-COUNT\"><a href=\"#GROUP-COUNT-WM-COUNT\" class=\"headerlink\" title=\"GROUP_COUNT\\WM_COUNT\"></a>GROUP_COUNT\\WM_COUNT</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># mysql group_concat</span><br><span class=\"line\"># separator 用来替换拼接字段， eg: 水果<span class=\"operator\">-</span>素菜</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\tgroup_concat(c.category_name separator <span class=\"string\">&#x27;-&#x27;</span>) category_name,</span><br><span class=\"line\">\tcs.store_id</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\tdt_category_store <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">\t<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\tdt_category <span class=\"keyword\">as</span> c</span><br><span class=\"line\">\t<span class=\"keyword\">on</span> </span><br><span class=\"line\">\t\tcs.category_id <span class=\"operator\">=</span> c.category_id <span class=\"keyword\">and</span> cs.category_type <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cs.store_id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># dm wm_concat 方式</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\twm_concat(c.category_name) category_name,</span><br><span class=\"line\">\tcs.store_id</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\tdt_category_store <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">\t<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\tdt_category <span class=\"keyword\">as</span> c</span><br><span class=\"line\">\t<span class=\"keyword\">on</span> </span><br><span class=\"line\">\t\tcs.category_id <span class=\"operator\">=</span> c.category_id <span class=\"keyword\">and</span> cs.category_type <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> cs.store_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"LEFT（从左开始截取字符串）\"><a href=\"#LEFT（从左开始截取字符串）\" class=\"headerlink\" title=\"LEFT（从左开始截取字符串）\"></a>LEFT（从<strong>左</strong>开始截取字符串）</h4><p>用法：left(str, length)，即：left(被截取字符串， 截取长度)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>,<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwf</p>\n<h4 id=\"RIGHT-从右开始截取字符串\"><a href=\"#RIGHT-从右开始截取字符串\" class=\"headerlink\" title=\"RIGHT(从右开始截取字符串)\"></a>RIGHT(从<strong>右</strong>开始截取字符串)</h4><p>用法：right(str, length)，即：right(被截取字符串， 截取长度)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">RIGHT</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<h4 id=\"SUBSTRING-截取特定长度的字符串\"><a href=\"#SUBSTRING-截取特定长度的字符串\" class=\"headerlink\" title=\"SUBSTRING(截取特定长度的字符串)\"></a>SUBSTRING(截取<strong>特定长度</strong>的字符串)</h4><p>用法：</p>\n<ul>\n<li>substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)</li>\n<li>substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)</li>\n</ul>\n<p>1.从字符串的第9个字符开始读取直至结束</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">9</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<p>2.从字符串的第5个字符开始，只取3个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：jzw</p>\n<p>3.从字符串的倒数第6个字符开始读取直至结束</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">-6</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an.com</p>\n<p>4.从字符串的倒数第6个字符开始读取，只取2个字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUBSTRING</span>(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"number\">-6</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>结果为：an</p>\n<h4 id=\"SUBSTRING-INDEX-按关键字进行读取\"><a href=\"#SUBSTRING-INDEX-按关键字进行读取\" class=\"headerlink\" title=\"SUBSTRING_INDEX(按关键字进行读取)\"></a>SUBSTRING_INDEX(按<strong>关键字</strong>进行读取)</h4><p>用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)</p>\n<p>1.截取第二个“.”之<strong>前</strong>的所有字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwfan</p>\n<p>2.截取倒数第二个“.”之<strong>后</strong>的所有字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.jzwfan.com&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"number\">-2</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：jzwfan.com</p>\n<p>3.如果关键字不存在，则返回整个字符串</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTRING_INDEX(<span class=\"string\">&#x27;www.yuanrengu.com&#x27;</span>, <span class=\"string\">&#x27;sprite&#x27;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>结果为：www.jzwfan.com</p>\n<p>以上，源地址：<a href=\"https://www.cnblogs.com/heyonggang/p/8117754.html\">https://www.cnblogs.com/heyonggang/p/8117754.html</a></p>\n<h4 id=\"FROM-UNIXTIME-时间戳格式化\"><a href=\"#FROM-UNIXTIME-时间戳格式化\" class=\"headerlink\" title=\"FROM_UNIXTIME(时间戳格式化)\"></a>FROM_UNIXTIME(时间戳格式化)</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># FROM_UNIXTIME(unix_timestamp, format)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1459338786</span>, <span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>format格式说明：</p>\n<p>%M 月名字(January～December)<br>%W 星期名字(Sunday～Saturday)<br>%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）<br>%Y 年, 数字, 4 位<br>%y 年, 数字, 2 位<br>%a 缩写的星期名字(Sun～Sat)<br>%d 月份中的天数, 数字(00～31)<br>%e 月份中的天数, 数字(0～31)<br>%m 月, 数字(01～12)<br>%c 月, 数字(1～12)<br>%b 缩写的月份名字(Jan～Dec)<br>%j 一年中的天数(001～366)<br>%H 小时(00～23)<br>%k 小时(0～23)<br>%h 小时(01～12)<br>%I 小时(01～12)<br>%l 小时(1～12)<br>%i 分钟, 数字(00～59)<br>%r 时间,12 小时(hh:mm:ss [AP]M)<br>%T 时间,24 小时(hh:mm:ss)<br>%S 秒(00～59)<br>%s 秒(00～59)<br>%p AM或PM<br>%w 一个星期中的天数(0=Sunday ～6=Saturday ）<br>%U 星期(0～52), 这里星期天是星期的第一天<br>%u 星期(0～52), 这里星期一是星期的第一天<br>%% 一个文字%</p>\n<p>原地址：<a href=\"https://blog.csdn.net/fdipzone/article/details/51018930\">https://blog.csdn.net/fdipzone/article/details/51018930</a></p>\n<h4 id=\"DROP（删除表｜通用）\"><a href=\"#DROP（删除表｜通用）\" class=\"headerlink\" title=\"DROP（删除表｜通用）\"></a>DROP（删除表｜通用）</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Mysql</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> 表名;</span><br><span class=\"line\"># DM</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"TRUNCATE（清空表数据｜通用）\"><a href=\"#TRUNCATE（清空表数据｜通用）\" class=\"headerlink\" title=\"TRUNCATE（清空表数据｜通用）\"></a>TRUNCATE（清空表数据｜通用）</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Mysql</span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> 表名;</span><br><span class=\"line\"># DM</span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL一些常用命令\"><a href=\"#SQL一些常用命令\" class=\"headerlink\" title=\"SQL一些常用命令\"></a>SQL一些常用命令</h3><h4 id=\"DM设置表主键是否自动递增\"><a href=\"#DM设置表主键是否自动递增\" class=\"headerlink\" title=\"DM设置表主键是否自动递增\"></a>DM设置表主键是否自动递增</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># OFF 开启， <span class=\"keyword\">ON</span> 关闭</span><br><span class=\"line\"><span class=\"keyword\">SET</span> IDENTITY_INSERT 空间名.表名 <span class=\"keyword\">ON</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DM添加索引例子\"><a href=\"#DM添加索引例子\" class=\"headerlink\" title=\"DM添加索引例子\"></a>DM添加索引例子</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE  INDEX &quot;索引名&quot; <span class=\"keyword\">ON</span> &quot;空间名&quot;.&quot;表名&quot;(&quot;列名1&quot; <span class=\"keyword\">ASC</span>,&quot;列名2&quot; <span class=\"keyword\">ASC</span>,&quot;列名3&quot; ASC...) STORAGE(<span class=\"keyword\">ON</span> &quot;MAIN&quot;, CLUSTERBTR);</span><br></pre></td></tr></table></figure>\n<h4 id=\"DM创建表语句模版\"><a href=\"#DM创建表语句模版\" class=\"headerlink\" title=\"DM创建表语句模版\"></a>DM创建表语句模版</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &quot;空间名&quot;.&quot;表名&quot;</span><br><span class=\"line\">(</span><br><span class=\"line\">&quot;ID&quot; <span class=\"type\">BIGINT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">&quot;NEIBH_ID&quot; <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">&quot;CATEGORY_ID&quot; <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">&quot;CATEGORY_TYPE&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">&quot;INSPECTOR_IDS&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&quot;INSPECTOR_NAMES&quot; <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&quot;TENANT_ID&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;DELETED&quot; BIT <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">&quot;CREATOR&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;CREATE_TIME&quot; <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\">&quot;UPDATER&quot; <span class=\"type\">INT</span>,</span><br><span class=\"line\">&quot;UPDATE_TIME&quot; <span class=\"type\">TIMESTAMP</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\"><span class=\"keyword\">NOT</span> CLUSTER <span class=\"keyword\">PRIMARY</span> KEY(&quot;ID&quot;)) STORAGE(<span class=\"keyword\">ON</span> &quot;MAIN&quot;, CLUSTERBTR) ;</span><br></pre></td></tr></table></figure>\n"},{"title":"css实用代码合集","cover":"/img/cover/13.jpg","hide":false,"date":"2024-06-06T08:09:43.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。\n\n### img图片保持比例且居中显示\n\n 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; [margin](https://so.csdn.net/so/search?q=margin&spm=1001.2101.3001.7020): 0 auto;）。\n\n```html\n<div style=\"width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972\">\n    <img src=\"test.jpg\" style=\"max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;\" alt=\"\">\n</div>\n```\n\n源地址：https://blog.csdn.net/shijie_nihao/article/details/106348591\n","source":"_posts/html/css实用代码合集.md","raw":"---\ntitle: css实用代码合集\ncover: /img/cover/13.jpg\nhide: false\ndate: 2024-06-06 16:09:43\npermalink: html/practical-css.html\ntags:\n - 前端\n - css\ncategories:\n - 前端\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。\n\n### img图片保持比例且居中显示\n\n 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; [margin](https://so.csdn.net/so/search?q=margin&spm=1001.2101.3001.7020): 0 auto;）。\n\n```html\n<div style=\"width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972\">\n    <img src=\"test.jpg\" style=\"max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;\" alt=\"\">\n</div>\n```\n\n源地址：https://blog.csdn.net/shijie_nihao/article/details/106348591\n","slug":"html/css实用代码合集","published":1,"updated":"2025-03-18T09:16:39.335Z","__permalink":"html/practical-css.html","_id":"clx2ziu2g00002eqfh04le60c","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。</p>\n<h3 id=\"img图片保持比例且居中显示\"><a href=\"#img图片保持比例且居中显示\" class=\"headerlink\" title=\"img图片保持比例且居中显示\"></a>img图片保持比例且居中显示</h3><p> 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; <a href=\"https://so.csdn.net/so/search?q=margin&amp;spm=1001.2101.3001.7020\">margin</a>: 0 auto;）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>源地址：<a href=\"https://blog.csdn.net/shijie_nihao/article/details/106348591\">https://blog.csdn.net/shijie_nihao/article/details/106348591</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。</p>\n<h3 id=\"img图片保持比例且居中显示\"><a href=\"#img图片保持比例且居中显示\" class=\"headerlink\" title=\"img图片保持比例且居中显示\"></a>img图片保持比例且居中显示</h3><p> 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; <a href=\"https://so.csdn.net/so/search?q=margin&amp;spm=1001.2101.3001.7020\">margin</a>: 0 auto;）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>源地址：<a href=\"https://blog.csdn.net/shijie_nihao/article/details/106348591\">https://blog.csdn.net/shijie_nihao/article/details/106348591</a></p>\n"},{"title":"List对象排序","cover":"/img/cover/4.jpg","hide":false,"date":"2024-06-19T05:53:16.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n记一下Java中List对象的三种排序方式，万一用得着呢（已经用着了）。\n\n---\n\n### 方案一\n\n简单对象排序，如Integer对象，String对象等，代码如下：\n\n```java\n// 调用Collections.sort 方法\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(9);\n        integerList.add(4);\n        integerList.add(6);\n        integerList.add(1);\n        integerList.add(8);\n        integerList.add(7);\n        integerList.add(5);\n        // 默认升序\n        Collections.sort(integerList);\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n        // 设置为降序\n        Collections.sort(integerList,Collections.reverseOrder());\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n    }\n}\n```\n\n```java\n// 调用List.sort()方法，传入对象compareTo方法，一般不用该方法排序简单对象\npublic class SortTest {\n    public static void main(String[] args) {\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(9);\n        integerList.add(4);\n        integerList.add(6);\n        integerList.add(1);\n        integerList.add(8);\n        integerList.add(7);\n        integerList.add(5);\n        integerList.sort(Integer::compareTo); //方法名可以自定义，建议遵循java命名规则\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n    }\n}\n```\n\n\n\n### 方案二\n\n自定义对象排序，可重写compareTo方法排序\n\n```java\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<User> integerList = new ArrayList<>();\n        integerList.add(new User(\"m\",9));\n        integerList.add(new User(\"j\",4));\n        integerList.add(new User(\"y\",6));\n        integerList.add(new User(\"q\",1));\n        integerList.add(new User(\"i\",8));\n        integerList.add(new User(\"b\",7));\n        integerList.add(new User(\"d\",5));\n        integerList.sort(User::compareTo);\n        for (User i : integerList){\n            System.out.println(\"name:\" + i.getName() + \",sex:\" + i.getSex());\n        }\n    }\n}\n\nclass User{\n    private String name;\n\n    private Integer sex;\n\n    public User(String name, Integer sex){\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public User(){}\n\n    public int compareTo(User user){\n      \t// 这里设置为升序，\n      \t// 降序写法替换顺序：user.getSex().compareTo(this.getSex()); \n        return this.getSex().compareTo(user.getSex()); \n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getSex() {\n        return sex;\n    }\n\n    public void setSex(Integer sex) {\n        this.sex = sex;\n    }\n}\n```\n\n### 方案三\n\n用匿名函数重写排序方法\n\n```java\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<User> integerList = new ArrayList<>();\n        integerList.add(new User(\"m\",9));\n        integerList.add(new User(\"j\",4));\n        integerList.add(new User(\"y\",6));\n        integerList.add(new User(\"q\",1));\n        integerList.add(new User(\"i\",8));\n        integerList.add(new User(\"b\",7));\n        integerList.add(new User(\"d\",5));\n        integerList.sort(new Comparator<User>() { // 这个在java8中可以用表达式写：(t1,t2) -> t1.getSex() >= t2.getSex() ? 1 : -1;\n            @Override\n            public int compare(User o1, User o2) {\n                return o1.getSex() >= o2.getSex() ? 1 : -1; //这里升序为1:-1，降序为-1:1\n            }\n        });\n        for (User i : integerList){\n            System.out.println(\"name:\" + i.getName() + \",sex:\" + i.getSex());\n        }\n    }\n}\n\nclass User{\n    private String name;\n\n    private Integer sex;\n\n    public User(String name, Integer sex){\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public User(){}\n\n    public int compareTo(User user){\n        return user.getSex().compareTo(this.getSex());\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getSex() {\n        return sex;\n    }\n\n    public void setSex(Integer sex) {\n        this.sex = sex;\n    }\n}\n```\n\n","source":"_posts/java/List对象排序.md","raw":"---\ntitle: List对象排序\ncover: /img/cover/4.jpg\nhide: false\ndate: 2024-06-19 13:53:16\npermalink: java/collections-sort.html\ntags:\n - java\n - list\n - sort\ncategories: \n - Java\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n记一下Java中List对象的三种排序方式，万一用得着呢（已经用着了）。\n\n---\n\n### 方案一\n\n简单对象排序，如Integer对象，String对象等，代码如下：\n\n```java\n// 调用Collections.sort 方法\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(9);\n        integerList.add(4);\n        integerList.add(6);\n        integerList.add(1);\n        integerList.add(8);\n        integerList.add(7);\n        integerList.add(5);\n        // 默认升序\n        Collections.sort(integerList);\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n        // 设置为降序\n        Collections.sort(integerList,Collections.reverseOrder());\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n    }\n}\n```\n\n```java\n// 调用List.sort()方法，传入对象compareTo方法，一般不用该方法排序简单对象\npublic class SortTest {\n    public static void main(String[] args) {\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(9);\n        integerList.add(4);\n        integerList.add(6);\n        integerList.add(1);\n        integerList.add(8);\n        integerList.add(7);\n        integerList.add(5);\n        integerList.sort(Integer::compareTo); //方法名可以自定义，建议遵循java命名规则\n        for (Integer i : integerList){\n            System.out.println(i);\n        }\n    }\n}\n```\n\n\n\n### 方案二\n\n自定义对象排序，可重写compareTo方法排序\n\n```java\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<User> integerList = new ArrayList<>();\n        integerList.add(new User(\"m\",9));\n        integerList.add(new User(\"j\",4));\n        integerList.add(new User(\"y\",6));\n        integerList.add(new User(\"q\",1));\n        integerList.add(new User(\"i\",8));\n        integerList.add(new User(\"b\",7));\n        integerList.add(new User(\"d\",5));\n        integerList.sort(User::compareTo);\n        for (User i : integerList){\n            System.out.println(\"name:\" + i.getName() + \",sex:\" + i.getSex());\n        }\n    }\n}\n\nclass User{\n    private String name;\n\n    private Integer sex;\n\n    public User(String name, Integer sex){\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public User(){}\n\n    public int compareTo(User user){\n      \t// 这里设置为升序，\n      \t// 降序写法替换顺序：user.getSex().compareTo(this.getSex()); \n        return this.getSex().compareTo(user.getSex()); \n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getSex() {\n        return sex;\n    }\n\n    public void setSex(Integer sex) {\n        this.sex = sex;\n    }\n}\n```\n\n### 方案三\n\n用匿名函数重写排序方法\n\n```java\npublic class SortTest {\n\n    public static void main(String[] args) {\n\n        List<User> integerList = new ArrayList<>();\n        integerList.add(new User(\"m\",9));\n        integerList.add(new User(\"j\",4));\n        integerList.add(new User(\"y\",6));\n        integerList.add(new User(\"q\",1));\n        integerList.add(new User(\"i\",8));\n        integerList.add(new User(\"b\",7));\n        integerList.add(new User(\"d\",5));\n        integerList.sort(new Comparator<User>() { // 这个在java8中可以用表达式写：(t1,t2) -> t1.getSex() >= t2.getSex() ? 1 : -1;\n            @Override\n            public int compare(User o1, User o2) {\n                return o1.getSex() >= o2.getSex() ? 1 : -1; //这里升序为1:-1，降序为-1:1\n            }\n        });\n        for (User i : integerList){\n            System.out.println(\"name:\" + i.getName() + \",sex:\" + i.getSex());\n        }\n    }\n}\n\nclass User{\n    private String name;\n\n    private Integer sex;\n\n    public User(String name, Integer sex){\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public User(){}\n\n    public int compareTo(User user){\n        return user.getSex().compareTo(this.getSex());\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getSex() {\n        return sex;\n    }\n\n    public void setSex(Integer sex) {\n        this.sex = sex;\n    }\n}\n```\n\n","slug":"java/List对象排序","published":1,"updated":"2025-03-18T09:16:28.132Z","__permalink":"java/collections-sort.html","_id":"clxxdot0n0000bbqf6rsacupd","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下Java中List对象的三种排序方式，万一用得着呢（已经用着了）。</p>\n<hr>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>简单对象排序，如Integer对象，String对象等，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用Collections.sort 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"number\">9</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">8</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">7</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 默认升序</span></span><br><span class=\"line\">        Collections.sort(integerList);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置为降序</span></span><br><span class=\"line\">        Collections.sort(integerList,Collections.reverseOrder());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用List.sort()方法，传入对象compareTo方法，一般不用该方法排序简单对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"number\">9</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">8</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">7</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">        integerList.sort(Integer::compareTo); <span class=\"comment\">//方法名可以自定义，建议遵循java命名规则</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>自定义对象排序，可重写compareTo方法排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;m&quot;</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;j&quot;</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;y&quot;</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;q&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;i&quot;</span>,<span class=\"number\">8</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">7</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">        integerList.sort(User::compareTo);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name:&quot;</span> + i.getName() + <span class=\"string\">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 这里设置为升序，</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 降序写法替换顺序：user.getSex().compareTo(this.getSex()); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getSex().compareTo(user.getSex()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(Integer sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>用匿名函数重写排序方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;m&quot;</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;j&quot;</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;y&quot;</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;q&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;i&quot;</span>,<span class=\"number\">8</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">7</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">        integerList.sort(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;User&gt;() &#123; <span class=\"comment\">// 这个在java8中可以用表达式写：(t1,t2) -&gt; t1.getSex() &gt;= t2.getSex() ? 1 : -1;</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(User o1, User o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getSex() &gt;= o2.getSex() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>; <span class=\"comment\">//这里升序为1:-1，降序为-1:1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name:&quot;</span> + i.getName() + <span class=\"string\">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getSex().compareTo(<span class=\"built_in\">this</span>.getSex());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(Integer sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下Java中List对象的三种排序方式，万一用得着呢（已经用着了）。</p>\n<hr>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>简单对象排序，如Integer对象，String对象等，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用Collections.sort 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"number\">9</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">8</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">7</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 默认升序</span></span><br><span class=\"line\">        Collections.sort(integerList);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置为降序</span></span><br><span class=\"line\">        Collections.sort(integerList,Collections.reverseOrder());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用List.sort()方法，传入对象compareTo方法，一般不用该方法排序简单对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"number\">9</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">8</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">7</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">        integerList.sort(Integer::compareTo); <span class=\"comment\">//方法名可以自定义，建议遵循java命名规则</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>自定义对象排序，可重写compareTo方法排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;m&quot;</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;j&quot;</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;y&quot;</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;q&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;i&quot;</span>,<span class=\"number\">8</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">7</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">        integerList.sort(User::compareTo);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name:&quot;</span> + i.getName() + <span class=\"string\">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 这里设置为升序，</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 降序写法替换顺序：user.getSex().compareTo(this.getSex()); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getSex().compareTo(user.getSex()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(Integer sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>用匿名函数重写排序方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SortTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;m&quot;</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;j&quot;</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;y&quot;</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;q&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;i&quot;</span>,<span class=\"number\">8</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">7</span>));</span><br><span class=\"line\">        integerList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">        integerList.sort(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;User&gt;() &#123; <span class=\"comment\">// 这个在java8中可以用表达式写：(t1,t2) -&gt; t1.getSex() &gt;= t2.getSex() ? 1 : -1;</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(User o1, User o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getSex() &gt;= o2.getSex() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>; <span class=\"comment\">//这里升序为1:-1，降序为-1:1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User i : integerList)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name:&quot;</span> + i.getName() + <span class=\"string\">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getSex().compareTo(<span class=\"built_in\">this</span>.getSex());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(Integer sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"防火墙设置","cover":"/img/cover/2.jpg","hide":false,"date":"2024-06-27T17:16:57.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n记录一下Linux下的firewall-cmd命令的用法，以后慢慢更新，慢慢完善。\n\n---\n\n### 正文\n\n#### 查看防火墙状态\n\n```shell\n#查看防火墙状态\nsystemctl status firewalld\n#开启防火墙\nsystemctl start firewalld\n#开机启动\nsystemctl enable firewalld\n```\n\n#### 端口访问设置\n\n查看已开放的端口、IP规则\n\n```shell\n#查询打开的端口\nfirewall-cmd --zone=public --list-ports\n```\n\n开放新端口，默认情况下所有端口都是关闭状态\n\n```shell\n#开放端口9001/tcp (tcp、udp等)\nfirewall-cmd --zone=public --add-port=9001/tcp --add-port=9001/udp --permanent\n#批量开放9002～9005的tcp端口\nfirewall-cmd --zone=public --add-port=9002-9005/tcp --permanent\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n关闭已开放的端口\n\n```shell\n#关闭端口9001/tcp (tcp、udp等)\nfirewall-cmd --zone=public --remove-port=9001/tcp --add-port=9001/udp --permanent\n#批量关闭9002～9005的tcp端口\nfirewall-cmd --zone=public --remove-port=9002-9005/tcp --permanent\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n#### IP访问设置\n\n查看已设置的规则\n\n```shell\n#查看已设置的规则\nfirewall-cmd --zone=public --list-rich-rules\n```\n\n开放或限制ip（设置规则）\n\n```shell\n#开放IPV4地址为：192.168.0.0 指定端口：9001/tcp\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.0\" port protocol=\"tcp\" port=\"9001\" accept\"\n#开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.1\" accept\"\n#限制IPV4地址为：192.168.1.0\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.0\" reject\"\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n删除已设置的规则\n\n```shell\n#删除开放IPV4地址为：192.168.0.0 指定端口：9001/tcp\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.0\" port protocol=\"tcp\" port=\"9001\" accept\"\n#删除开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.1\" accept\"\n#删除限制IPV4地址为：192.168.1.0\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.0\" reject\"\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n#### 如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\n\n```shell\nvi /etc/firewalld/zones/public.xml\n```\n\n###参考地址\n\nhttps://blog.csdn.net/haoqi9999/article/details/125988881\n","source":"_posts/linux/firewall-cmd.md","raw":"---\ntitle: 防火墙设置\ncover: /img/cover/2.jpg\nhide: false\ndate: 2024-06-28 01:16:57\npermalink: linux/firewall-cmd.html\ntags:\n  - linux\n  - 防火墙\ncategories:\n  - Linux\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n记录一下Linux下的firewall-cmd命令的用法，以后慢慢更新，慢慢完善。\n\n---\n\n### 正文\n\n#### 查看防火墙状态\n\n```shell\n#查看防火墙状态\nsystemctl status firewalld\n#开启防火墙\nsystemctl start firewalld\n#开机启动\nsystemctl enable firewalld\n```\n\n#### 端口访问设置\n\n查看已开放的端口、IP规则\n\n```shell\n#查询打开的端口\nfirewall-cmd --zone=public --list-ports\n```\n\n开放新端口，默认情况下所有端口都是关闭状态\n\n```shell\n#开放端口9001/tcp (tcp、udp等)\nfirewall-cmd --zone=public --add-port=9001/tcp --add-port=9001/udp --permanent\n#批量开放9002～9005的tcp端口\nfirewall-cmd --zone=public --add-port=9002-9005/tcp --permanent\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n关闭已开放的端口\n\n```shell\n#关闭端口9001/tcp (tcp、udp等)\nfirewall-cmd --zone=public --remove-port=9001/tcp --add-port=9001/udp --permanent\n#批量关闭9002～9005的tcp端口\nfirewall-cmd --zone=public --remove-port=9002-9005/tcp --permanent\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n#### IP访问设置\n\n查看已设置的规则\n\n```shell\n#查看已设置的规则\nfirewall-cmd --zone=public --list-rich-rules\n```\n\n开放或限制ip（设置规则）\n\n```shell\n#开放IPV4地址为：192.168.0.0 指定端口：9001/tcp\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.0\" port protocol=\"tcp\" port=\"9001\" accept\"\n#开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.1\" accept\"\n#限制IPV4地址为：192.168.1.0\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.0\" reject\"\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n删除已设置的规则\n\n```shell\n#删除开放IPV4地址为：192.168.0.0 指定端口：9001/tcp\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.0\" port protocol=\"tcp\" port=\"9001\" accept\"\n#删除开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.1\" accept\"\n#删除限制IPV4地址为：192.168.1.0\nfirewall-cmd --permanent --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.1.0\" reject\"\n#重新载入防火墙设置，使设置生效\nfirewall-cmd --reload\n```\n\n#### 如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\n\n```shell\nvi /etc/firewalld/zones/public.xml\n```\n\n###参考地址\n\nhttps://blog.csdn.net/haoqi9999/article/details/125988881\n","slug":"linux/firewall-cmd","published":1,"updated":"2025-03-18T09:15:54.534Z","__permalink":"linux/firewall-cmd.html","_id":"clxxj64y80007vaqf7dcpbt22","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记录一下Linux下的firewall-cmd命令的用法，以后慢慢更新，慢慢完善。</p>\n<hr>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机启动</span></span><br><span class=\"line\">systemctl enable firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"端口访问设置\"><a href=\"#端口访问设置\" class=\"headerlink\" title=\"端口访问设置\"></a>端口访问设置</h4><p>查看已开放的端口、IP规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查询打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>\n<p>开放新端口，默认情况下所有端口都是关闭状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口9001/tcp (tcp、udp等)</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">批量开放9002～9005的tcp端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=9002-9005/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>关闭已开放的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭端口9001/tcp (tcp、udp等)</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">批量关闭9002～9005的tcp端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=9002-9005/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"IP访问设置\"><a href=\"#IP访问设置\" class=\"headerlink\" title=\"IP访问设置\"></a>IP访问设置</h4><p>查看已设置的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看已设置的规则</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-rich-rules</span><br></pre></td></tr></table></figure>\n<p>开放或限制ip（设置规则）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">限制IPV4地址为：192.168.1.0</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>删除已设置的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除限制IPV4地址为：192.168.1.0</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\"><a href=\"#如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\" class=\"headerlink\" title=\"如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\"></a>如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/firewalld/zones/public.xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://blog.csdn.net/haoqi9999/article/details/125988881\">https://blog.csdn.net/haoqi9999/article/details/125988881</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记录一下Linux下的firewall-cmd命令的用法，以后慢慢更新，慢慢完善。</p>\n<hr>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机启动</span></span><br><span class=\"line\">systemctl enable firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"端口访问设置\"><a href=\"#端口访问设置\" class=\"headerlink\" title=\"端口访问设置\"></a>端口访问设置</h4><p>查看已开放的端口、IP规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查询打开的端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>\n<p>开放新端口，默认情况下所有端口都是关闭状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放端口9001/tcp (tcp、udp等)</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">批量开放9002～9005的tcp端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=9002-9005/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>关闭已开放的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭端口9001/tcp (tcp、udp等)</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">批量关闭9002～9005的tcp端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=9002-9005/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"IP访问设置\"><a href=\"#IP访问设置\" class=\"headerlink\" title=\"IP访问设置\"></a>IP访问设置</h4><p>查看已设置的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看已设置的规则</span></span><br><span class=\"line\">firewall-cmd --zone=public --list-rich-rules</span><br></pre></td></tr></table></figure>\n<p>开放或限制ip（设置规则）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">限制IPV4地址为：192.168.1.0</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>删除已设置的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除限制IPV4地址为：192.168.1.0</span></span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新载入防火墙设置，使设置生效</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\"><a href=\"#如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\" class=\"headerlink\" title=\"如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可\"></a>如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/firewalld/zones/public.xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://blog.csdn.net/haoqi9999/article/details/125988881\">https://blog.csdn.net/haoqi9999/article/details/125988881</a></p>\n"},{"title":"达梦数据导入导出","cover":"/img/cover/12.jpg","hide":false,"date":"2024-07-01T09:12:14.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n达梦数据库导出导入工具使用说明。备注，此备份还原方案是逻辑操作，在少量数据的情况下，性能足够，一旦数据量过大，则备份时间极长。\n\n### 同步方式\n\n达梦数据库支持4种数据同步方式，这些方式可以根据特定的场景去使用。\n\n- FULL（全库）\n- OWNER（用户）\n- SCHEMAS（模式）\n- TABLES（表）\n\n### 参数说明\n\n<table class=\"data-table\" data-transient-attributes=\"class\"\n    style=\"width: 100%; outline: none; border-collapse: collapse;\" data-width=\"576px\">\n    <colgroup>\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n    </colgroup>\n    <tbody>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>参数<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dexp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dimp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>备注<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID在作为导出和导入时，都是指定一个链接串。格式为：用户名/密码@库名:端口号#证书路径<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FILE<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>file作为导出参数时，指定导出的文件名。可选参数，默认值为dexp.dmp<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>fiel作为导入参数时，指定导入使用的文件名，也就是dexp导出的文件。作为导入时，它是必选参数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>DIRECTORY<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>directory参数指定导出和导入的目录，简单点说就是指定dmp(转储文件)的位置。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FULL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>full参数指定导出和导入基于整个数据库，也就是导出整个数据库或导入整个数据库。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，不建议使用。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>OWNER<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>owner参数指定导出和导入基于用户，也就是导出或导入用户中的所有对象，多个用户使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，用户与模式基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>SCHEMAS<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>schemas参数指定导出和导入基于模式，也就是导出或导入模式下的所有对象，多个模式使用英文逗号分割<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，模式与用户基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>TABLES<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>tables参数指定导出和导入基于表，也就是导出或导入表的结构和数据，多个表使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>PARALLEL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>parallel参数指定导出和导入过程中使用的线程数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>COMPRESS<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>compress参数指定导出的数据是否压缩，默认值N(不压缩)，可选值Y|N。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>无<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>LOG<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导出参数时，指定导出日志的文件名。可选参数，默认值为dexp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导入参数时，指定导入日志的文件名。可选参数，默认值为dimp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n### 使用案例\n\n这里只记录了备份还原模式的用法，其他用法可看原文档\n\n```sql\n# 备份\n./dexp SYSDBA/SYSDBA001@127.0.0.1:5236 FILE=SZSQ.dmp LOG=SZSQ.log DIRECTORY=/data SCHEMAS=SZSQ\n# 还原，还原之前要删除相应表数据\n./dimp SYSDBA/SYSDBA001@127.0.0.1:5236 FILE=SZSQ.dmp LOG=SZSQ.log DIRECTORY=/data SCHEMAS=SZSQ\n\n```\n\n原地址：https://blog.51cto.com/bxbdba/7175810","source":"_posts/db/dimp-and-dexp.md","raw":"---\ntitle: 达梦数据导入导出\ncover: /img/cover/12.jpg\nhide: false\ndate: 2024-07-01 17:12:14\npermalink: db/dimp-and-dexp.html\ntags:\n  - DM\ncategories:\n  - 数据库\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n达梦数据库导出导入工具使用说明。备注，此备份还原方案是逻辑操作，在少量数据的情况下，性能足够，一旦数据量过大，则备份时间极长。\n\n### 同步方式\n\n达梦数据库支持4种数据同步方式，这些方式可以根据特定的场景去使用。\n\n- FULL（全库）\n- OWNER（用户）\n- SCHEMAS（模式）\n- TABLES（表）\n\n### 参数说明\n\n<table class=\"data-table\" data-transient-attributes=\"class\"\n    style=\"width: 100%; outline: none; border-collapse: collapse;\" data-width=\"576px\">\n    <colgroup>\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n    </colgroup>\n    <tbody>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>参数<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dexp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dimp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>备注<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID在作为导出和导入时，都是指定一个链接串。格式为：用户名/密码@库名:端口号#证书路径<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FILE<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>file作为导出参数时，指定导出的文件名。可选参数，默认值为dexp.dmp<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>fiel作为导入参数时，指定导入使用的文件名，也就是dexp导出的文件。作为导入时，它是必选参数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>DIRECTORY<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>directory参数指定导出和导入的目录，简单点说就是指定dmp(转储文件)的位置。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FULL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>full参数指定导出和导入基于整个数据库，也就是导出整个数据库或导入整个数据库。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，不建议使用。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>OWNER<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>owner参数指定导出和导入基于用户，也就是导出或导入用户中的所有对象，多个用户使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，用户与模式基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>SCHEMAS<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>schemas参数指定导出和导入基于模式，也就是导出或导入模式下的所有对象，多个模式使用英文逗号分割<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，模式与用户基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>TABLES<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>tables参数指定导出和导入基于表，也就是导出或导入表的结构和数据，多个表使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>PARALLEL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>parallel参数指定导出和导入过程中使用的线程数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>COMPRESS<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>compress参数指定导出的数据是否压缩，默认值N(不压缩)，可选值Y|N。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>无<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>LOG<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导出参数时，指定导出日志的文件名。可选参数，默认值为dexp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导入参数时，指定导入日志的文件名。可选参数，默认值为dimp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n### 使用案例\n\n这里只记录了备份还原模式的用法，其他用法可看原文档\n\n```sql\n# 备份\n./dexp SYSDBA/SYSDBA001@127.0.0.1:5236 FILE=SZSQ.dmp LOG=SZSQ.log DIRECTORY=/data SCHEMAS=SZSQ\n# 还原，还原之前要删除相应表数据\n./dimp SYSDBA/SYSDBA001@127.0.0.1:5236 FILE=SZSQ.dmp LOG=SZSQ.log DIRECTORY=/data SCHEMAS=SZSQ\n\n```\n\n原地址：https://blog.51cto.com/bxbdba/7175810","slug":"db/dimp-and-dexp","published":1,"updated":"2024-07-03T06:22:39.143Z","__permalink":"db/dimp-and-dexp.html","_id":"cly2rhhr00000d7qf2n11gg1f","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>达梦数据库导出导入工具使用说明。备注，此备份还原方案是逻辑操作，在少量数据的情况下，性能足够，一旦数据量过大，则备份时间极长。</p>\n<h3 id=\"同步方式\"><a href=\"#同步方式\" class=\"headerlink\" title=\"同步方式\"></a>同步方式</h3><p>达梦数据库支持4种数据同步方式，这些方式可以根据特定的场景去使用。</p>\n<ul>\n<li>FULL（全库）</li>\n<li>OWNER（用户）</li>\n<li>SCHEMAS（模式）</li>\n<li>TABLES（表）</li>\n</ul>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><table class=\"data-table\" data-transient-attributes=\"class\"\n    style=\"width: 100%; outline: none; border-collapse: collapse;\" data-width=\"576px\">\n    <colgroup>\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n    </colgroup>\n    <tbody>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>参数<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dexp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dimp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>备注<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID在作为导出和导入时，都是指定一个链接串。格式为：用户名/密码@库名:端口号#证书路径<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FILE<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>file作为导出参数时，指定导出的文件名。可选参数，默认值为dexp.dmp<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>fiel作为导入参数时，指定导入使用的文件名，也就是dexp导出的文件。作为导入时，它是必选参数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>DIRECTORY<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>directory参数指定导出和导入的目录，简单点说就是指定dmp(转储文件)的位置。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FULL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>full参数指定导出和导入基于整个数据库，也就是导出整个数据库或导入整个数据库。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，不建议使用。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>OWNER<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>owner参数指定导出和导入基于用户，也就是导出或导入用户中的所有对象，多个用户使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，用户与模式基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>SCHEMAS<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>schemas参数指定导出和导入基于模式，也就是导出或导入模式下的所有对象，多个模式使用英文逗号分割<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，模式与用户基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>TABLES<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>tables参数指定导出和导入基于表，也就是导出或导入表的结构和数据，多个表使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>PARALLEL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>parallel参数指定导出和导入过程中使用的线程数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>COMPRESS<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>compress参数指定导出的数据是否压缩，默认值N(不压缩)，可选值Y|N。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>无<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>LOG<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导出参数时，指定导出日志的文件名。可选参数，默认值为dexp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导入参数时，指定导入日志的文件名。可选参数，默认值为dimp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><p>这里只记录了备份还原模式的用法，其他用法可看原文档</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">.<span class=\"operator\">/</span>dexp SYSDBA<span class=\"operator\">/</span>SYSDBA001<span class=\"variable\">@127</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5236</span> FILE<span class=\"operator\">=</span>SZSQ.dmp LOG<span class=\"operator\">=</span>SZSQ.log DIRECTORY<span class=\"operator\">=</span><span class=\"operator\">/</span>data SCHEMAS<span class=\"operator\">=</span>SZSQ</span><br><span class=\"line\"># 还原，还原之前要删除相应表数据</span><br><span class=\"line\">.<span class=\"operator\">/</span>dimp SYSDBA<span class=\"operator\">/</span>SYSDBA001<span class=\"variable\">@127</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5236</span> FILE<span class=\"operator\">=</span>SZSQ.dmp LOG<span class=\"operator\">=</span>SZSQ.log DIRECTORY<span class=\"operator\">=</span><span class=\"operator\">/</span>data SCHEMAS<span class=\"operator\">=</span>SZSQ</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原地址：<a href=\"https://blog.51cto.com/bxbdba/7175810\">https://blog.51cto.com/bxbdba/7175810</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>达梦数据库导出导入工具使用说明。备注，此备份还原方案是逻辑操作，在少量数据的情况下，性能足够，一旦数据量过大，则备份时间极长。</p>\n<h3 id=\"同步方式\"><a href=\"#同步方式\" class=\"headerlink\" title=\"同步方式\"></a>同步方式</h3><p>达梦数据库支持4种数据同步方式，这些方式可以根据特定的场景去使用。</p>\n<ul>\n<li>FULL（全库）</li>\n<li>OWNER（用户）</li>\n<li>SCHEMAS（模式）</li>\n<li>TABLES（表）</li>\n</ul>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><table class=\"data-table\" data-transient-attributes=\"class\"\n    style=\"width: 100%; outline: none; border-collapse: collapse;\" data-width=\"576px\">\n    <colgroup>\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n        <col span=\"1\" width=\"144\">\n    </colgroup>\n    <tbody>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>参数<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dexp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>dimp说明<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>备注<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>USERID在作为导出和导入时，都是指定一个链接串。格式为：用户名/密码@库名:端口号#证书路径<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FILE<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>file作为导出参数时，指定导出的文件名。可选参数，默认值为dexp.dmp<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>fiel作为导入参数时，指定导入使用的文件名，也就是dexp导出的文件。作为导入时，它是必选参数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>DIRECTORY<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>directory参数指定导出和导入的目录，简单点说就是指定dmp(转储文件)的位置。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>FULL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>full参数指定导出和导入基于整个数据库，也就是导出整个数据库或导入整个数据库。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，不建议使用。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>OWNER<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>owner参数指定导出和导入基于用户，也就是导出或导入用户中的所有对象，多个用户使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，用户与模式基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>SCHEMAS<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>schemas参数指定导出和导入基于模式，也就是导出或导入模式下的所有对象，多个模式使用英文逗号分割<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用，模式与用户基本一致。<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>TABLES<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>tables参数指定导出和导入基于表，也就是导出或导入表的结构和数据，多个表使用英文逗号分割。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>四种方式之一，根据需要使用<br></p>\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>PARALLEL<br></p>\n            </td>\n            <td colspan=\"2\" data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>parallel参数指定导出和导入过程中使用的线程数。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>COMPRESS<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>compress参数指定导出的数据是否压缩，默认值N(不压缩)，可选值Y|N。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>无<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n        <tr style=\"height: 30px;\">\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>LOG<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导出参数时，指定导出日志的文件名。可选参数，默认值为dexp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n                <p>log作为导入参数时，指定导入日志的文件名。可选参数，默认值为dimp.log。<br></p>\n            </td>\n            <td data-transient-attributes=\"table-cell-selection\" class=\"table-last-column table-last-row\"\n                style=\"min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><p>这里只记录了备份还原模式的用法，其他用法可看原文档</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">.<span class=\"operator\">/</span>dexp SYSDBA<span class=\"operator\">/</span>SYSDBA001<span class=\"variable\">@127</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5236</span> FILE<span class=\"operator\">=</span>SZSQ.dmp LOG<span class=\"operator\">=</span>SZSQ.log DIRECTORY<span class=\"operator\">=</span><span class=\"operator\">/</span>data SCHEMAS<span class=\"operator\">=</span>SZSQ</span><br><span class=\"line\"># 还原，还原之前要删除相应表数据</span><br><span class=\"line\">.<span class=\"operator\">/</span>dimp SYSDBA<span class=\"operator\">/</span>SYSDBA001<span class=\"variable\">@127</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">5236</span> FILE<span class=\"operator\">=</span>SZSQ.dmp LOG<span class=\"operator\">=</span>SZSQ.log DIRECTORY<span class=\"operator\">=</span><span class=\"operator\">/</span>data SCHEMAS<span class=\"operator\">=</span>SZSQ</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原地址：<a href=\"https://blog.51cto.com/bxbdba/7175810\">https://blog.51cto.com/bxbdba/7175810</a></p>\n"},{"title":"yum换源","cover":"/img/cover/17.jpg","hide":false,"date":"2024-07-09T05:56:57.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n使用yum的官方源进行yum install xxxx 的时候，速度非常慢，只有几kB/s，有时候还不到1kB/s。这就会造成安装包的速度的速度要么特变慢，要么就根本安装不了。\n\n---\n\n### 更新源\n\n#### 备份\n\n```shell\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n```\n\n#### 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/\n\n```shell\n# Centos6\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# Centos7\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n注：如果没有安装`wget`，可本地访问网址下载，上传到服务器。\n\n#### 清理并生成新的缓存\n\n```shell\nyum clean & yum makecache\n```\n\n### 总结\n\n有时候可能阿里源不可用，可替换清华源等。\n\n原地址：https://blog.csdn.net/wudinaniya/article/details/105758739\n","source":"_posts/linux/yum-change-source.md","raw":"---\ntitle: yum换源\ncover: /img/cover/17.jpg\nhide: false\ndate: 2024-07-09 13:56:57\npermalink: linux/yum-change-source.html\ntags:\n  - linux\ncategories:\n  - Linux\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n使用yum的官方源进行yum install xxxx 的时候，速度非常慢，只有几kB/s，有时候还不到1kB/s。这就会造成安装包的速度的速度要么特变慢，要么就根本安装不了。\n\n---\n\n### 更新源\n\n#### 备份\n\n```shell\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n```\n\n#### 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/\n\n```shell\n# Centos6\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# Centos7\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n注：如果没有安装`wget`，可本地访问网址下载，上传到服务器。\n\n#### 清理并生成新的缓存\n\n```shell\nyum clean & yum makecache\n```\n\n### 总结\n\n有时候可能阿里源不可用，可替换清华源等。\n\n原地址：https://blog.csdn.net/wudinaniya/article/details/105758739\n","slug":"linux/yum-change-source","published":1,"updated":"2025-03-18T09:16:09.474Z","__permalink":"linux/yum-change-source.html","_id":"clye10jtp0000l2qfbfxe822y","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用yum的官方源进行yum install xxxx 的时候，速度非常慢，只有几kB/s，有时候还不到1kB/s。这就会造成安装包的速度的速度要么特变慢，要么就根本安装不了。</p>\n<hr>\n<h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载新的-CentOS-Base-repo-到-etc-yum-repos-d\"><a href=\"#下载新的-CentOS-Base-repo-到-etc-yum-repos-d\" class=\"headerlink\" title=\"下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/\"></a>下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Centos6</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Centos7</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n<p>注：如果没有安装<code>wget</code>，可本地访问网址下载，上传到服务器。</p>\n<h4 id=\"清理并生成新的缓存\"><a href=\"#清理并生成新的缓存\" class=\"headerlink\" title=\"清理并生成新的缓存\"></a>清理并生成新的缓存</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum clean &amp; yum makecache</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>有时候可能阿里源不可用，可替换清华源等。</p>\n<p>原地址：<a href=\"https://blog.csdn.net/wudinaniya/article/details/105758739\">https://blog.csdn.net/wudinaniya/article/details/105758739</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用yum的官方源进行yum install xxxx 的时候，速度非常慢，只有几kB/s，有时候还不到1kB/s。这就会造成安装包的速度的速度要么特变慢，要么就根本安装不了。</p>\n<hr>\n<h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载新的-CentOS-Base-repo-到-etc-yum-repos-d\"><a href=\"#下载新的-CentOS-Base-repo-到-etc-yum-repos-d\" class=\"headerlink\" title=\"下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/\"></a>下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Centos6</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Centos7</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n<p>注：如果没有安装<code>wget</code>，可本地访问网址下载，上传到服务器。</p>\n<h4 id=\"清理并生成新的缓存\"><a href=\"#清理并生成新的缓存\" class=\"headerlink\" title=\"清理并生成新的缓存\"></a>清理并生成新的缓存</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum clean &amp; yum makecache</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>有时候可能阿里源不可用，可替换清华源等。</p>\n<p>原地址：<a href=\"https://blog.csdn.net/wudinaniya/article/details/105758739\">https://blog.csdn.net/wudinaniya/article/details/105758739</a></p>\n"},{"title":"mysql主从设置","cover":"/img/cover/15.jpg","hide":false,"date":"2024-07-12T09:19:19.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n公司服务器迁徙之后，因为数据库数据量太大，用备份的数据恢复到从库的方式过于耗费时间，再加上数据库本就是docker方式启动的，以前只是按照文档一步步搭建主从数据库，今天有时间就好好研究一下原理，记录一下偷懒时遇到的问题。\n\n### 搭建过程\n\n注：本方案是为了应对公司项目做的处理，所以处理方式有些偏向与容器化部署项目的记录方案，比如公司本有一台运行中的docker mysql数据库，扩容另台或多台从数据库时可用该方案。\n\n#### 备份主库挂载文件夹到从库服务器\n\n备份文件夹时最好先停止docker容器，或锁表：\n\n```sql\nflush tables with read lock\n```\n\n备份完成，再恢复数据写入：\n\n```sql\nunlock tables\n```\n\n#### 如有设置过主从，删除相关表数据，重置设置\n\n截断`mysql`数据库下的`slave_master_info`和`slave_relay_log_info`两个表\n\n![image-20240712174756001](https://images.jzwfan.com/image/2024/07/12/174758-0.png)\n\n删除挂载出来的文件夹下的所有`relay log` 文件（注：挂载出来的为`/var/lib/mysql`文件夹）\n\n![image-20240712175814774](https://images.jzwfan.com/image/2024/07/12/175817-0.png)\n\n数据库中运行以下命令重置状态\n\n```sql\nreset slave;\n```\n\n#### 更新备库的server-uuid\n\n主库和从库的server-uuid不能相同，这里是直接拷贝文件，所以要手动改配置。用以下命令获取UUID\n\n```sql\nSELECT UUID();\n```\n\n![image-20240715100907937](https://images.jzwfan.com/image/2024/07/15/100910-0.png)\n\n更新`auto.cnf`文件中的`server-uuid`设置（注：挂载出来的为`/var/lib/mysql`文件夹）\n\n![image-20240715101804553](https://images.jzwfan.com/image/2024/07/15/101813-0.png)\n\n#### my.cnf文件配置\n\n```cnf\n[client]\nport = 3306\nsocket = /tmp/mysql.sock\n\n[mysqld]\nbasedir = /usr/local/mysql\nport = 3306\nsocket = /tmp/mysql.sock\ndatadir = /usr/local/mysql/data\npid-file = /usr/local/mysql/data/mysql.pid\nlog-error = /usr/local/mysql/data/mysql.err\n\nserver-id = 1 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#另一个改成2\nauto_increment_offset = 1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#奇数ID，另一个改成偶数ID\nauto_increment_increment = 2                                            #ID生成步长改成2\n\nlog-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此项\nbinlog-format=ROW\n# binlog-row-p_w_picpath=minimal\n#将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启\nlog-slave-updates=true\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ngtid-mode=on\nenforce-gtid-consistency=true\nmaster-info-repository=TABLE\nrelay-log-info-repository=TABLE\nsync-master-info=1\nslave-parallel-workers=0\nsync_binlog=0\nbinlog-checksum=CRC32\nmaster-verify-checksum=1\nslave-sql-verify-checksum=1\nbinlog-rows-query-log_events=1\n#expire_logs_days=5\nmax_binlog_size=1024M                                                   #binlog单文件最大值\n\nreplicate-ignore-db = mysql                                             #忽略不同步主从的数据库\nreplicate-ignore-db = information_schema\nreplicate-ignore-db = performance_schema\nreplicate-ignore-db = test\nreplicate-ignore-db = zabbix\n\nmax_connections = 3000\nmax_connect_errors = 30\n\nskip-character-set-client-handshake                                     #忽略应用程序想要设置的其他字符集\ninit-connect='SET NAMES utf8'                                           #连接时执行的SQL\ncharacter-set-server=utf8                                               #服务端默认字符集\nwait_timeout=1800                                                       #请求的最大连接时间\ninteractive_timeout=1800                                                #和上一参数同时修改才会生效\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES                     #sql模式\nmax_allowed_packet = 10M\nbulk_insert_buffer_size = 8M\nquery_cache_type = 1\nquery_cache_size = 128M\nquery_cache_limit = 4M\nkey_buffer_size = 256M\nread_buffer_size = 16K\n\nskip-name-resolve\nslow_query_log=1\nlong_query_time = 6\nslow_query_log_file=slow-query.log\ninnodb_flush_log_at_trx_commit = 2\ninnodb_log_buffer_size = 16M\n\n[mysql]\nno-auto-rehash\n\n[myisamchk]\nkey_buffer_size = 20M\nsort_buffer_size = 20M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n\n[mysqld_safe]\n```\n\n#### 添加主从同步账户\n\nmaster0\n\n```sql\ngrant replication slave on *.* to 'repl'@'master1-ip' identified by '123456';\nflush privileges;\n```\n\nmaster1\n\n```sql\ngrant replication slave on *.* to 'repl'@'master0-ip' identified by '123456';\nflush privileges;\n```\n\n注：为了数据安全，用户最好指定IP而非`%`\n\n#### 查看两个数据库的master状态\n\n命令如下：\n\n```sql\nshow master status;\n```\n\n返回如下图所示，记住被框住的两个数据，后面有用：\n\n![image-20240715104551372](https://images.jzwfan.com/image/2024/07/15/104554-0.png)\n\n#### 配置同步信息\n\nMaster0命令如下：\n\n```sql\nchange master to\nmaster_host='master1-ip', # 指定IP\nmaster_port=3306, # 指定端口\nmaster_user='repl', # 指定用户名\nmaster_password='123456', # 指定用户名字\nmaster_log_file='mysql-master1-bin.000001', # 指定上一步中返回文件名\nmaster_log_pos=582; # 指定上一步中返回的步数\n```\n\n然后启动主从:\n\n```sql\nstart slave;\n```\n\n查看状态：\n\n```sql\nshow slave status\\G # 注：这里没有分号\n```\n\n显示如下图：\n\n![image-20240715110013349](https://images.jzwfan.com/image/2024/07/15/110015-0.png)\n\n然后在master1上重复此步骤。\n\n### 总结\n\n- 如果以前做过主从，要清理主从配置\n- 如果不是导入的，而是和我一样直接复制docker挂载的文件夹时要改server-uuid\n\n参考地址：\n\nhttps://www.cnblogs.com/ygqygq2/p/6045279.html\n\nhttps://www.jianshu.com/p/805dc6576b79\n\n\n\n","source":"_posts/db/mysql-master-slave.md","raw":"---\ntitle: mysql主从设置\ncover: /img/cover/15.jpg\nhide: false\ndate: 2024-07-12 17:19:19\npermalink: db/mysql-master-slave.html\ntags:\ncategories:\n - Mysql\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n公司服务器迁徙之后，因为数据库数据量太大，用备份的数据恢复到从库的方式过于耗费时间，再加上数据库本就是docker方式启动的，以前只是按照文档一步步搭建主从数据库，今天有时间就好好研究一下原理，记录一下偷懒时遇到的问题。\n\n### 搭建过程\n\n注：本方案是为了应对公司项目做的处理，所以处理方式有些偏向与容器化部署项目的记录方案，比如公司本有一台运行中的docker mysql数据库，扩容另台或多台从数据库时可用该方案。\n\n#### 备份主库挂载文件夹到从库服务器\n\n备份文件夹时最好先停止docker容器，或锁表：\n\n```sql\nflush tables with read lock\n```\n\n备份完成，再恢复数据写入：\n\n```sql\nunlock tables\n```\n\n#### 如有设置过主从，删除相关表数据，重置设置\n\n截断`mysql`数据库下的`slave_master_info`和`slave_relay_log_info`两个表\n\n![image-20240712174756001](https://images.jzwfan.com/image/2024/07/12/174758-0.png)\n\n删除挂载出来的文件夹下的所有`relay log` 文件（注：挂载出来的为`/var/lib/mysql`文件夹）\n\n![image-20240712175814774](https://images.jzwfan.com/image/2024/07/12/175817-0.png)\n\n数据库中运行以下命令重置状态\n\n```sql\nreset slave;\n```\n\n#### 更新备库的server-uuid\n\n主库和从库的server-uuid不能相同，这里是直接拷贝文件，所以要手动改配置。用以下命令获取UUID\n\n```sql\nSELECT UUID();\n```\n\n![image-20240715100907937](https://images.jzwfan.com/image/2024/07/15/100910-0.png)\n\n更新`auto.cnf`文件中的`server-uuid`设置（注：挂载出来的为`/var/lib/mysql`文件夹）\n\n![image-20240715101804553](https://images.jzwfan.com/image/2024/07/15/101813-0.png)\n\n#### my.cnf文件配置\n\n```cnf\n[client]\nport = 3306\nsocket = /tmp/mysql.sock\n\n[mysqld]\nbasedir = /usr/local/mysql\nport = 3306\nsocket = /tmp/mysql.sock\ndatadir = /usr/local/mysql/data\npid-file = /usr/local/mysql/data/mysql.pid\nlog-error = /usr/local/mysql/data/mysql.err\n\nserver-id = 1 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#另一个改成2\nauto_increment_offset = 1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#奇数ID，另一个改成偶数ID\nauto_increment_increment = 2                                            #ID生成步长改成2\n\nlog-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此项\nbinlog-format=ROW\n# binlog-row-p_w_picpath=minimal\n#将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启\nlog-slave-updates=true\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ngtid-mode=on\nenforce-gtid-consistency=true\nmaster-info-repository=TABLE\nrelay-log-info-repository=TABLE\nsync-master-info=1\nslave-parallel-workers=0\nsync_binlog=0\nbinlog-checksum=CRC32\nmaster-verify-checksum=1\nslave-sql-verify-checksum=1\nbinlog-rows-query-log_events=1\n#expire_logs_days=5\nmax_binlog_size=1024M                                                   #binlog单文件最大值\n\nreplicate-ignore-db = mysql                                             #忽略不同步主从的数据库\nreplicate-ignore-db = information_schema\nreplicate-ignore-db = performance_schema\nreplicate-ignore-db = test\nreplicate-ignore-db = zabbix\n\nmax_connections = 3000\nmax_connect_errors = 30\n\nskip-character-set-client-handshake                                     #忽略应用程序想要设置的其他字符集\ninit-connect='SET NAMES utf8'                                           #连接时执行的SQL\ncharacter-set-server=utf8                                               #服务端默认字符集\nwait_timeout=1800                                                       #请求的最大连接时间\ninteractive_timeout=1800                                                #和上一参数同时修改才会生效\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES                     #sql模式\nmax_allowed_packet = 10M\nbulk_insert_buffer_size = 8M\nquery_cache_type = 1\nquery_cache_size = 128M\nquery_cache_limit = 4M\nkey_buffer_size = 256M\nread_buffer_size = 16K\n\nskip-name-resolve\nslow_query_log=1\nlong_query_time = 6\nslow_query_log_file=slow-query.log\ninnodb_flush_log_at_trx_commit = 2\ninnodb_log_buffer_size = 16M\n\n[mysql]\nno-auto-rehash\n\n[myisamchk]\nkey_buffer_size = 20M\nsort_buffer_size = 20M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n\n[mysqld_safe]\n```\n\n#### 添加主从同步账户\n\nmaster0\n\n```sql\ngrant replication slave on *.* to 'repl'@'master1-ip' identified by '123456';\nflush privileges;\n```\n\nmaster1\n\n```sql\ngrant replication slave on *.* to 'repl'@'master0-ip' identified by '123456';\nflush privileges;\n```\n\n注：为了数据安全，用户最好指定IP而非`%`\n\n#### 查看两个数据库的master状态\n\n命令如下：\n\n```sql\nshow master status;\n```\n\n返回如下图所示，记住被框住的两个数据，后面有用：\n\n![image-20240715104551372](https://images.jzwfan.com/image/2024/07/15/104554-0.png)\n\n#### 配置同步信息\n\nMaster0命令如下：\n\n```sql\nchange master to\nmaster_host='master1-ip', # 指定IP\nmaster_port=3306, # 指定端口\nmaster_user='repl', # 指定用户名\nmaster_password='123456', # 指定用户名字\nmaster_log_file='mysql-master1-bin.000001', # 指定上一步中返回文件名\nmaster_log_pos=582; # 指定上一步中返回的步数\n```\n\n然后启动主从:\n\n```sql\nstart slave;\n```\n\n查看状态：\n\n```sql\nshow slave status\\G # 注：这里没有分号\n```\n\n显示如下图：\n\n![image-20240715110013349](https://images.jzwfan.com/image/2024/07/15/110015-0.png)\n\n然后在master1上重复此步骤。\n\n### 总结\n\n- 如果以前做过主从，要清理主从配置\n- 如果不是导入的，而是和我一样直接复制docker挂载的文件夹时要改server-uuid\n\n参考地址：\n\nhttps://www.cnblogs.com/ygqygq2/p/6045279.html\n\nhttps://www.jianshu.com/p/805dc6576b79\n\n\n\n","slug":"db/mysql-master-slave","published":1,"updated":"2024-07-15T03:11:51.433Z","__permalink":"db/mysql-master-slave.html","_id":"clyiix09f0000rlqf2cpqaaev","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>公司服务器迁徙之后，因为数据库数据量太大，用备份的数据恢复到从库的方式过于耗费时间，再加上数据库本就是docker方式启动的，以前只是按照文档一步步搭建主从数据库，今天有时间就好好研究一下原理，记录一下偷懒时遇到的问题。</p>\n<h3 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h3><p>注：本方案是为了应对公司项目做的处理，所以处理方式有些偏向与容器化部署项目的记录方案，比如公司本有一台运行中的docker mysql数据库，扩容另台或多台从数据库时可用该方案。</p>\n<h4 id=\"备份主库挂载文件夹到从库服务器\"><a href=\"#备份主库挂载文件夹到从库服务器\" class=\"headerlink\" title=\"备份主库挂载文件夹到从库服务器\"></a>备份主库挂载文件夹到从库服务器</h4><p>备份文件夹时最好先停止docker容器，或锁表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush tables <span class=\"keyword\">with</span> read lock</span><br></pre></td></tr></table></figure>\n<p>备份完成，再恢复数据写入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">unlock tables</span><br></pre></td></tr></table></figure>\n<h4 id=\"如有设置过主从，删除相关表数据，重置设置\"><a href=\"#如有设置过主从，删除相关表数据，重置设置\" class=\"headerlink\" title=\"如有设置过主从，删除相关表数据，重置设置\"></a>如有设置过主从，删除相关表数据，重置设置</h4><p>截断<code>mysql</code>数据库下的<code>slave_master_info</code>和<code>slave_relay_log_info</code>两个表</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/12/174758-0.png\" alt=\"image-20240712174756001\"></p>\n<p>删除挂载出来的文件夹下的所有<code>relay log</code> 文件（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/12/175817-0.png\" alt=\"image-20240712175814774\"></p>\n<p>数据库中运行以下命令重置状态</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">reset slave;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新备库的server-uuid\"><a href=\"#更新备库的server-uuid\" class=\"headerlink\" title=\"更新备库的server-uuid\"></a>更新备库的server-uuid</h4><p>主库和从库的server-uuid不能相同，这里是直接拷贝文件，所以要手动改配置。用以下命令获取UUID</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> UUID();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/100910-0.png\" alt=\"image-20240715100907937\"></p>\n<p>更新<code>auto.cnf</code>文件中的<code>server-uuid</code>设置（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/101813-0.png\" alt=\"image-20240715101804553\"></p>\n<h4 id=\"my-cnf文件配置\"><a href=\"#my-cnf文件配置\" class=\"headerlink\" title=\"my.cnf文件配置\"></a>my.cnf文件配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\">datadir = /usr/local/mysql/data</span><br><span class=\"line\">pid-file = /usr/local/mysql/data/mysql.pid</span><br><span class=\"line\">log-error = /usr/local/mysql/data/mysql.err</span><br><span class=\"line\"></span><br><span class=\"line\">server-id = 1 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#另一个改成2</span><br><span class=\"line\">auto_increment_offset = 1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#奇数ID，另一个改成偶数ID</span><br><span class=\"line\">auto_increment_increment = 2                                            #ID生成步长改成2</span><br><span class=\"line\"></span><br><span class=\"line\">log-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此项</span><br><span class=\"line\">binlog-format=ROW</span><br><span class=\"line\"># binlog-row-p_w_picpath=minimal</span><br><span class=\"line\">#将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启</span><br><span class=\"line\">log-slave-updates=true\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=true</span><br><span class=\"line\">master-info-repository=TABLE</span><br><span class=\"line\">relay-log-info-repository=TABLE</span><br><span class=\"line\">sync-master-info=1</span><br><span class=\"line\">slave-parallel-workers=0</span><br><span class=\"line\">sync_binlog=0</span><br><span class=\"line\">binlog-checksum=CRC32</span><br><span class=\"line\">master-verify-checksum=1</span><br><span class=\"line\">slave-sql-verify-checksum=1</span><br><span class=\"line\">binlog-rows-query-log_events=1</span><br><span class=\"line\">#expire_logs_days=5</span><br><span class=\"line\">max_binlog_size=1024M                                                   #binlog单文件最大值</span><br><span class=\"line\"></span><br><span class=\"line\">replicate-ignore-db = mysql                                             #忽略不同步主从的数据库</span><br><span class=\"line\">replicate-ignore-db = information_schema</span><br><span class=\"line\">replicate-ignore-db = performance_schema</span><br><span class=\"line\">replicate-ignore-db = test</span><br><span class=\"line\">replicate-ignore-db = zabbix</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_connect_errors = 30</span><br><span class=\"line\"></span><br><span class=\"line\">skip-character-set-client-handshake                                     #忽略应用程序想要设置的其他字符集</span><br><span class=\"line\">init-connect=&#x27;SET NAMES utf8&#x27;                                           #连接时执行的SQL</span><br><span class=\"line\">character-set-server=utf8                                               #服务端默认字符集</span><br><span class=\"line\">wait_timeout=1800                                                       #请求的最大连接时间</span><br><span class=\"line\">interactive_timeout=1800                                                #和上一参数同时修改才会生效</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES                     #sql模式</span><br><span class=\"line\">max_allowed_packet = 10M</span><br><span class=\"line\">bulk_insert_buffer_size = 8M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\">query_cache_size = 128M</span><br><span class=\"line\">query_cache_limit = 4M</span><br><span class=\"line\">key_buffer_size = 256M</span><br><span class=\"line\">read_buffer_size = 16K</span><br><span class=\"line\"></span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">long_query_time = 6</span><br><span class=\"line\">slow_query_log_file=slow-query.log</span><br><span class=\"line\">innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\">innodb_log_buffer_size = 16M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br><span class=\"line\"></span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size = 20M</span><br><span class=\"line\">sort_buffer_size = 20M</span><br><span class=\"line\">read_buffer = 2M</span><br><span class=\"line\">write_buffer = 2M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqlhotcopy]</span><br><span class=\"line\">interactive-timeout</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet = 16M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加主从同步账户\"><a href=\"#添加主从同步账户\" class=\"headerlink\" title=\"添加主从同步账户\"></a>添加主从同步账户</h4><p>master0</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> replication slave <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;repl&#x27;</span>@<span class=\"string\">&#x27;master1-ip&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>master1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> replication slave <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;repl&#x27;</span>@<span class=\"string\">&#x27;master0-ip&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>注：为了数据安全，用户最好指定IP而非<code>%</code></p>\n<h4 id=\"查看两个数据库的master状态\"><a href=\"#查看两个数据库的master状态\" class=\"headerlink\" title=\"查看两个数据库的master状态\"></a>查看两个数据库的master状态</h4><p>命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> master status;</span><br></pre></td></tr></table></figure>\n<p>返回如下图所示，记住被框住的两个数据，后面有用：</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/104554-0.png\" alt=\"image-20240715104551372\"></p>\n<h4 id=\"配置同步信息\"><a href=\"#配置同步信息\" class=\"headerlink\" title=\"配置同步信息\"></a>配置同步信息</h4><p>Master0命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master <span class=\"keyword\">to</span></span><br><span class=\"line\">master_host<span class=\"operator\">=</span><span class=\"string\">&#x27;master1-ip&#x27;</span>, # 指定IP</span><br><span class=\"line\">master_port<span class=\"operator\">=</span><span class=\"number\">3306</span>, # 指定端口</span><br><span class=\"line\">master_user<span class=\"operator\">=</span><span class=\"string\">&#x27;repl&#x27;</span>, # 指定用户名</span><br><span class=\"line\">master_password<span class=\"operator\">=</span><span class=\"string\">&#x27;123456&#x27;</span>, # 指定用户名字</span><br><span class=\"line\">master_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;mysql-master1-bin.000001&#x27;</span>, # 指定上一步中返回文件名</span><br><span class=\"line\">master_log_pos<span class=\"operator\">=</span><span class=\"number\">582</span>; # 指定上一步中返回的步数</span><br></pre></td></tr></table></figure>\n<p>然后启动主从:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">start</span> slave;</span><br></pre></td></tr></table></figure>\n<p>查看状态：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> slave status\\G # 注：这里没有分号</span><br></pre></td></tr></table></figure>\n<p>显示如下图：</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/110015-0.png\" alt=\"image-20240715110013349\"></p>\n<p>然后在master1上重复此步骤。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>如果以前做过主从，要清理主从配置</li>\n<li>如果不是导入的，而是和我一样直接复制docker挂载的文件夹时要改server-uuid</li>\n</ul>\n<p>参考地址：</p>\n<p><a href=\"https://www.cnblogs.com/ygqygq2/p/6045279.html\">https://www.cnblogs.com/ygqygq2/p/6045279.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/805dc6576b79\">https://www.jianshu.com/p/805dc6576b79</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>公司服务器迁徙之后，因为数据库数据量太大，用备份的数据恢复到从库的方式过于耗费时间，再加上数据库本就是docker方式启动的，以前只是按照文档一步步搭建主从数据库，今天有时间就好好研究一下原理，记录一下偷懒时遇到的问题。</p>\n<h3 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h3><p>注：本方案是为了应对公司项目做的处理，所以处理方式有些偏向与容器化部署项目的记录方案，比如公司本有一台运行中的docker mysql数据库，扩容另台或多台从数据库时可用该方案。</p>\n<h4 id=\"备份主库挂载文件夹到从库服务器\"><a href=\"#备份主库挂载文件夹到从库服务器\" class=\"headerlink\" title=\"备份主库挂载文件夹到从库服务器\"></a>备份主库挂载文件夹到从库服务器</h4><p>备份文件夹时最好先停止docker容器，或锁表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush tables <span class=\"keyword\">with</span> read lock</span><br></pre></td></tr></table></figure>\n<p>备份完成，再恢复数据写入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">unlock tables</span><br></pre></td></tr></table></figure>\n<h4 id=\"如有设置过主从，删除相关表数据，重置设置\"><a href=\"#如有设置过主从，删除相关表数据，重置设置\" class=\"headerlink\" title=\"如有设置过主从，删除相关表数据，重置设置\"></a>如有设置过主从，删除相关表数据，重置设置</h4><p>截断<code>mysql</code>数据库下的<code>slave_master_info</code>和<code>slave_relay_log_info</code>两个表</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/12/174758-0.png\" alt=\"image-20240712174756001\"></p>\n<p>删除挂载出来的文件夹下的所有<code>relay log</code> 文件（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/12/175817-0.png\" alt=\"image-20240712175814774\"></p>\n<p>数据库中运行以下命令重置状态</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">reset slave;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新备库的server-uuid\"><a href=\"#更新备库的server-uuid\" class=\"headerlink\" title=\"更新备库的server-uuid\"></a>更新备库的server-uuid</h4><p>主库和从库的server-uuid不能相同，这里是直接拷贝文件，所以要手动改配置。用以下命令获取UUID</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> UUID();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/100910-0.png\" alt=\"image-20240715100907937\"></p>\n<p>更新<code>auto.cnf</code>文件中的<code>server-uuid</code>设置（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/101813-0.png\" alt=\"image-20240715101804553\"></p>\n<h4 id=\"my-cnf文件配置\"><a href=\"#my-cnf文件配置\" class=\"headerlink\" title=\"my.cnf文件配置\"></a>my.cnf文件配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\">datadir = /usr/local/mysql/data</span><br><span class=\"line\">pid-file = /usr/local/mysql/data/mysql.pid</span><br><span class=\"line\">log-error = /usr/local/mysql/data/mysql.err</span><br><span class=\"line\"></span><br><span class=\"line\">server-id = 1 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#另一个改成2</span><br><span class=\"line\">auto_increment_offset = 1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#奇数ID，另一个改成偶数ID</span><br><span class=\"line\">auto_increment_increment = 2                                            #ID生成步长改成2</span><br><span class=\"line\"></span><br><span class=\"line\">log-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此项</span><br><span class=\"line\">binlog-format=ROW</span><br><span class=\"line\"># binlog-row-p_w_picpath=minimal</span><br><span class=\"line\">#将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启</span><br><span class=\"line\">log-slave-updates=true\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=true</span><br><span class=\"line\">master-info-repository=TABLE</span><br><span class=\"line\">relay-log-info-repository=TABLE</span><br><span class=\"line\">sync-master-info=1</span><br><span class=\"line\">slave-parallel-workers=0</span><br><span class=\"line\">sync_binlog=0</span><br><span class=\"line\">binlog-checksum=CRC32</span><br><span class=\"line\">master-verify-checksum=1</span><br><span class=\"line\">slave-sql-verify-checksum=1</span><br><span class=\"line\">binlog-rows-query-log_events=1</span><br><span class=\"line\">#expire_logs_days=5</span><br><span class=\"line\">max_binlog_size=1024M                                                   #binlog单文件最大值</span><br><span class=\"line\"></span><br><span class=\"line\">replicate-ignore-db = mysql                                             #忽略不同步主从的数据库</span><br><span class=\"line\">replicate-ignore-db = information_schema</span><br><span class=\"line\">replicate-ignore-db = performance_schema</span><br><span class=\"line\">replicate-ignore-db = test</span><br><span class=\"line\">replicate-ignore-db = zabbix</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_connect_errors = 30</span><br><span class=\"line\"></span><br><span class=\"line\">skip-character-set-client-handshake                                     #忽略应用程序想要设置的其他字符集</span><br><span class=\"line\">init-connect=&#x27;SET NAMES utf8&#x27;                                           #连接时执行的SQL</span><br><span class=\"line\">character-set-server=utf8                                               #服务端默认字符集</span><br><span class=\"line\">wait_timeout=1800                                                       #请求的最大连接时间</span><br><span class=\"line\">interactive_timeout=1800                                                #和上一参数同时修改才会生效</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES                     #sql模式</span><br><span class=\"line\">max_allowed_packet = 10M</span><br><span class=\"line\">bulk_insert_buffer_size = 8M</span><br><span class=\"line\">query_cache_type = 1</span><br><span class=\"line\">query_cache_size = 128M</span><br><span class=\"line\">query_cache_limit = 4M</span><br><span class=\"line\">key_buffer_size = 256M</span><br><span class=\"line\">read_buffer_size = 16K</span><br><span class=\"line\"></span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">long_query_time = 6</span><br><span class=\"line\">slow_query_log_file=slow-query.log</span><br><span class=\"line\">innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\">innodb_log_buffer_size = 16M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">no-auto-rehash</span><br><span class=\"line\"></span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size = 20M</span><br><span class=\"line\">sort_buffer_size = 20M</span><br><span class=\"line\">read_buffer = 2M</span><br><span class=\"line\">write_buffer = 2M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqlhotcopy]</span><br><span class=\"line\">interactive-timeout</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet = 16M</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加主从同步账户\"><a href=\"#添加主从同步账户\" class=\"headerlink\" title=\"添加主从同步账户\"></a>添加主从同步账户</h4><p>master0</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> replication slave <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;repl&#x27;</span>@<span class=\"string\">&#x27;master1-ip&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>master1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> replication slave <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;repl&#x27;</span>@<span class=\"string\">&#x27;master0-ip&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>注：为了数据安全，用户最好指定IP而非<code>%</code></p>\n<h4 id=\"查看两个数据库的master状态\"><a href=\"#查看两个数据库的master状态\" class=\"headerlink\" title=\"查看两个数据库的master状态\"></a>查看两个数据库的master状态</h4><p>命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> master status;</span><br></pre></td></tr></table></figure>\n<p>返回如下图所示，记住被框住的两个数据，后面有用：</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/104554-0.png\" alt=\"image-20240715104551372\"></p>\n<h4 id=\"配置同步信息\"><a href=\"#配置同步信息\" class=\"headerlink\" title=\"配置同步信息\"></a>配置同步信息</h4><p>Master0命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master <span class=\"keyword\">to</span></span><br><span class=\"line\">master_host<span class=\"operator\">=</span><span class=\"string\">&#x27;master1-ip&#x27;</span>, # 指定IP</span><br><span class=\"line\">master_port<span class=\"operator\">=</span><span class=\"number\">3306</span>, # 指定端口</span><br><span class=\"line\">master_user<span class=\"operator\">=</span><span class=\"string\">&#x27;repl&#x27;</span>, # 指定用户名</span><br><span class=\"line\">master_password<span class=\"operator\">=</span><span class=\"string\">&#x27;123456&#x27;</span>, # 指定用户名字</span><br><span class=\"line\">master_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;mysql-master1-bin.000001&#x27;</span>, # 指定上一步中返回文件名</span><br><span class=\"line\">master_log_pos<span class=\"operator\">=</span><span class=\"number\">582</span>; # 指定上一步中返回的步数</span><br></pre></td></tr></table></figure>\n<p>然后启动主从:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">start</span> slave;</span><br></pre></td></tr></table></figure>\n<p>查看状态：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> slave status\\G # 注：这里没有分号</span><br></pre></td></tr></table></figure>\n<p>显示如下图：</p>\n<p><img src=\"https://images.jzwfan.com/image/2024/07/15/110015-0.png\" alt=\"image-20240715110013349\"></p>\n<p>然后在master1上重复此步骤。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>如果以前做过主从，要清理主从配置</li>\n<li>如果不是导入的，而是和我一样直接复制docker挂载的文件夹时要改server-uuid</li>\n</ul>\n<p>参考地址：</p>\n<p><a href=\"https://www.cnblogs.com/ygqygq2/p/6045279.html\">https://www.cnblogs.com/ygqygq2/p/6045279.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/805dc6576b79\">https://www.jianshu.com/p/805dc6576b79</a></p>\n"},{"title":"系统操作日志相关","cover":"/img/cover/1.jpg","hide":false,"date":"2024-09-18T03:02:27.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\nlinux系统的一些日志系统整理。\n\n---\n\n### 查看用户操作日志\n\n```shell\nlast\t\t#查看最近登录的账户的信息\nlastlog\t\t#查看所有账户的最近一次登录信息\n```\n\n### 查看用户的操作记录 ： 到用户家目录下查看.bash_history文件\n\n```shell\n cat /home/{username}/.bash_history\n```\n\n### 设置操作记录时间格式\n\n```shell\necho 'export HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S \"' >> /etc/bash.bashrc \necho 'export HISTSIZE=-1' >> /etc/bash.bashrc # -1为保存所有\necho 'HISTTIMEFORMAT=\"%F %T \"' >> /etc/profile\nsource /etc/profile\n```\n\n\n\n","source":"_posts/linux/log.md","raw":"---\ntitle: 系统操作日志相关\ncover: /img/cover/1.jpg\nhide: false\ndate: 2024-09-18 11:02:27\npermalink: linux/log.html\ntags:\n  - linux\ncategories:\n  - Linux\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n\n---\n\n### 前言\n\nlinux系统的一些日志系统整理。\n\n---\n\n### 查看用户操作日志\n\n```shell\nlast\t\t#查看最近登录的账户的信息\nlastlog\t\t#查看所有账户的最近一次登录信息\n```\n\n### 查看用户的操作记录 ： 到用户家目录下查看.bash_history文件\n\n```shell\n cat /home/{username}/.bash_history\n```\n\n### 设置操作记录时间格式\n\n```shell\necho 'export HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S \"' >> /etc/bash.bashrc \necho 'export HISTSIZE=-1' >> /etc/bash.bashrc # -1为保存所有\necho 'HISTTIMEFORMAT=\"%F %T \"' >> /etc/profile\nsource /etc/profile\n```\n\n\n\n","slug":"linux/log","published":1,"updated":"2025-03-18T09:16:05.005Z","__permalink":"linux/log.html","_id":"cm3fmnou10000x9qf3gg8gnsi","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>linux系统的一些日志系统整理。</p>\n<hr>\n<h3 id=\"查看用户操作日志\"><a href=\"#查看用户操作日志\" class=\"headerlink\" title=\"查看用户操作日志\"></a>查看用户操作日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">last\t\t#查看最近登录的账户的信息</span><br><span class=\"line\">lastlog\t\t#查看所有账户的最近一次登录信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看用户的操作记录-：-到用户家目录下查看-bash-history文件\"><a href=\"#查看用户的操作记录-：-到用户家目录下查看-bash-history文件\" class=\"headerlink\" title=\"查看用户的操作记录 ： 到用户家目录下查看.bash_history文件\"></a>查看用户的操作记录 ： 到用户家目录下查看.bash_history文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /home/&#123;username&#125;/.bash_history</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置操作记录时间格式\"><a href=\"#设置操作记录时间格式\" class=\"headerlink\" title=\"设置操作记录时间格式\"></a>设置操作记录时间格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#x27;export HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S &quot;&#x27; &gt;&gt; /etc/bash.bashrc </span><br><span class=\"line\">echo &#x27;export HISTSIZE=-1&#x27; &gt;&gt; /etc/bash.bashrc # -1为保存所有</span><br><span class=\"line\">echo &#x27;HISTTIMEFORMAT=&quot;%F %T &quot;&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>linux系统的一些日志系统整理。</p>\n<hr>\n<h3 id=\"查看用户操作日志\"><a href=\"#查看用户操作日志\" class=\"headerlink\" title=\"查看用户操作日志\"></a>查看用户操作日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">last\t\t#查看最近登录的账户的信息</span><br><span class=\"line\">lastlog\t\t#查看所有账户的最近一次登录信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看用户的操作记录-：-到用户家目录下查看-bash-history文件\"><a href=\"#查看用户的操作记录-：-到用户家目录下查看-bash-history文件\" class=\"headerlink\" title=\"查看用户的操作记录 ： 到用户家目录下查看.bash_history文件\"></a>查看用户的操作记录 ： 到用户家目录下查看.bash_history文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /home/&#123;username&#125;/.bash_history</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置操作记录时间格式\"><a href=\"#设置操作记录时间格式\" class=\"headerlink\" title=\"设置操作记录时间格式\"></a>设置操作记录时间格式</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#x27;export HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S &quot;&#x27; &gt;&gt; /etc/bash.bashrc </span><br><span class=\"line\">echo &#x27;export HISTSIZE=-1&#x27; &gt;&gt; /etc/bash.bashrc # -1为保存所有</span><br><span class=\"line\">echo &#x27;HISTTIMEFORMAT=&quot;%F %T &quot;&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n"},{"title":"自建镜像仓库","cover":"/img/cover/14.jpg","hide":false,"date":"2024-11-13T08:39:46.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n目前国内把docker镜像仓库墙了，很多服务器要更新新的镜像都要用本地导入的方式更新镜像，多台服务器用起来就很麻烦，同样的，家里的nas群晖也没办法很好的用docker了，为了以后方便，又因为自己博客网站服务器就在香港，可以用这个服务器搭建一个私人镜像仓库。\n\n---\n\n### 准备工作\n\n- 服务器：centos7服务器 -1核2G，40G硬盘（自己用，目前还不用扩充硬盘）\n- docker镜像：docker.io/library/registry:latest\n\n### 搭建服务端\n\n#### 拉取镜像\n\n```shell\ndocker pull registry\n```\n\n#### 创建相关文件夹\n\n本人项目放在`/data/docker-space/docker-registry-deploy`文件夹下，以下所有涉及到文件和文件夹相关的命令都是已该文件夹为根目录。\n\n```shell\nmkdir auth config data\n```\n\n注：`auth`文件夹存放加密的用户名密码文件`htpasswd`，`config`文件夹存放容器的配置文件`config.yml`，`data`文件夹挂载上传的镜像文件。\n\n#### 创建用户加密文件：htpasswd\n\n```shell\ndocker run --entrypoint htpasswd registry:latest -Bbn name password123  > ./auth/htpasswd\n```\n\n注：以上方式我这边报以下错误:\n\n```log\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: \"htpasswd\": executable file not found in $PATH: unknown.\n```\n\n本人查询到别的处理方式是安装httpd，用该软件创建加密文件\n\n```shell\n# 1、安装httpd软件\nyum install httpd\n# 2、用该软件创建用户密码加密文件\nhtpasswd -Bbn test 123456  > auth/htpasswd\n```\n\n#### 编写配置文件：config.yml\n\n配置文件内容如下：\n\n```yaml\nversion: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  delete:\n    enabled: true\n  cache:\n    blobdescriptor: inmemory\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\nthreshold: 3\n```\n\n#### 启动创建与运行脚本\n\n```shell\ndocker run -d -p 5000:5000 --restart=always  --name=registry \\\n-v $PWD/config/:/etc/docker/registry/ \\\n-v $PWD/auth/:/auth/ \\\n-e \"REGISTRY_AUTH=htpasswd\" \\\n-e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v $PWD/data/:/var/lib/registry/ \\\nregistry:latest\n```\n\n#### 验证服务可用性\n\n```shell\n# 无认证的私有仓库：\ncurl -X GET http://ip:port/v2/_catalog\n# 带认证的私有仓库\ncurl -u username:password -X GET http://ip:port/v2/_catalog\n# 带认证的不带-u参数，因验证不通过会报如下错误：\n{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"authentication required\",\"detail\":[{\"Type\":\"registry\",\"Class\":\"\",\"Name\":\"catalog\",\"Action\":\"*\"}]}]}\n```\n\n### 客户端设置\n\n编辑 `/etc/docker/deamon.json`文件（如果没有自己创建该文件）,添加以下内容\n\n```shell\n{\"insecure-registries\":[\"http://ip:port\",\"http://ip\"]}\n```\n\n说明：把IP改成服务器IP，端口一般是5000\n\n重启docker服务，命令如下：\n\n```shell\n# 更新配置\nsystemctl daemon-reload\n# 重启服务\nsystemctl restart docker\n```\n\n在群晖ContainerManager 插件中要改以下文件：\n\n```shell\nvi /var/packages/ContainerManager/etc/dockerd.json\n```\n\n然后重启插件\n\n### 清理仓库镜像\n\n这个我得回去找找，以前不写博客，写过一个清理脚本，不知道还能不能找回来。\n\n---\n\n~~参考~~抄袭文章：\n\n[搭建docker私有仓库 配置用户名密码](https://blog.csdn.net/qq_38637558/article/details/99603071)\n\n[docker 私人仓库 设置密码报错（已解决）](https://blog.csdn.net/m0_61209018/article/details/121698444)\n\n","source":"_posts/docker/自建镜像仓库.md","raw":"---\ntitle: 自建镜像仓库\ncover: /img/cover/14.jpg\nhide: false\ndate: 2024-11-13 16:39:46\npermalink: docker/docker-registry.html\ntags:\n - docker\ncategories:\n - Docker\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n目前国内把docker镜像仓库墙了，很多服务器要更新新的镜像都要用本地导入的方式更新镜像，多台服务器用起来就很麻烦，同样的，家里的nas群晖也没办法很好的用docker了，为了以后方便，又因为自己博客网站服务器就在香港，可以用这个服务器搭建一个私人镜像仓库。\n\n---\n\n### 准备工作\n\n- 服务器：centos7服务器 -1核2G，40G硬盘（自己用，目前还不用扩充硬盘）\n- docker镜像：docker.io/library/registry:latest\n\n### 搭建服务端\n\n#### 拉取镜像\n\n```shell\ndocker pull registry\n```\n\n#### 创建相关文件夹\n\n本人项目放在`/data/docker-space/docker-registry-deploy`文件夹下，以下所有涉及到文件和文件夹相关的命令都是已该文件夹为根目录。\n\n```shell\nmkdir auth config data\n```\n\n注：`auth`文件夹存放加密的用户名密码文件`htpasswd`，`config`文件夹存放容器的配置文件`config.yml`，`data`文件夹挂载上传的镜像文件。\n\n#### 创建用户加密文件：htpasswd\n\n```shell\ndocker run --entrypoint htpasswd registry:latest -Bbn name password123  > ./auth/htpasswd\n```\n\n注：以上方式我这边报以下错误:\n\n```log\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: \"htpasswd\": executable file not found in $PATH: unknown.\n```\n\n本人查询到别的处理方式是安装httpd，用该软件创建加密文件\n\n```shell\n# 1、安装httpd软件\nyum install httpd\n# 2、用该软件创建用户密码加密文件\nhtpasswd -Bbn test 123456  > auth/htpasswd\n```\n\n#### 编写配置文件：config.yml\n\n配置文件内容如下：\n\n```yaml\nversion: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  delete:\n    enabled: true\n  cache:\n    blobdescriptor: inmemory\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\nthreshold: 3\n```\n\n#### 启动创建与运行脚本\n\n```shell\ndocker run -d -p 5000:5000 --restart=always  --name=registry \\\n-v $PWD/config/:/etc/docker/registry/ \\\n-v $PWD/auth/:/auth/ \\\n-e \"REGISTRY_AUTH=htpasswd\" \\\n-e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v $PWD/data/:/var/lib/registry/ \\\nregistry:latest\n```\n\n#### 验证服务可用性\n\n```shell\n# 无认证的私有仓库：\ncurl -X GET http://ip:port/v2/_catalog\n# 带认证的私有仓库\ncurl -u username:password -X GET http://ip:port/v2/_catalog\n# 带认证的不带-u参数，因验证不通过会报如下错误：\n{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"authentication required\",\"detail\":[{\"Type\":\"registry\",\"Class\":\"\",\"Name\":\"catalog\",\"Action\":\"*\"}]}]}\n```\n\n### 客户端设置\n\n编辑 `/etc/docker/deamon.json`文件（如果没有自己创建该文件）,添加以下内容\n\n```shell\n{\"insecure-registries\":[\"http://ip:port\",\"http://ip\"]}\n```\n\n说明：把IP改成服务器IP，端口一般是5000\n\n重启docker服务，命令如下：\n\n```shell\n# 更新配置\nsystemctl daemon-reload\n# 重启服务\nsystemctl restart docker\n```\n\n在群晖ContainerManager 插件中要改以下文件：\n\n```shell\nvi /var/packages/ContainerManager/etc/dockerd.json\n```\n\n然后重启插件\n\n### 清理仓库镜像\n\n这个我得回去找找，以前不写博客，写过一个清理脚本，不知道还能不能找回来。\n\n---\n\n~~参考~~抄袭文章：\n\n[搭建docker私有仓库 配置用户名密码](https://blog.csdn.net/qq_38637558/article/details/99603071)\n\n[docker 私人仓库 设置密码报错（已解决）](https://blog.csdn.net/m0_61209018/article/details/121698444)\n\n","slug":"docker/自建镜像仓库","published":1,"updated":"2025-03-18T09:17:15.952Z","__permalink":"docker/docker-registry.html","_id":"cm3foja9k00005rqfcdkj10gz","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前国内把docker镜像仓库墙了，很多服务器要更新新的镜像都要用本地导入的方式更新镜像，多台服务器用起来就很麻烦，同样的，家里的nas群晖也没办法很好的用docker了，为了以后方便，又因为自己博客网站服务器就在香港，可以用这个服务器搭建一个私人镜像仓库。</p>\n<hr>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>服务器：centos7服务器 -1核2G，40G硬盘（自己用，目前还不用扩充硬盘）</li>\n<li>docker镜像：docker.io/library/registry:latest</li>\n</ul>\n<h3 id=\"搭建服务端\"><a href=\"#搭建服务端\" class=\"headerlink\" title=\"搭建服务端\"></a>搭建服务端</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull registry</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建相关文件夹\"><a href=\"#创建相关文件夹\" class=\"headerlink\" title=\"创建相关文件夹\"></a>创建相关文件夹</h4><p>本人项目放在<code>/data/docker-space/docker-registry-deploy</code>文件夹下，以下所有涉及到文件和文件夹相关的命令都是已该文件夹为根目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir auth config data</span><br></pre></td></tr></table></figure>\n<p>注：<code>auth</code>文件夹存放加密的用户名密码文件<code>htpasswd</code>，<code>config</code>文件夹存放容器的配置文件<code>config.yml</code>，<code>data</code>文件夹挂载上传的镜像文件。</p>\n<h4 id=\"创建用户加密文件：htpasswd\"><a href=\"#创建用户加密文件：htpasswd\" class=\"headerlink\" title=\"创建用户加密文件：htpasswd\"></a>创建用户加密文件：htpasswd</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --entrypoint htpasswd registry:latest -Bbn name password123  &gt; ./auth/htpasswd</span><br></pre></td></tr></table></figure>\n<p>注：以上方式我这边报以下错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &quot;htpasswd&quot;: executable file not found in $PATH: unknown.</span><br></pre></td></tr></table></figure>\n<p>本人查询到别的处理方式是安装httpd，用该软件创建加密文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、安装httpd软件</span></span><br><span class=\"line\">yum install httpd</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、用该软件创建用户密码加密文件</span></span><br><span class=\"line\">htpasswd -Bbn test 123456  &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写配置文件：config-yml\"><a href=\"#编写配置文件：config-yml\" class=\"headerlink\" title=\"编写配置文件：config.yml\"></a>编写配置文件：config.yml</h4><p>配置文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">log:</span></span><br><span class=\"line\">  <span class=\"attr\">fields:</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">registry</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">delete:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">blobdescriptor:</span> <span class=\"string\">inmemory</span></span><br><span class=\"line\">  <span class=\"attr\">filesystem:</span></span><br><span class=\"line\">    <span class=\"attr\">rootdirectory:</span> <span class=\"string\">/var/lib/registry</span></span><br><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"attr\">addr:</span> <span class=\"string\">:5000</span></span><br><span class=\"line\">  <span class=\"attr\">headers:</span></span><br><span class=\"line\">    <span class=\"attr\">X-Content-Type-Options:</span> [<span class=\"string\">nosniff</span>]</span><br><span class=\"line\"><span class=\"attr\">health:</span></span><br><span class=\"line\">  <span class=\"attr\">storagedriver:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\"><span class=\"attr\">threshold:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"启动创建与运行脚本\"><a href=\"#启动创建与运行脚本\" class=\"headerlink\" title=\"启动创建与运行脚本\"></a>启动创建与运行脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always  --name=registry \\</span><br><span class=\"line\">-v $PWD/config/:/etc/docker/registry/ \\</span><br><span class=\"line\">-v $PWD/auth/:/auth/ \\</span><br><span class=\"line\">-e &quot;REGISTRY_AUTH=htpasswd&quot; \\</span><br><span class=\"line\">-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\</span><br><span class=\"line\">-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\</span><br><span class=\"line\">-v $PWD/data/:/var/lib/registry/ \\</span><br><span class=\"line\">registry:latest</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证服务可用性\"><a href=\"#验证服务可用性\" class=\"headerlink\" title=\"验证服务可用性\"></a>验证服务可用性</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">无认证的私有仓库：</span></span><br><span class=\"line\">curl -X GET http://ip:port/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">带认证的私有仓库</span></span><br><span class=\"line\">curl -u username:password -X GET http://ip:port/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">带认证的不带-u参数，因验证不通过会报如下错误：</span></span><br><span class=\"line\">&#123;&quot;errors&quot;:[&#123;&quot;code&quot;:&quot;UNAUTHORIZED&quot;,&quot;message&quot;:&quot;authentication required&quot;,&quot;detail&quot;:[&#123;&quot;Type&quot;:&quot;registry&quot;,&quot;Class&quot;:&quot;&quot;,&quot;Name&quot;:&quot;catalog&quot;,&quot;Action&quot;:&quot;*&quot;&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端设置\"><a href=\"#客户端设置\" class=\"headerlink\" title=\"客户端设置\"></a>客户端设置</h3><p>编辑 <code>/etc/docker/deamon.json</code>文件（如果没有自己创建该文件）,添加以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;insecure-registries&quot;:[&quot;http://ip:port&quot;,&quot;http://ip&quot;]&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：把IP改成服务器IP，端口一般是5000</p>\n<p>重启docker服务，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启服务</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>在群晖ContainerManager 插件中要改以下文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /var/packages/ContainerManager/etc/dockerd.json</span><br></pre></td></tr></table></figure>\n<p>然后重启插件</p>\n<h3 id=\"清理仓库镜像\"><a href=\"#清理仓库镜像\" class=\"headerlink\" title=\"清理仓库镜像\"></a>清理仓库镜像</h3><p>这个我得回去找找，以前不写博客，写过一个清理脚本，不知道还能不能找回来。</p>\n<hr>\n<p><del>参考</del>抄袭文章：</p>\n<p><a href=\"https://blog.csdn.net/qq_38637558/article/details/99603071\">搭建docker私有仓库 配置用户名密码</a></p>\n<p><a href=\"https://blog.csdn.net/m0_61209018/article/details/121698444\">docker 私人仓库 设置密码报错（已解决）</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前国内把docker镜像仓库墙了，很多服务器要更新新的镜像都要用本地导入的方式更新镜像，多台服务器用起来就很麻烦，同样的，家里的nas群晖也没办法很好的用docker了，为了以后方便，又因为自己博客网站服务器就在香港，可以用这个服务器搭建一个私人镜像仓库。</p>\n<hr>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>服务器：centos7服务器 -1核2G，40G硬盘（自己用，目前还不用扩充硬盘）</li>\n<li>docker镜像：docker.io/library/registry:latest</li>\n</ul>\n<h3 id=\"搭建服务端\"><a href=\"#搭建服务端\" class=\"headerlink\" title=\"搭建服务端\"></a>搭建服务端</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull registry</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建相关文件夹\"><a href=\"#创建相关文件夹\" class=\"headerlink\" title=\"创建相关文件夹\"></a>创建相关文件夹</h4><p>本人项目放在<code>/data/docker-space/docker-registry-deploy</code>文件夹下，以下所有涉及到文件和文件夹相关的命令都是已该文件夹为根目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir auth config data</span><br></pre></td></tr></table></figure>\n<p>注：<code>auth</code>文件夹存放加密的用户名密码文件<code>htpasswd</code>，<code>config</code>文件夹存放容器的配置文件<code>config.yml</code>，<code>data</code>文件夹挂载上传的镜像文件。</p>\n<h4 id=\"创建用户加密文件：htpasswd\"><a href=\"#创建用户加密文件：htpasswd\" class=\"headerlink\" title=\"创建用户加密文件：htpasswd\"></a>创建用户加密文件：htpasswd</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --entrypoint htpasswd registry:latest -Bbn name password123  &gt; ./auth/htpasswd</span><br></pre></td></tr></table></figure>\n<p>注：以上方式我这边报以下错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &quot;htpasswd&quot;: executable file not found in $PATH: unknown.</span><br></pre></td></tr></table></figure>\n<p>本人查询到别的处理方式是安装httpd，用该软件创建加密文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、安装httpd软件</span></span><br><span class=\"line\">yum install httpd</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、用该软件创建用户密码加密文件</span></span><br><span class=\"line\">htpasswd -Bbn test 123456  &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写配置文件：config-yml\"><a href=\"#编写配置文件：config-yml\" class=\"headerlink\" title=\"编写配置文件：config.yml\"></a>编写配置文件：config.yml</h4><p>配置文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">log:</span></span><br><span class=\"line\">  <span class=\"attr\">fields:</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">registry</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">delete:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">blobdescriptor:</span> <span class=\"string\">inmemory</span></span><br><span class=\"line\">  <span class=\"attr\">filesystem:</span></span><br><span class=\"line\">    <span class=\"attr\">rootdirectory:</span> <span class=\"string\">/var/lib/registry</span></span><br><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"attr\">addr:</span> <span class=\"string\">:5000</span></span><br><span class=\"line\">  <span class=\"attr\">headers:</span></span><br><span class=\"line\">    <span class=\"attr\">X-Content-Type-Options:</span> [<span class=\"string\">nosniff</span>]</span><br><span class=\"line\"><span class=\"attr\">health:</span></span><br><span class=\"line\">  <span class=\"attr\">storagedriver:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\"><span class=\"attr\">threshold:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"启动创建与运行脚本\"><a href=\"#启动创建与运行脚本\" class=\"headerlink\" title=\"启动创建与运行脚本\"></a>启动创建与运行脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always  --name=registry \\</span><br><span class=\"line\">-v $PWD/config/:/etc/docker/registry/ \\</span><br><span class=\"line\">-v $PWD/auth/:/auth/ \\</span><br><span class=\"line\">-e &quot;REGISTRY_AUTH=htpasswd&quot; \\</span><br><span class=\"line\">-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\</span><br><span class=\"line\">-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\</span><br><span class=\"line\">-v $PWD/data/:/var/lib/registry/ \\</span><br><span class=\"line\">registry:latest</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证服务可用性\"><a href=\"#验证服务可用性\" class=\"headerlink\" title=\"验证服务可用性\"></a>验证服务可用性</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">无认证的私有仓库：</span></span><br><span class=\"line\">curl -X GET http://ip:port/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">带认证的私有仓库</span></span><br><span class=\"line\">curl -u username:password -X GET http://ip:port/v2/_catalog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">带认证的不带-u参数，因验证不通过会报如下错误：</span></span><br><span class=\"line\">&#123;&quot;errors&quot;:[&#123;&quot;code&quot;:&quot;UNAUTHORIZED&quot;,&quot;message&quot;:&quot;authentication required&quot;,&quot;detail&quot;:[&#123;&quot;Type&quot;:&quot;registry&quot;,&quot;Class&quot;:&quot;&quot;,&quot;Name&quot;:&quot;catalog&quot;,&quot;Action&quot;:&quot;*&quot;&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端设置\"><a href=\"#客户端设置\" class=\"headerlink\" title=\"客户端设置\"></a>客户端设置</h3><p>编辑 <code>/etc/docker/deamon.json</code>文件（如果没有自己创建该文件）,添加以下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;insecure-registries&quot;:[&quot;http://ip:port&quot;,&quot;http://ip&quot;]&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：把IP改成服务器IP，端口一般是5000</p>\n<p>重启docker服务，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启服务</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>在群晖ContainerManager 插件中要改以下文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /var/packages/ContainerManager/etc/dockerd.json</span><br></pre></td></tr></table></figure>\n<p>然后重启插件</p>\n<h3 id=\"清理仓库镜像\"><a href=\"#清理仓库镜像\" class=\"headerlink\" title=\"清理仓库镜像\"></a>清理仓库镜像</h3><p>这个我得回去找找，以前不写博客，写过一个清理脚本，不知道还能不能找回来。</p>\n<hr>\n<p><del>参考</del>抄袭文章：</p>\n<p><a href=\"https://blog.csdn.net/qq_38637558/article/details/99603071\">搭建docker私有仓库 配置用户名密码</a></p>\n<p><a href=\"https://blog.csdn.net/m0_61209018/article/details/121698444\">docker 私人仓库 设置密码报错（已解决）</a></p>\n"},{"title":"conda命令","cover":"/img/cover/3.jpg","hide":false,"date":"2025-03-11T05:48:27.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n记一下conda在Linux系统环境下的安装和应用。\n\n---\n\n### 安装\n\nconda共存在anaconda、miniconda、miniforge、conda等多个不同的工具，这里不过多讨论它们的差别，只讲一下安装miniconda的过程\n\n#### 下载可执行安装文件\n\n文件地址：`https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh`\n\n注：anaconda下载地址为\n\n`https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh`\n\n![](https://images.jzwfan.com/image/2025/03/11/143359-0.png)\n\n#### 执行安装命令\n\n根据提示一直输入`yes`即可\n\n![](https://images.jzwfan.com/image/2025/03/11/144437-0.png)\n\n#### 验证是否安装完成\n\n运行`conda --version`打印出版本号证明已安装成功\n\n![image-20250311145758305](https://images.jzwfan.com/image/2025/03/11/145803-0.png)\n\n如果提示不存在的命令，在`.bashrc`文件中加入以下命令再刷新命令即可，具体命令如下：\n\n```shell\ncd ~ # 切换到家目录\n# 在.bashrc最后一行加入 export PATH=\"/root/miniconda3/bin:$PATH\" 代码\necho 'export PATH=\"/root/miniconda3/bin:$PATH\"' > .bashrc \n# 更新环境变量\nsource .bashrc \n```\n\n### 应用\n\n#### 创建环境\n\n创建python版本为3.6的环境，取名p36\n\n```shell\nconda create -n p36 python=3.6\n```\n\n#### 激活\\切换环境\n\n```shell\nconda activate p36\n```\n\n#### 退出环境\n\n```shell\nconda deactivate\n```\n\n#### 删除环境\n\n```shell\nconda remove -n p36 --all\n```\n\n#### 查看已有环境\n\n```shell\nconda info --env\n```\n\n#### 在环境内安装包\n\n已pymsql包为例\n\n```shell\nconda activate p36 # 切换到指定环境\nconda install pymysql # 安装pymsql包\n```\n\n注：如果conda包安装不成功，可用pip来安装\n\n### 后记\n\nanaconda、miniconda、miniforge、conda等多个不同的工具区别参考以下文章：\n\nhttps://zhuanlan.zhihu.com/p/518926990\n\n安装参考以下文章：\n\nhttps://blog.csdn.net/wyf2017/article/details/118676765\n\n","source":"_posts/python/conda命令.md","raw":"---\ntitle: conda命令\ncover: /img/cover/3.jpg\nhide: false\ndate: 2025-03-11 13:48:27\npermalink: python/conda-command.html\ntags:\n - python\n - conda\ncategories:\n - Python\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n记一下conda在Linux系统环境下的安装和应用。\n\n---\n\n### 安装\n\nconda共存在anaconda、miniconda、miniforge、conda等多个不同的工具，这里不过多讨论它们的差别，只讲一下安装miniconda的过程\n\n#### 下载可执行安装文件\n\n文件地址：`https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh`\n\n注：anaconda下载地址为\n\n`https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh`\n\n![](https://images.jzwfan.com/image/2025/03/11/143359-0.png)\n\n#### 执行安装命令\n\n根据提示一直输入`yes`即可\n\n![](https://images.jzwfan.com/image/2025/03/11/144437-0.png)\n\n#### 验证是否安装完成\n\n运行`conda --version`打印出版本号证明已安装成功\n\n![image-20250311145758305](https://images.jzwfan.com/image/2025/03/11/145803-0.png)\n\n如果提示不存在的命令，在`.bashrc`文件中加入以下命令再刷新命令即可，具体命令如下：\n\n```shell\ncd ~ # 切换到家目录\n# 在.bashrc最后一行加入 export PATH=\"/root/miniconda3/bin:$PATH\" 代码\necho 'export PATH=\"/root/miniconda3/bin:$PATH\"' > .bashrc \n# 更新环境变量\nsource .bashrc \n```\n\n### 应用\n\n#### 创建环境\n\n创建python版本为3.6的环境，取名p36\n\n```shell\nconda create -n p36 python=3.6\n```\n\n#### 激活\\切换环境\n\n```shell\nconda activate p36\n```\n\n#### 退出环境\n\n```shell\nconda deactivate\n```\n\n#### 删除环境\n\n```shell\nconda remove -n p36 --all\n```\n\n#### 查看已有环境\n\n```shell\nconda info --env\n```\n\n#### 在环境内安装包\n\n已pymsql包为例\n\n```shell\nconda activate p36 # 切换到指定环境\nconda install pymysql # 安装pymsql包\n```\n\n注：如果conda包安装不成功，可用pip来安装\n\n### 后记\n\nanaconda、miniconda、miniforge、conda等多个不同的工具区别参考以下文章：\n\nhttps://zhuanlan.zhihu.com/p/518926990\n\n安装参考以下文章：\n\nhttps://blog.csdn.net/wyf2017/article/details/118676765\n\n","slug":"python/conda命令","published":1,"updated":"2025-03-18T09:15:17.875Z","__permalink":"python/conda-command.html","_id":"cm842o97v00003nqff9mgdjnr","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下conda在Linux系统环境下的安装和应用。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>conda共存在anaconda、miniconda、miniforge、conda等多个不同的工具，这里不过多讨论它们的差别，只讲一下安装miniconda的过程</p>\n<h4 id=\"下载可执行安装文件\"><a href=\"#下载可执行安装文件\" class=\"headerlink\" title=\"下载可执行安装文件\"></a>下载可执行安装文件</h4><p>文件地址：<code>https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></p>\n<p>注：anaconda下载地址为</p>\n<p><code>https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh</code></p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/143359-0.png\" alt=\"\"></p>\n<h4 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h4><p>根据提示一直输入<code>yes</code>即可</p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/144437-0.png\" alt=\"\"></p>\n<h4 id=\"验证是否安装完成\"><a href=\"#验证是否安装完成\" class=\"headerlink\" title=\"验证是否安装完成\"></a>验证是否安装完成</h4><p>运行<code>conda --version</code>打印出版本号证明已安装成功</p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/145803-0.png\" alt=\"image-20250311145758305\"></p>\n<p>如果提示不存在的命令，在<code>.bashrc</code>文件中加入以下命令再刷新命令即可，具体命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~ # 切换到家目录</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在.bashrc最后一行加入 <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;/root/miniconda3/bin:<span class=\"variable\">$PATH</span>&quot;</span> 代码</span></span><br><span class=\"line\">echo &#x27;export PATH=&quot;/root/miniconda3/bin:$PATH&quot;&#x27; &gt; .bashrc </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新环境变量</span></span><br><span class=\"line\">source .bashrc </span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h4><p>创建python版本为3.6的环境，取名p36</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n p36 python=3.6</span><br></pre></td></tr></table></figure>\n<h4 id=\"激活-切换环境\"><a href=\"#激活-切换环境\" class=\"headerlink\" title=\"激活\\切换环境\"></a>激活\\切换环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda activate p36</span><br></pre></td></tr></table></figure>\n<h4 id=\"退出环境\"><a href=\"#退出环境\" class=\"headerlink\" title=\"退出环境\"></a>退出环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda remove -n p36 --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看已有环境\"><a href=\"#查看已有环境\" class=\"headerlink\" title=\"查看已有环境\"></a>查看已有环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda info --env</span><br></pre></td></tr></table></figure>\n<h4 id=\"在环境内安装包\"><a href=\"#在环境内安装包\" class=\"headerlink\" title=\"在环境内安装包\"></a>在环境内安装包</h4><p>已pymsql包为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda activate p36 # 切换到指定环境</span><br><span class=\"line\">conda install pymysql # 安装pymsql包</span><br></pre></td></tr></table></figure>\n<p>注：如果conda包安装不成功，可用pip来安装</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>anaconda、miniconda、miniforge、conda等多个不同的工具区别参考以下文章：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/518926990\">https://zhuanlan.zhihu.com/p/518926990</a></p>\n<p>安装参考以下文章：</p>\n<p><a href=\"https://blog.csdn.net/wyf2017/article/details/118676765\">https://blog.csdn.net/wyf2017/article/details/118676765</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>记一下conda在Linux系统环境下的安装和应用。</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>conda共存在anaconda、miniconda、miniforge、conda等多个不同的工具，这里不过多讨论它们的差别，只讲一下安装miniconda的过程</p>\n<h4 id=\"下载可执行安装文件\"><a href=\"#下载可执行安装文件\" class=\"headerlink\" title=\"下载可执行安装文件\"></a>下载可执行安装文件</h4><p>文件地址：<code>https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></p>\n<p>注：anaconda下载地址为</p>\n<p><code>https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh</code></p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/143359-0.png\" alt=\"\"></p>\n<h4 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h4><p>根据提示一直输入<code>yes</code>即可</p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/144437-0.png\" alt=\"\"></p>\n<h4 id=\"验证是否安装完成\"><a href=\"#验证是否安装完成\" class=\"headerlink\" title=\"验证是否安装完成\"></a>验证是否安装完成</h4><p>运行<code>conda --version</code>打印出版本号证明已安装成功</p>\n<p><img src=\"https://images.jzwfan.com/image/2025/03/11/145803-0.png\" alt=\"image-20250311145758305\"></p>\n<p>如果提示不存在的命令，在<code>.bashrc</code>文件中加入以下命令再刷新命令即可，具体命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~ # 切换到家目录</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在.bashrc最后一行加入 <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;/root/miniconda3/bin:<span class=\"variable\">$PATH</span>&quot;</span> 代码</span></span><br><span class=\"line\">echo &#x27;export PATH=&quot;/root/miniconda3/bin:$PATH&quot;&#x27; &gt; .bashrc </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新环境变量</span></span><br><span class=\"line\">source .bashrc </span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h4><p>创建python版本为3.6的环境，取名p36</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n p36 python=3.6</span><br></pre></td></tr></table></figure>\n<h4 id=\"激活-切换环境\"><a href=\"#激活-切换环境\" class=\"headerlink\" title=\"激活\\切换环境\"></a>激活\\切换环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda activate p36</span><br></pre></td></tr></table></figure>\n<h4 id=\"退出环境\"><a href=\"#退出环境\" class=\"headerlink\" title=\"退出环境\"></a>退出环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda remove -n p36 --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看已有环境\"><a href=\"#查看已有环境\" class=\"headerlink\" title=\"查看已有环境\"></a>查看已有环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda info --env</span><br></pre></td></tr></table></figure>\n<h4 id=\"在环境内安装包\"><a href=\"#在环境内安装包\" class=\"headerlink\" title=\"在环境内安装包\"></a>在环境内安装包</h4><p>已pymsql包为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda activate p36 # 切换到指定环境</span><br><span class=\"line\">conda install pymysql # 安装pymsql包</span><br></pre></td></tr></table></figure>\n<p>注：如果conda包安装不成功，可用pip来安装</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>anaconda、miniconda、miniforge、conda等多个不同的工具区别参考以下文章：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/518926990\">https://zhuanlan.zhihu.com/p/518926990</a></p>\n<p>安装参考以下文章：</p>\n<p><a href=\"https://blog.csdn.net/wyf2017/article/details/118676765\">https://blog.csdn.net/wyf2017/article/details/118676765</a></p>\n"},{"title":"conda占用高CPU问题","cover":"/img/cover/7.jpg","hide":false,"date":"2025-03-11T05:45:24.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"### 前言\n\n前几天在欧拉系统安装了一个miniconda，用来管理python的各版本，本来系统cpu占用为4%左右，安装后cpu占用一直在20%以上。\n\n---\n\n### 定位问题\n\n用`top`命令发现有一个名为conda的进程一直居高不下，百度发现是当前用户 `～/.bashrc`文件（如果用了omz,文件为`～/.zshrc`）中多了以下一段代码\n\n```shell \n\n#>>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/root/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n   if [ -f \"/root/miniconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/root/miniconda3/etc/profile.d/conda.sh\"\n   else\n       export PATH=\"/root/miniconda3/bin:$PATH\" # 这里根据安装的软件不同而有不同变化\n   fi\nfi\n## unset __conda_setup\n# <<< conda initialize <<<\n\n```\n\n### 处理方式\n\n- 1、注释或删除该代码\n- 2、在`～/.bashrc`（`~/.zshrc`）文件最后添加\n\n```shell \n# 安装不同软件文件夹名不同\nexport PATH=\"/root/miniconda3/bin:$PATH\"\n```\n\n---\n\n参考地址：https://blog.csdn.net/weixin_43495948/article/details/129459638\n","source":"_posts/python/conda占用高CPU问题.md","raw":"---\ntitle: conda占用高CPU问题\ncover: /img/cover/7.jpg\nhide: false\ndate: 2025-03-11 13:45:24\npermalink: python/conda-problem0.html\ntags:\n - python\n - conda\ncategories:\n - Python\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n### 前言\n\n前几天在欧拉系统安装了一个miniconda，用来管理python的各版本，本来系统cpu占用为4%左右，安装后cpu占用一直在20%以上。\n\n---\n\n### 定位问题\n\n用`top`命令发现有一个名为conda的进程一直居高不下，百度发现是当前用户 `～/.bashrc`文件（如果用了omz,文件为`～/.zshrc`）中多了以下一段代码\n\n```shell \n\n#>>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/root/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n   if [ -f \"/root/miniconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/root/miniconda3/etc/profile.d/conda.sh\"\n   else\n       export PATH=\"/root/miniconda3/bin:$PATH\" # 这里根据安装的软件不同而有不同变化\n   fi\nfi\n## unset __conda_setup\n# <<< conda initialize <<<\n\n```\n\n### 处理方式\n\n- 1、注释或删除该代码\n- 2、在`～/.bashrc`（`~/.zshrc`）文件最后添加\n\n```shell \n# 安装不同软件文件夹名不同\nexport PATH=\"/root/miniconda3/bin:$PATH\"\n```\n\n---\n\n参考地址：https://blog.csdn.net/weixin_43495948/article/details/129459638\n","slug":"python/conda占用高CPU问题","published":1,"updated":"2025-03-18T09:15:22.763Z","__permalink":"python/conda-problem0.html","_id":"cm842o98000013nqfeoxogsg8","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前几天在欧拉系统安装了一个miniconda，用来管理python的各版本，本来系统cpu占用为4%左右，安装后cpu占用一直在20%以上。</p>\n<hr>\n<h3 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h3><p>用<code>top</code>命令发现有一个名为conda的进程一直居高不下，百度发现是当前用户 <code>～/.bashrc</code>文件（如果用了omz,文件为<code>～/.zshrc</code>）中多了以下一段代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">!! Contents within this block are managed by <span class=\"string\">&#x27;conda init&#x27;</span> !!</span></span><br><span class=\"line\">__conda_setup=&quot;$(&#x27;/root/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class=\"line\">if [ $? -eq 0 ]; then</span><br><span class=\"line\">    eval &quot;$__conda_setup&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   if [ -f &quot;/root/miniconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class=\"line\">        . &quot;/root/miniconda3/etc/profile.d/conda.sh&quot;</span><br><span class=\"line\">   else</span><br><span class=\"line\">       export PATH=&quot;/root/miniconda3/bin:$PATH&quot; # 这里根据安装的软件不同而有不同变化</span><br><span class=\"line\">   fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># unset __conda_setup</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&lt;&lt;&lt; <span class=\"string\">conda initialize &lt;&lt;&lt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h3><ul>\n<li>1、注释或删除该代码</li>\n<li>2、在<code>～/.bashrc</code>（<code>~/.zshrc</code>）文件最后添加</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装不同软件文件夹名不同</span></span><br><span class=\"line\">export PATH=&quot;/root/miniconda3/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://blog.csdn.net/weixin_43495948/article/details/129459638\">https://blog.csdn.net/weixin_43495948/article/details/129459638</a></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前几天在欧拉系统安装了一个miniconda，用来管理python的各版本，本来系统cpu占用为4%左右，安装后cpu占用一直在20%以上。</p>\n<hr>\n<h3 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h3><p>用<code>top</code>命令发现有一个名为conda的进程一直居高不下，百度发现是当前用户 <code>～/.bashrc</code>文件（如果用了omz,文件为<code>～/.zshrc</code>）中多了以下一段代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">!! Contents within this block are managed by <span class=\"string\">&#x27;conda init&#x27;</span> !!</span></span><br><span class=\"line\">__conda_setup=&quot;$(&#x27;/root/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class=\"line\">if [ $? -eq 0 ]; then</span><br><span class=\"line\">    eval &quot;$__conda_setup&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   if [ -f &quot;/root/miniconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class=\"line\">        . &quot;/root/miniconda3/etc/profile.d/conda.sh&quot;</span><br><span class=\"line\">   else</span><br><span class=\"line\">       export PATH=&quot;/root/miniconda3/bin:$PATH&quot; # 这里根据安装的软件不同而有不同变化</span><br><span class=\"line\">   fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># unset __conda_setup</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&lt;&lt;&lt; <span class=\"string\">conda initialize &lt;&lt;&lt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h3><ul>\n<li>1、注释或删除该代码</li>\n<li>2、在<code>～/.bashrc</code>（<code>~/.zshrc</code>）文件最后添加</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装不同软件文件夹名不同</span></span><br><span class=\"line\">export PATH=&quot;/root/miniconda3/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://blog.csdn.net/weixin_43495948/article/details/129459638\">https://blog.csdn.net/weixin_43495948/article/details/129459638</a></p>\n"},{"title":"Linux挂载网络硬盘","cover":"/img/cover/11.jpg","hide":false,"date":"2025-03-04T03:37:28.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\nLinux开机自动挂载smb网络硬盘\n\n---\n\n### 安装`cifs-utils`插件\n\n#### Redhat系\n\n```shell\n# yum 安装\nyum install cifs-utils -y\n# rpm包安装\n# 下载一个cifs-utils的rpm包\nrpm -ivh --nodeps cifs-utils.rpm\n```\n\n#### Debian系\n\n```shell\n# apt 安装\napt install cifs-utils\n```\n\n### 挂载\n\n#### 创建用户名密码配置文件\n\n在`/etc`下创建`samba.config`文件，文件内容如下：\n\n```ini\n# 你自己nas网盘的用户名和密码\nusername=用户名\npassword=密码\n```\n\n注：文件名和文件地址不一定要和我的一样，只要下面挂载命令里统一即可\n\n#### 挂载网盘\n\n```shell\n# 创建挂载文件夹\nmkdir /samba_share\n# 在/etc/fstab文件加入下一行代码\n# 0.0.0.0 替换成自己的IP\n# /nas 替换成自己的网盘共享文件夹地址\n# /samba_share 和本地文件夹地址相同\n# /etc/samba.config 用户名密码的配置文件地址\n//0.0.0.0/nas /samba_share cifs rw,credentials=/etc/samba.config,gid=0,uid=0,rw,iocharset=utf8,file_mode=0777,dir_mode=0777 0 0\n```\n\n注：该方式挂载后，系统启动后就能自动挂载，但如此配置不好，可能导致系统启动不了，需用引导系统进入系统才能修改该文件，如果临时用可以用mount 命令挂载，命令如下：\n\n```shell\nmount.cifs  //10.10.10.1/nas  /home/nas/  -o username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8\n# 或者\nmount -t cifs -o  username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8   //10.10.10.1/nas  /home/nas/ \n# 如果挂载不上，无反应，就在参数上添加vers=2.0\n# 命令参数解析：\nmount                         #挂载命令\n-t                            #挂载文件系统的类型，通常不必指定。mount会自动选择正确的类型(nas有两种格式：nfs、cifs)\n-o iocharset=utf8             [options 主要用来描述设备或档案的挂接方式，\\ 参数iocharset表示指定访问文件系统所用字符集。\\ 路径中如有中文则添加此项，支持中文路径]\nsername=gz                    [nas用户名]\nDomain=nas                    [域名]\npassword=123456               [nas密码]     \n//10.10.10.1/nas              [nas路径]\n/home/nas/                    [挂载路径]\nsec=ntlmssp                   [NTLMSSP (NT LAN Manager Security Support Provider)，是微软提供的安全支持接口协议]\n```\n\n### 后记\n\nmount命令挂载参考以下文章，该方式本人没尝试过\n\nhttps://blog.csdn.net/weixin_39724395/article/details/123429188 \n\n","source":"_posts/linux/Linux挂载网络硬盘.md","raw":"---\ntitle: Linux挂载网络硬盘\ncover: /img/cover/11.jpg\nhide: false\ndate: 2025-03-04 11:37:28\npermalink: linux/network-hard-disk.html\ntags:\n - linux\n - 网络硬盘\ncategories:\n - Linux\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n\n---\n\n### 前言\n\nLinux开机自动挂载smb网络硬盘\n\n---\n\n### 安装`cifs-utils`插件\n\n#### Redhat系\n\n```shell\n# yum 安装\nyum install cifs-utils -y\n# rpm包安装\n# 下载一个cifs-utils的rpm包\nrpm -ivh --nodeps cifs-utils.rpm\n```\n\n#### Debian系\n\n```shell\n# apt 安装\napt install cifs-utils\n```\n\n### 挂载\n\n#### 创建用户名密码配置文件\n\n在`/etc`下创建`samba.config`文件，文件内容如下：\n\n```ini\n# 你自己nas网盘的用户名和密码\nusername=用户名\npassword=密码\n```\n\n注：文件名和文件地址不一定要和我的一样，只要下面挂载命令里统一即可\n\n#### 挂载网盘\n\n```shell\n# 创建挂载文件夹\nmkdir /samba_share\n# 在/etc/fstab文件加入下一行代码\n# 0.0.0.0 替换成自己的IP\n# /nas 替换成自己的网盘共享文件夹地址\n# /samba_share 和本地文件夹地址相同\n# /etc/samba.config 用户名密码的配置文件地址\n//0.0.0.0/nas /samba_share cifs rw,credentials=/etc/samba.config,gid=0,uid=0,rw,iocharset=utf8,file_mode=0777,dir_mode=0777 0 0\n```\n\n注：该方式挂载后，系统启动后就能自动挂载，但如此配置不好，可能导致系统启动不了，需用引导系统进入系统才能修改该文件，如果临时用可以用mount 命令挂载，命令如下：\n\n```shell\nmount.cifs  //10.10.10.1/nas  /home/nas/  -o username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8\n# 或者\nmount -t cifs -o  username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8   //10.10.10.1/nas  /home/nas/ \n# 如果挂载不上，无反应，就在参数上添加vers=2.0\n# 命令参数解析：\nmount                         #挂载命令\n-t                            #挂载文件系统的类型，通常不必指定。mount会自动选择正确的类型(nas有两种格式：nfs、cifs)\n-o iocharset=utf8             [options 主要用来描述设备或档案的挂接方式，\\ 参数iocharset表示指定访问文件系统所用字符集。\\ 路径中如有中文则添加此项，支持中文路径]\nsername=gz                    [nas用户名]\nDomain=nas                    [域名]\npassword=123456               [nas密码]     \n//10.10.10.1/nas              [nas路径]\n/home/nas/                    [挂载路径]\nsec=ntlmssp                   [NTLMSSP (NT LAN Manager Security Support Provider)，是微软提供的安全支持接口协议]\n```\n\n### 后记\n\nmount命令挂载参考以下文章，该方式本人没尝试过\n\nhttps://blog.csdn.net/weixin_39724395/article/details/123429188 \n\n","slug":"linux/Linux挂载网络硬盘","published":1,"updated":"2025-03-18T09:15:49.379Z","__permalink":"linux/network-hard-disk.html","_id":"cm842o98j00043nqf95c143gg","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Linux开机自动挂载smb网络硬盘</p>\n<hr>\n<h3 id=\"安装cifs-utils插件\"><a href=\"#安装cifs-utils插件\" class=\"headerlink\" title=\"安装cifs-utils插件\"></a>安装<code>cifs-utils</code>插件</h3><h4 id=\"Redhat系\"><a href=\"#Redhat系\" class=\"headerlink\" title=\"Redhat系\"></a>Redhat系</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum 安装</span></span><br><span class=\"line\">yum install cifs-utils -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rpm包安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载一个cifs-utils的rpm包</span></span><br><span class=\"line\">rpm -ivh --nodeps cifs-utils.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"Debian系\"><a href=\"#Debian系\" class=\"headerlink\" title=\"Debian系\"></a>Debian系</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apt 安装</span></span><br><span class=\"line\">apt install cifs-utils</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><h4 id=\"创建用户名密码配置文件\"><a href=\"#创建用户名密码配置文件\" class=\"headerlink\" title=\"创建用户名密码配置文件\"></a>创建用户名密码配置文件</h4><p>在<code>/etc</code>下创建<code>samba.config</code>文件，文件内容如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 你自己nas网盘的用户名和密码</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=用户名</span><br><span class=\"line\"><span class=\"attr\">password</span>=密码</span><br></pre></td></tr></table></figure>\n<p>注：文件名和文件地址不一定要和我的一样，只要下面挂载命令里统一即可</p>\n<h4 id=\"挂载网盘\"><a href=\"#挂载网盘\" class=\"headerlink\" title=\"挂载网盘\"></a>挂载网盘</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建挂载文件夹</span></span><br><span class=\"line\">mkdir /samba_share</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/etc/fstab文件加入下一行代码</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">0.0.0.0 替换成自己的IP</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/nas 替换成自己的网盘共享文件夹地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/samba_share 和本地文件夹地址相同</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/etc/samba.config 用户名密码的配置文件地址</span></span><br><span class=\"line\">//0.0.0.0/nas /samba_share cifs rw,credentials=/etc/samba.config,gid=0,uid=0,rw,iocharset=utf8,file_mode=0777,dir_mode=0777 0 0</span><br></pre></td></tr></table></figure>\n<p>注：该方式挂载后，系统启动后就能自动挂载，但如此配置不好，可能导致系统启动不了，需用引导系统进入系统才能修改该文件，如果临时用可以用mount 命令挂载，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount.cifs  //10.10.10.1/nas  /home/nas/  -o username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">mount -t cifs -o  username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8   //10.10.10.1/nas  /home/nas/ </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果挂载不上，无反应，就在参数上添加vers=2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令参数解析：</span></span><br><span class=\"line\">mount                         #挂载命令</span><br><span class=\"line\">-t                            #挂载文件系统的类型，通常不必指定。mount会自动选择正确的类型(nas有两种格式：nfs、cifs)</span><br><span class=\"line\">-o iocharset=utf8             [options 主要用来描述设备或档案的挂接方式，\\ 参数iocharset表示指定访问文件系统所用字符集。\\ 路径中如有中文则添加此项，支持中文路径]</span><br><span class=\"line\">sername=gz                    [nas用户名]</span><br><span class=\"line\">Domain=nas                    [域名]</span><br><span class=\"line\">password=123456               [nas密码]     </span><br><span class=\"line\">//10.10.10.1/nas              [nas路径]</span><br><span class=\"line\">/home/nas/                    [挂载路径]</span><br><span class=\"line\">sec=ntlmssp                   [NTLMSSP (NT LAN Manager Security Support Provider)，是微软提供的安全支持接口协议]</span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>mount命令挂载参考以下文章，该方式本人没尝试过</p>\n<p><a href=\"https://blog.csdn.net/weixin_39724395/article/details/123429188\">https://blog.csdn.net/weixin_39724395/article/details/123429188</a> </p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Linux开机自动挂载smb网络硬盘</p>\n<hr>\n<h3 id=\"安装cifs-utils插件\"><a href=\"#安装cifs-utils插件\" class=\"headerlink\" title=\"安装cifs-utils插件\"></a>安装<code>cifs-utils</code>插件</h3><h4 id=\"Redhat系\"><a href=\"#Redhat系\" class=\"headerlink\" title=\"Redhat系\"></a>Redhat系</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum 安装</span></span><br><span class=\"line\">yum install cifs-utils -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rpm包安装</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载一个cifs-utils的rpm包</span></span><br><span class=\"line\">rpm -ivh --nodeps cifs-utils.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"Debian系\"><a href=\"#Debian系\" class=\"headerlink\" title=\"Debian系\"></a>Debian系</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apt 安装</span></span><br><span class=\"line\">apt install cifs-utils</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><h4 id=\"创建用户名密码配置文件\"><a href=\"#创建用户名密码配置文件\" class=\"headerlink\" title=\"创建用户名密码配置文件\"></a>创建用户名密码配置文件</h4><p>在<code>/etc</code>下创建<code>samba.config</code>文件，文件内容如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 你自己nas网盘的用户名和密码</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=用户名</span><br><span class=\"line\"><span class=\"attr\">password</span>=密码</span><br></pre></td></tr></table></figure>\n<p>注：文件名和文件地址不一定要和我的一样，只要下面挂载命令里统一即可</p>\n<h4 id=\"挂载网盘\"><a href=\"#挂载网盘\" class=\"headerlink\" title=\"挂载网盘\"></a>挂载网盘</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建挂载文件夹</span></span><br><span class=\"line\">mkdir /samba_share</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/etc/fstab文件加入下一行代码</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">0.0.0.0 替换成自己的IP</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/nas 替换成自己的网盘共享文件夹地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/samba_share 和本地文件夹地址相同</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/etc/samba.config 用户名密码的配置文件地址</span></span><br><span class=\"line\">//0.0.0.0/nas /samba_share cifs rw,credentials=/etc/samba.config,gid=0,uid=0,rw,iocharset=utf8,file_mode=0777,dir_mode=0777 0 0</span><br></pre></td></tr></table></figure>\n<p>注：该方式挂载后，系统启动后就能自动挂载，但如此配置不好，可能导致系统启动不了，需用引导系统进入系统才能修改该文件，如果临时用可以用mount 命令挂载，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount.cifs  //10.10.10.1/nas  /home/nas/  -o username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者</span></span><br><span class=\"line\">mount -t cifs -o  username=gz,domain=nas,password=123456,sec=ntlmssp,iocharset=utf8   //10.10.10.1/nas  /home/nas/ </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果挂载不上，无反应，就在参数上添加vers=2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令参数解析：</span></span><br><span class=\"line\">mount                         #挂载命令</span><br><span class=\"line\">-t                            #挂载文件系统的类型，通常不必指定。mount会自动选择正确的类型(nas有两种格式：nfs、cifs)</span><br><span class=\"line\">-o iocharset=utf8             [options 主要用来描述设备或档案的挂接方式，\\ 参数iocharset表示指定访问文件系统所用字符集。\\ 路径中如有中文则添加此项，支持中文路径]</span><br><span class=\"line\">sername=gz                    [nas用户名]</span><br><span class=\"line\">Domain=nas                    [域名]</span><br><span class=\"line\">password=123456               [nas密码]     </span><br><span class=\"line\">//10.10.10.1/nas              [nas路径]</span><br><span class=\"line\">/home/nas/                    [挂载路径]</span><br><span class=\"line\">sec=ntlmssp                   [NTLMSSP (NT LAN Manager Security Support Provider)，是微软提供的安全支持接口协议]</span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>mount命令挂载参考以下文章，该方式本人没尝试过</p>\n<p><a href=\"https://blog.csdn.net/weixin_39724395/article/details/123429188\">https://blog.csdn.net/weixin_39724395/article/details/123429188</a> </p>\n"},{"title":"git项目同步上游项目到本项目","cover":"/img/cover/9.jpg","hide":false,"date":"2025-03-18T09:12:45.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 前言\n\n今天工作是遇到部分功能更新要在上游和本地项目中同步更新，不想两个项目都要同步复制代码，于是想到了git fork的子项目可以拉取上游项目的理，便做一下相关记录\n\n---\n\n### 查看项目绑定的远程仓库地址\n\n用以下命令查看当前项目绑定的远程仓库\n\n```shell\ngit remote -v\n```\n\n输出：\n\n```shell\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)\n```\n\n### 添加新的远程仓库地址\n\n用以下明令添加上游项目的远程仓库的地址：\n\n```shell\n# 添加新仓库 upstream(上游) 可以自定义\ngit remote add upstream https://github.com/gyx/java-dgjy-build.git\n# 获取远程仓库地址分支信息\ngit fetch upstream\n```\n\n注：两个仓库有相同的分支名的时候，最好不要直接checkout上游分支，可能和本地分支冲突。\n\n再用上一步命令查看已绑定的远程仓库的地址输出如下：\n\n```shell\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)\nupstream\thttps://github.com/gyx/java-dgjy-build.git (fetch)\nupstream\thttps://github.com/gyx/java-dgjy-build.git (push)\n```\n\n### 后记\n\n剩下的操作就都可以直接用idea等git管理软件来完成了。\n","source":"_posts/git/git项目同步上游项目到本项目.md","raw":"---\ntitle: git项目同步上游项目到本项目\ncover: /img/cover/9.jpg\nhide: false\ndate: 2025-03-18 17:12:45\npermalink: git/git-fork-sync.html\ntags:\n  - git\n  - fork\ncategories:\n  - Git\nkeywords:\ndescription:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 前言\n\n今天工作是遇到部分功能更新要在上游和本地项目中同步更新，不想两个项目都要同步复制代码，于是想到了git fork的子项目可以拉取上游项目的理，便做一下相关记录\n\n---\n\n### 查看项目绑定的远程仓库地址\n\n用以下命令查看当前项目绑定的远程仓库\n\n```shell\ngit remote -v\n```\n\n输出：\n\n```shell\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)\n```\n\n### 添加新的远程仓库地址\n\n用以下明令添加上游项目的远程仓库的地址：\n\n```shell\n# 添加新仓库 upstream(上游) 可以自定义\ngit remote add upstream https://github.com/gyx/java-dgjy-build.git\n# 获取远程仓库地址分支信息\ngit fetch upstream\n```\n\n注：两个仓库有相同的分支名的时候，最好不要直接checkout上游分支，可能和本地分支冲突。\n\n再用上一步命令查看已绑定的远程仓库的地址输出如下：\n\n```shell\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)\norigin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)\nupstream\thttps://github.com/gyx/java-dgjy-build.git (fetch)\nupstream\thttps://github.com/gyx/java-dgjy-build.git (push)\n```\n\n### 后记\n\n剩下的操作就都可以直接用idea等git管理软件来完成了。\n","slug":"git/git项目同步上游项目到本项目","published":1,"updated":"2025-03-18T09:47:49.926Z","__permalink":"git/git-fork-sync.html","_id":"cm8eb5uw100006hqf8fxm3h5b","layout":"post","photos":[],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天工作是遇到部分功能更新要在上游和本地项目中同步更新，不想两个项目都要同步复制代码，于是想到了git fork的子项目可以拉取上游项目的理，便做一下相关记录</p>\n<hr>\n<h3 id=\"查看项目绑定的远程仓库地址\"><a href=\"#查看项目绑定的远程仓库地址\" class=\"headerlink\" title=\"查看项目绑定的远程仓库地址\"></a>查看项目绑定的远程仓库地址</h3><p>用以下命令查看当前项目绑定的远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)</span><br><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的远程仓库地址\"><a href=\"#添加新的远程仓库地址\" class=\"headerlink\" title=\"添加新的远程仓库地址\"></a>添加新的远程仓库地址</h3><p>用以下明令添加上游项目的远程仓库的地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加新仓库 upstream(上游) 可以自定义</span></span><br><span class=\"line\">git remote add upstream https://github.com/gyx/java-dgjy-build.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取远程仓库地址分支信息</span></span><br><span class=\"line\">git fetch upstream</span><br></pre></td></tr></table></figure>\n<p>注：两个仓库有相同的分支名的时候，最好不要直接checkout上游分支，可能和本地分支冲突。</p>\n<p>再用上一步命令查看已绑定的远程仓库的地址输出如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)</span><br><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)</span><br><span class=\"line\">upstream\thttps://github.com/gyx/java-dgjy-build.git (fetch)</span><br><span class=\"line\">upstream\thttps://github.com/gyx/java-dgjy-build.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>剩下的操作就都可以直接用idea等git管理软件来完成了。</p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天工作是遇到部分功能更新要在上游和本地项目中同步更新，不想两个项目都要同步复制代码，于是想到了git fork的子项目可以拉取上游项目的理，便做一下相关记录</p>\n<hr>\n<h3 id=\"查看项目绑定的远程仓库地址\"><a href=\"#查看项目绑定的远程仓库地址\" class=\"headerlink\" title=\"查看项目绑定的远程仓库地址\"></a>查看项目绑定的远程仓库地址</h3><p>用以下命令查看当前项目绑定的远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)</span><br><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的远程仓库地址\"><a href=\"#添加新的远程仓库地址\" class=\"headerlink\" title=\"添加新的远程仓库地址\"></a>添加新的远程仓库地址</h3><p>用以下明令添加上游项目的远程仓库的地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加新仓库 upstream(上游) 可以自定义</span></span><br><span class=\"line\">git remote add upstream https://github.com/gyx/java-dgjy-build.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取远程仓库地址分支信息</span></span><br><span class=\"line\">git fetch upstream</span><br></pre></td></tr></table></figure>\n<p>注：两个仓库有相同的分支名的时候，最好不要直接checkout上游分支，可能和本地分支冲突。</p>\n<p>再用上一步命令查看已绑定的远程仓库的地址输出如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (fetch)</span><br><span class=\"line\">origin\thttps://github.com/gyx/java-dgjy-build-admin.git (push)</span><br><span class=\"line\">upstream\thttps://github.com/gyx/java-dgjy-build.git (fetch)</span><br><span class=\"line\">upstream\thttps://github.com/gyx/java-dgjy-build.git (push)</span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>剩下的操作就都可以直接用idea等git管理软件来完成了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clwyf8zbu00007lqfas2b6scs","category_id":"clwyfai2k00017lqf0raz5mtd","_id":"clwyfai2r00047lqf6hfu2eew"},{"post_id":"clwyftmq1000d7lqf4o59g0du","category_id":"clwyfor6u000b7lqf4bxbbd9g","_id":"clwyftmq4000e7lqf3t7nbrjk"},{"post_id":"clwyshhq500006uqf4enabmn2","category_id":"clwyfai2k00017lqf0raz5mtd","_id":"clwyshhqc00026uqfgojt972x"},{"post_id":"clx2ziu2g00002eqfh04le60c","category_id":"clx2ziu2t00012eqf32u19rem","_id":"clx2ziu3100042eqf2wl47e0u"},{"post_id":"clxxdot0n0000bbqf6rsacupd","category_id":"clxxdot1s0001bbqffdg6g2ye","_id":"clxxdot340004bbqf25n02rx9"},{"post_id":"clxxj64y80007vaqf7dcpbt22","category_id":"clxxj2j0h0001vaqf1kn3cmhj","_id":"clxxj64yd000avaqfge1i8hqv"},{"post_id":"cly2rhhr00000d7qf2n11gg1f","category_id":"clwyfai2k00017lqf0raz5mtd","_id":"cly2rjzap0002d7qf59w5b8s6"},{"post_id":"clye10jtp0000l2qfbfxe822y","category_id":"clxxj2j0h0001vaqf1kn3cmhj","_id":"clye10jtv0002l2qf67rf55z9"},{"post_id":"clyiix09f0000rlqf2cpqaaev","category_id":"clyiix09p0001rlqfbtsrdfdc","_id":"clyiix09x0002rlqfh19x7snu"},{"post_id":"cm3fmnou10000x9qf3gg8gnsi","category_id":"clxxj2j0h0001vaqf1kn3cmhj","_id":"cm3fmnoug0002x9qfgx29h2m9"},{"post_id":"cm842o98j00043nqf95c143gg","category_id":"clxxj2j0h0001vaqf1kn3cmhj","_id":"cm842o98x00073nqf9hvaga3k"},{"post_id":"cm842o97v00003nqff9mgdjnr","category_id":"cm842o98600023nqf99rbb5qd","_id":"cm842o99000083nqf77kubgna"},{"post_id":"cm842o98000013nqfeoxogsg8","category_id":"cm842o98600023nqf99rbb5qd","_id":"cm842o994000b3nqf82y8h1h9"},{"post_id":"cm8eb5uw100006hqf8fxm3h5b","category_id":"cm8eb5uwd00016hqf78r81j6b","_id":"cm8eb5ux000076hqfcmixhcbo"},{"post_id":"cm3foja9k00005rqfcdkj10gz","category_id":"cm8eb5uxo000g6hqfdir47ktj","_id":"cm8eb5uxs000j6hqffm8y29jb"}],"PostTag":[{"post_id":"clwyshhq500006uqf4enabmn2","tag_id":"clwyshhq900016uqf2gmve2wy","_id":"clwyshhqd00046uqf94bh2nbs"},{"post_id":"clx2ziu2g00002eqfh04le60c","tag_id":"clx2ziu2w00022eqf00ol14a0","_id":"clx2ziu3100052eqf2f6ohhbt"},{"post_id":"clxxj64y80007vaqf7dcpbt22","tag_id":"clxxj2j0k0003vaqf35aj1lqw","_id":"clxxj64yb0009vaqf91xp9g2t"},{"post_id":"cly2rhhr00000d7qf2n11gg1f","tag_id":"clwyshhq900016uqf2gmve2wy","_id":"cly2rjj2r0001d7qf92gnbop5"},{"post_id":"cm842o97v00003nqff9mgdjnr","tag_id":"cm842o98q00063nqf6ohz9d1p","_id":"cm842o994000c3nqfb0onde8k"},{"post_id":"cm842o98000013nqfeoxogsg8","tag_id":"cm842o98q00063nqf6ohz9d1p","_id":"cm842o99c000g3nqf98cqelwe"},{"post_id":"cm842o98j00043nqf95c143gg","tag_id":"cm842o998000e3nqf8kxq1u16","_id":"cm842o99d000i3nqf8rej0djz"},{"post_id":"clwyf8zbu00007lqfas2b6scs","tag_id":"clwyfai2l00027lqfafehep2h","_id":"cm8eb5uwp00036hqf07szd2tm"},{"post_id":"clwyf8zbu00007lqfas2b6scs","tag_id":"clwyfai2q00037lqfb03yfml3","_id":"cm8eb5uwt00056hqfbz7i8e8c"},{"post_id":"clwyshhq500006uqf4enabmn2","tag_id":"clwyfai2l00027lqfafehep2h","_id":"cm8eb5uww00066hqf0tphgsii"},{"post_id":"cm8eb5uw100006hqf8fxm3h5b","tag_id":"cm8eb5uwj00026hqfcdhqev52","_id":"cm8eb5uxa000a6hqf92dlgldh"},{"post_id":"cm8eb5uw100006hqf8fxm3h5b","tag_id":"cm8eb5uws00046hqf2r4r81bs","_id":"cm8eb5uxc000b6hqf6cn7aizq"},{"post_id":"clwlyxfax0003l8qf97ms7u9o","tag_id":"cm8eb5ux100086hqfbe2093qh","_id":"cm8eb5uxj000d6hqf4ojh7mlv"},{"post_id":"clx2ziu2g00002eqfh04le60c","tag_id":"cm8eb5ux800096hqf7hx80o4y","_id":"cm8eb5uxl000e6hqff8h2gulq"},{"post_id":"clxxdot0n0000bbqf6rsacupd","tag_id":"cm8eb5uxg000c6hqf4vbtan94","_id":"cm8eb5uxs000k6hqfgny7ejcv"},{"post_id":"clxxdot0n0000bbqf6rsacupd","tag_id":"cm8eb5uxl000f6hqfffwp6fmv","_id":"cm8eb5uxs000l6hqfhkwqfjqn"},{"post_id":"clxxdot0n0000bbqf6rsacupd","tag_id":"cm8eb5uxr000h6hqfbwok679i","_id":"cm8eb5uxv000n6hqfc2ce0nl1"},{"post_id":"cm842o98j00043nqf95c143gg","tag_id":"cm8eb5uxr000i6hqffrpb499i","_id":"cm8eb5uxw000o6hqfeqnj154g"},{"post_id":"clxxj64y80007vaqf7dcpbt22","tag_id":"cm8eb5uxr000i6hqffrpb499i","_id":"cm8eb5uy2000r6hqf6iafa6lt"},{"post_id":"cm3fmnou10000x9qf3gg8gnsi","tag_id":"cm8eb5uxr000i6hqffrpb499i","_id":"cm8eb5uy4000t6hqffk7r8i2p"},{"post_id":"clye10jtp0000l2qfbfxe822y","tag_id":"cm8eb5uxr000i6hqffrpb499i","_id":"cm8eb5uy4000v6hqf8cy59rr1"},{"post_id":"cm842o98000013nqfeoxogsg8","tag_id":"cm8eb5uy2000s6hqf668p2wno","_id":"cm8eb5uy8000x6hqfgni7afyx"},{"post_id":"cm842o97v00003nqff9mgdjnr","tag_id":"cm8eb5uy2000s6hqf668p2wno","_id":"cm8eb5uy9000y6hqfb7z22wm3"},{"post_id":"cm3foja9k00005rqfcdkj10gz","tag_id":"cm8eb5uy5000w6hqf91212qjs","_id":"cm8eb5uy9000z6hqfdnbwgxm1"}],"Tag":[{"name":"Hexo","_id":"clwlyxfaz0006l8qf1cu4bd94"},{"name":"mysql","_id":"clwyfai2l00027lqfafehep2h"},{"name":"mybatis","_id":"clwyfai2q00037lqfb03yfml3"},{"name":"Mysql","_id":"clwyfnude00077lqf1mlz2p8t"},{"name":"Mybatis","_id":"clwyfnudl00087lqfet7ggt1k"},{"name":"DM","_id":"clwyshhq900016uqf2gmve2wy"},{"name":"生活","_id":"clx204lds0002p4qf9pq408wt"},{"name":"减肥","_id":"clx204ldu0003p4qfbkoya1d7"},{"name":"前端","_id":"clx2ziu2w00022eqf00ol14a0"},{"name":"CSS","_id":"clx2ziu2y00032eqf88fe2qja"},{"name":"Java","_id":"clxxdot290002bbqf8qei8nz1"},{"name":"List","_id":"clxxdot2r0003bbqf1ui882e1"},{"name":"Sort","_id":"clxxdot350005bbqf6os15yw9"},{"name":"Linux","_id":"clxxj2j0j0002vaqfhhdphipi"},{"name":"防火墙","_id":"clxxj2j0k0003vaqf35aj1lqw"},{"name":"Python","_id":"cm842o98d00033nqf4e004s5k"},{"name":"conda","_id":"cm842o98q00063nqf6ohz9d1p"},{"name":"网络硬盘","_id":"cm842o998000e3nqf8kxq1u16"},{"name":"git","_id":"cm8eb5uwj00026hqfcdhqev52"},{"name":"fork","_id":"cm8eb5uws00046hqf2r4r81bs"},{"name":"hexo","_id":"cm8eb5ux100086hqfbe2093qh"},{"name":"css","_id":"cm8eb5ux800096hqf7hx80o4y"},{"name":"java","_id":"cm8eb5uxg000c6hqf4vbtan94"},{"name":"list","_id":"cm8eb5uxl000f6hqfffwp6fmv"},{"name":"sort","_id":"cm8eb5uxr000h6hqfbwok679i"},{"name":"linux","_id":"cm8eb5uxr000i6hqffrpb499i"},{"name":"python","_id":"cm8eb5uy2000s6hqf668p2wno"},{"name":"docker","_id":"cm8eb5uy5000w6hqf91212qjs"}]}}