<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql主从设置</title>
      <link href="//db/mysql-master-slave.html"/>
      <url>//db/mysql-master-slave.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>公司服务器迁徙之后，因为数据库数据量太大，用备份的数据恢复到从库的方式过于耗费时间，再加上数据库本就是docker方式启动的，以前只是按照文档一步步搭建主从数据库，今天有时间就好好研究一下原理，记录一下偷懒时遇到的问题。</p><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><p>注：本方案是为了应对公司项目做的处理，所以处理方式有些偏向与容器化部署项目的记录方案，比如公司本有一台运行中的docker mysql数据库，扩容另台或多台从数据库时可用该方案。</p><h4 id="备份主库挂载文件夹到从库服务器"><a href="#备份主库挂载文件夹到从库服务器" class="headerlink" title="备份主库挂载文件夹到从库服务器"></a>备份主库挂载文件夹到从库服务器</h4><p>备份文件夹时最好先停止docker容器，或锁表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush tables <span class="keyword">with</span> read lock</span><br></pre></td></tr></table></figure><p>备份完成，再恢复数据写入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unlock tables</span><br></pre></td></tr></table></figure><h4 id="如有设置过主从，删除相关表数据，重置设置"><a href="#如有设置过主从，删除相关表数据，重置设置" class="headerlink" title="如有设置过主从，删除相关表数据，重置设置"></a>如有设置过主从，删除相关表数据，重置设置</h4><ul><li>截断<code>mysql</code>数据库下的<code>slave_master_info</code>和<code>slave_relay_log_info</code>两个表</li></ul><p><img src="https://images.jzwfan.com/image/2024/07/12/174758-0.png" alt="image-20240712174756001"></p><ul><li>删除挂载出来的文件夹下的所有<code>relay log</code> 文件（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</li></ul><p><img src="https://images.jzwfan.com/image/2024/07/12/175817-0.png" alt="image-20240712175814774"></p><ul><li>数据库中运行以下命令重置状态</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">reset slave;</span><br></pre></td></tr></table></figure><h4 id="更新备库的server-uuid"><a href="#更新备库的server-uuid" class="headerlink" title="更新备库的server-uuid"></a>更新备库的server-uuid</h4><p>主库和从库的server-uuid不能相同，这里是直接拷贝文件，所以要手动改配置。用以下命令获取UUID</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UUID();</span><br></pre></td></tr></table></figure><p><img src="https://images.jzwfan.com/image/2024/07/15/100910-0.png" alt="image-20240715100907937"></p><p>更新<code>auto.cnf</code>文件中的<code>server-uuid</code>设置（注：挂载出来的为<code>/var/lib/mysql</code>文件夹）</p><p><img src="https://images.jzwfan.com/image/2024/07/15/101813-0.png" alt="image-20240715101804553"></p><h4 id="my-cnf文件配置"><a href="#my-cnf文件配置" class="headerlink" title="my.cnf文件配置"></a>my.cnf文件配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">pid-file = /usr/local/mysql/data/mysql.pid</span><br><span class="line">log-error = /usr/local/mysql/data/mysql.err</span><br><span class="line"></span><br><span class="line">server-id = 1 #另一个改成2</span><br><span class="line">auto_increment_offset = 1#奇数ID，另一个改成偶数ID</span><br><span class="line">auto_increment_increment = 2                                            #ID生成步长改成2</span><br><span class="line"></span><br><span class="line">log-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此项</span><br><span class="line">binlog-format=ROW</span><br><span class="line"># binlog-row-p_w_picpath=minimal</span><br><span class="line">#将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启</span><br><span class="line">log-slave-updates=true</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">master-info-repository=TABLE</span><br><span class="line">relay-log-info-repository=TABLE</span><br><span class="line">sync-master-info=1</span><br><span class="line">slave-parallel-workers=0</span><br><span class="line">sync_binlog=0</span><br><span class="line">binlog-checksum=CRC32</span><br><span class="line">master-verify-checksum=1</span><br><span class="line">slave-sql-verify-checksum=1</span><br><span class="line">binlog-rows-query-log_events=1</span><br><span class="line">#expire_logs_days=5</span><br><span class="line">max_binlog_size=1024M                                                   #binlog单文件最大值</span><br><span class="line"></span><br><span class="line">replicate-ignore-db = mysql                                             #忽略不同步主从的数据库</span><br><span class="line">replicate-ignore-db = information_schema</span><br><span class="line">replicate-ignore-db = performance_schema</span><br><span class="line">replicate-ignore-db = test</span><br><span class="line">replicate-ignore-db = zabbix</span><br><span class="line"></span><br><span class="line">max_connections = 3000</span><br><span class="line">max_connect_errors = 30</span><br><span class="line"></span><br><span class="line">skip-character-set-client-handshake                                     #忽略应用程序想要设置的其他字符集</span><br><span class="line">init-connect=&#x27;SET NAMES utf8&#x27;                                           #连接时执行的SQL</span><br><span class="line">character-set-server=utf8                                               #服务端默认字符集</span><br><span class="line">wait_timeout=1800                                                       #请求的最大连接时间</span><br><span class="line">interactive_timeout=1800                                                #和上一参数同时修改才会生效</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES                     #sql模式</span><br><span class="line">max_allowed_packet = 10M</span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 128M</span><br><span class="line">query_cache_limit = 4M</span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">read_buffer_size = 16K</span><br><span class="line"></span><br><span class="line">skip-name-resolve</span><br><span class="line">slow_query_log=1</span><br><span class="line">long_query_time = 6</span><br><span class="line">slow_query_log_file=slow-query.log</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 20M</span><br><span class="line">sort_buffer_size = 20M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br></pre></td></tr></table></figure><h4 id="添加主从同步账户"><a href="#添加主从同步账户" class="headerlink" title="添加主从同步账户"></a>添加主从同步账户</h4><p>master0</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;master1-ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>master1</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;master0-ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>注：为了数据安全，用户最好指定IP而非<code>%</code></p><h4 id="查看两个数据库的master状态"><a href="#查看两个数据库的master状态" class="headerlink" title="查看两个数据库的master状态"></a>查看两个数据库的master状态</h4><p>命令如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p>返回如下图所示，记住被框住的两个数据，后面有用：</p><p><img src="https://images.jzwfan.com/image/2024/07/15/104554-0.png" alt="image-20240715104551372"></p><h4 id="配置同步信息"><a href="#配置同步信息" class="headerlink" title="配置同步信息"></a>配置同步信息</h4><p>Master0命令如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span></span><br><span class="line">master_host<span class="operator">=</span><span class="string">&#x27;master1-ip&#x27;</span>, # 指定IP</span><br><span class="line">master_port<span class="operator">=</span><span class="number">3306</span>, # 指定端口</span><br><span class="line">master_user<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>, # 指定用户名</span><br><span class="line">master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, # 指定用户名字</span><br><span class="line">master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-master1-bin.000001&#x27;</span>, # 指定上一步中返回文件名</span><br><span class="line">master_log_pos<span class="operator">=</span><span class="number">582</span>; # 指定上一步中返回的步数</span><br></pre></td></tr></table></figure><p>然后启动主从:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status\G # 注：这里没有分号</span><br></pre></td></tr></table></figure><p>显示如下图：</p><p><img src="https://images.jzwfan.com/image/2024/07/15/110015-0.png" alt="image-20240715110013349"></p><p>然后在master1上重复此步骤。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果以前做过主从，要清理主从配置</li><li>如果不是导入的，而是和我一样直接复制docker挂载的文件夹时要改server-uuid</li></ul><p>参考地址：</p><p><a href="https://www.cnblogs.com/ygqygq2/p/6045279.html">https://www.cnblogs.com/ygqygq2/p/6045279.html</a></p><p><a href="https://www.jianshu.com/p/805dc6576b79">https://www.jianshu.com/p/805dc6576b79</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yum换源</title>
      <link href="//linux/yum-change-source.html"/>
      <url>//linux/yum-change-source.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用yum的官方源进行yum install xxxx 的时候，速度非常慢，只有几kB/s，有时候还不到1kB/s。这就会造成安装包的速度的速度要么特变慢，要么就根本安装不了。</p><hr><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure><h4 id="下载新的-CentOS-Base-repo-到-etc-yum-repos-d"><a href="#下载新的-CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/"></a>下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>注：如果没有安装<code>wget</code>，可本地访问网址下载，上传到服务器。</p><h4 id="清理并生成新的缓存"><a href="#清理并生成新的缓存" class="headerlink" title="清理并生成新的缓存"></a>清理并生成新的缓存</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean &amp; yum makecache</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有时候可能阿里源不可用，可替换清华源等。</p><p>原地址：<a href="https://blog.csdn.net/wudinaniya/article/details/105758739">https://blog.csdn.net/wudinaniya/article/details/105758739</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>达梦数据导入导出</title>
      <link href="//db/dimp-and-dexp.html"/>
      <url>//db/dimp-and-dexp.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>达梦数据库导出导入工具使用说明。备注，此备份还原方案是逻辑操作，在少量数据的情况下，性能足够，一旦数据量过大，则备份时间极长。</p><h3 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h3><p>达梦数据库支持4种数据同步方式，这些方式可以根据特定的场景去使用。</p><ul><li>FULL（全库）</li><li>OWNER（用户）</li><li>SCHEMAS（模式）</li><li>TABLES（表）</li></ul><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table class="data-table" data-transient-attributes="class"    style="width: 100%; outline: none; border-collapse: collapse;" data-width="576px">    <colgroup>        <col span="1" width="144">        <col span="1" width="144">        <col span="1" width="144">        <col span="1" width="144">    </colgroup>    <tbody>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>参数<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>dexp说明<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>dimp说明<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>备注<br></p>            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>USERID<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>USERID在作为导出和导入时，都是指定一个链接串。格式为：用户名/密码@库名:端口号#证书路径<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>FILE<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>file作为导出参数时，指定导出的文件名。可选参数，默认值为dexp.dmp<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>fiel作为导入参数时，指定导入使用的文件名，也就是dexp导出的文件。作为导入时，它是必选参数。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>DIRECTORY<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>directory参数指定导出和导入的目录，简单点说就是指定dmp(转储文件)的位置。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>FULL<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>full参数指定导出和导入基于整个数据库，也就是导出整个数据库或导入整个数据库。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>四种方式之一，不建议使用。<br></p>            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>OWNER<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>owner参数指定导出和导入基于用户，也就是导出或导入用户中的所有对象，多个用户使用英文逗号分割。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>四种方式之一，根据需要使用，用户与模式基本一致。<br></p>            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>SCHEMAS<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>schemas参数指定导出和导入基于模式，也就是导出或导入模式下的所有对象，多个模式使用英文逗号分割<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>四种方式之一，根据需要使用，模式与用户基本一致。<br></p>            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>TABLES<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>tables参数指定导出和导入基于表，也就是导出或导入表的结构和数据，多个表使用英文逗号分割。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>四种方式之一，根据需要使用<br></p>            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>PARALLEL<br></p>            </td>            <td colspan="2" data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>parallel参数指定导出和导入过程中使用的线程数。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>COMPRESS<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>compress参数指定导出的数据是否压缩，默认值N(不压缩)，可选值Y|N。<br></p>            </td>            <td data-transient-attributes="table-cell-selection"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>无<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>        <tr style="height: 30px;">            <td data-transient-attributes="table-cell-selection" class="table-last-column"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>LOG<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-column"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>log作为导出参数时，指定导出日志的文件名。可选参数，默认值为dexp.log。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-column"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">                <p>log作为导入参数时，指定导入日志的文件名。可选参数，默认值为dimp.log。<br></p>            </td>            <td data-transient-attributes="table-cell-selection" class="table-last-column table-last-row"                style="min-width: auto; overflow-wrap: break-word; margin: 4px 8px; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default; vertical-align: top;">            </td>        </tr>    </tbody></table><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><p>这里只记录了备份还原模式的用法，其他用法可看原文档</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 备份</span><br><span class="line">.<span class="operator">/</span>dexp SYSDBA<span class="operator">/</span>SYSDBA001<span class="variable">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5236</span> FILE<span class="operator">=</span>SZSQ.dmp LOG<span class="operator">=</span>SZSQ.log DIRECTORY<span class="operator">=</span><span class="operator">/</span>data SCHEMAS<span class="operator">=</span>SZSQ</span><br><span class="line"># 还原，还原之前要删除相应表数据</span><br><span class="line">.<span class="operator">/</span>dimp SYSDBA<span class="operator">/</span>SYSDBA001<span class="variable">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5236</span> FILE<span class="operator">=</span>SZSQ.dmp LOG<span class="operator">=</span>SZSQ.log DIRECTORY<span class="operator">=</span><span class="operator">/</span>data SCHEMAS<span class="operator">=</span>SZSQ</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原地址：<a href="https://blog.51cto.com/bxbdba/7175810">https://blog.51cto.com/bxbdba/7175810</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙设置</title>
      <link href="//linux/firewall-cmd.html"/>
      <url>//linux/firewall-cmd.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下Linux下的firewall-cmd命令的用法，以后慢慢更新，慢慢完善。</p><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><h4 id="端口访问设置"><a href="#端口访问设置" class="headerlink" title="端口访问设置"></a>端口访问设置</h4><p>查看已开放的端口、IP规则</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询打开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>开放新端口，默认情况下所有端口都是关闭状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放端口9001/tcp (tcp、udp等)</span></span><br><span class="line">firewall-cmd --zone=public --add-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">批量开放9002～9005的tcp端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=9002-9005/tcp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新载入防火墙设置，使设置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>关闭已开放的端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭端口9001/tcp (tcp、udp等)</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=9001/tcp --add-port=9001/udp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">批量关闭9002～9005的tcp端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=9002-9005/tcp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新载入防火墙设置，使设置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="IP访问设置"><a href="#IP访问设置" class="headerlink" title="IP访问设置"></a>IP访问设置</h4><p>查看已设置的规则</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看已设置的规则</span></span><br><span class="line">firewall-cmd --zone=public --list-rich-rules</span><br></pre></td></tr></table></figure><p>开放或限制ip（设置规则）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">限制IPV4地址为：192.168.1.0</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新载入防火墙设置，使设置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>删除已设置的规则</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除开放IPV4地址为：192.168.0.0 指定端口：9001/tcp</span></span><br><span class="line">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0&quot; port protocol=&quot;tcp&quot; port=&quot;9001&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除开放IPV4地址为：192.168.0.1，不指定端口，代表可以访问所有端口（是否可以访问未开放端口待验证）</span></span><br><span class="line">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.1&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除限制IPV4地址为：192.168.1.0</span></span><br><span class="line">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0&quot; reject&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新载入防火墙设置，使设置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可"><a href="#如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可" class="headerlink" title="如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可"></a>如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/firewalld/zones/public.xml</span><br></pre></td></tr></table></figure><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://blog.csdn.net/haoqi9999/article/details/125988881">https://blog.csdn.net/haoqi9999/article/details/125988881</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List对象排序</title>
      <link href="//java/collections-sort.html"/>
      <url>//java/collections-sort.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记一下Java中List对象的三种排序方式，万一用得着呢（已经用着了）。</p><hr><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>简单对象排序，如Integer对象，String对象等，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用Collections.sort 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="number">9</span>);</span><br><span class="line">        integerList.add(<span class="number">4</span>);</span><br><span class="line">        integerList.add(<span class="number">6</span>);</span><br><span class="line">        integerList.add(<span class="number">1</span>);</span><br><span class="line">        integerList.add(<span class="number">8</span>);</span><br><span class="line">        integerList.add(<span class="number">7</span>);</span><br><span class="line">        integerList.add(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 默认升序</span></span><br><span class="line">        Collections.sort(integerList);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : integerList)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置为降序</span></span><br><span class="line">        Collections.sort(integerList,Collections.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (Integer i : integerList)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用List.sort()方法，传入对象compareTo方法，一般不用该方法排序简单对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="number">9</span>);</span><br><span class="line">        integerList.add(<span class="number">4</span>);</span><br><span class="line">        integerList.add(<span class="number">6</span>);</span><br><span class="line">        integerList.add(<span class="number">1</span>);</span><br><span class="line">        integerList.add(<span class="number">8</span>);</span><br><span class="line">        integerList.add(<span class="number">7</span>);</span><br><span class="line">        integerList.add(<span class="number">5</span>);</span><br><span class="line">        integerList.sort(Integer::compareTo); <span class="comment">//方法名可以自定义，建议遵循java命名规则</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : integerList)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>自定义对象排序，可重写compareTo方法排序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;m&quot;</span>,<span class="number">9</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;j&quot;</span>,<span class="number">4</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;y&quot;</span>,<span class="number">6</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;q&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;i&quot;</span>,<span class="number">8</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;b&quot;</span>,<span class="number">7</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;d&quot;</span>,<span class="number">5</span>));</span><br><span class="line">        integerList.sort(User::compareTo);</span><br><span class="line">        <span class="keyword">for</span> (User i : integerList)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span> + i.getName() + <span class="string">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer sex)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">      <span class="comment">// 这里设置为升序，</span></span><br><span class="line">      <span class="comment">// 降序写法替换顺序：user.getSex().compareTo(this.getSex()); </span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getSex().compareTo(user.getSex()); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(Integer sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>用匿名函数重写排序方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;m&quot;</span>,<span class="number">9</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;j&quot;</span>,<span class="number">4</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;y&quot;</span>,<span class="number">6</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;q&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;i&quot;</span>,<span class="number">8</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;b&quot;</span>,<span class="number">7</span>));</span><br><span class="line">        integerList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;d&quot;</span>,<span class="number">5</span>));</span><br><span class="line">        integerList.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123; <span class="comment">// 这个在java8中可以用表达式写：(t1,t2) -&gt; t1.getSex() &gt;= t2.getSex() ? 1 : -1;</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getSex() &gt;= o2.getSex() ? <span class="number">1</span> : -<span class="number">1</span>; <span class="comment">//这里升序为1:-1，降序为-1:1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (User i : integerList)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span> + i.getName() + <span class="string">&quot;,sex:&quot;</span> + i.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer sex)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getSex().compareTo(<span class="built_in">this</span>.getSex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(Integer sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> List </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实用代码合集</title>
      <link href="//html/practical-css.html"/>
      <url>//html/practical-css.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。</p><h3 id="img图片保持比例且居中显示"><a href="#img图片保持比例且居中显示" class="headerlink" title="img图片保持比例且居中显示"></a>img图片保持比例且居中显示</h3><p> 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; <a href="https://so.csdn.net/so/search?q=margin&amp;spm=1001.2101.3001.7020">margin</a>: 0 auto;）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源地址：<a href="https://blog.csdn.net/shijie_nihao/article/details/106348591">https://blog.csdn.net/shijie_nihao/article/details/106348591</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥记录</title>
      <link href="//live/lose-weight-records.html"/>
      <url>//live/lose-weight-records.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在2022年七月，做过一次ercp手术，一个160斤的小胖子瘦到了140斤，当时天真的以为以后一定能保证自己不再胖回来，结果过年回家就胖回到了160斤，然后就自暴自弃的放弃了自己的减肥计划，也<del>没再在意过自己的体重</del>（没敢上称）。今天，因为怀疑小猫是不是得了猫传腹，给猫子称重时，不得不拿自己当工具，结果现在几乎到了200斤了，故今天开减肥记录的文章，以激励自己每天减肥打卡。</p><hr><h3 id="2024-06"><a href="#2024-06" class="headerlink" title="2024.06"></a>2024.06</h3><h4 id="第零天（6月5日｜周三）"><a href="#第零天（6月5日｜周三）" class="headerlink" title="第零天（6月5日｜周三）"></a>第零天（6月5日｜周三）</h4><center style="overflow: hidden;width: 100%;height: 600px;text-align:center">    <img style="width: 500px;" src="https://images.jzwfan.com/image/2024/06/06/000134-0.jpeg" alt=""></center><h4 id="第一天（6月6日｜周四）"><a href="#第一天（6月6日｜周四）" class="headerlink" title="第一天（6月6日｜周四）"></a>第一天（6月6日｜周四）</h4><ul><li>早饭：八宝粥一杯，鸡蛋一个</li><li>中午：麻辣烫一份，忘记拍了，买的东西还没到，公司附近吃的都差不多</li><li>晚上：步行回家，吃了一份煎鱼和鸡胸肉</li></ul><p>下午3点半吃了几颗糖炒花生，忘记拍了</p><center class="half" style="overflow:hidden">      <div style="width: 157px;height: 150px;line-height: 150px;text-align: center;float:left;padding-bottom:10px;">        <img src="https://images.jzwfan.com/image/2024/06/07/092938-0.png" style="max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;" alt="">    </div>    <div style="width: 157px;height: 150px;line-height: 150px;text-align: center;float:left;padding-bottom:10px;">        <img src="https://images.jzwfan.com/image/2024/06/07/093334-0.png" style="max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;" alt="">    </div></center>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 减肥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql语句</title>
      <link href="//db/sql.html"/>
      <url>//db/sql.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工作中遇到的SQL查询方法、语法、和优化记录。</p><hr><h3 id="SQL-方法和关键字"><a href="#SQL-方法和关键字" class="headerlink" title="SQL 方法和关键字"></a>SQL 方法和关键字</h3><h4 id="GROUP-COUNT-WM-COUNT"><a href="#GROUP-COUNT-WM-COUNT" class="headerlink" title="GROUP_COUNT\WM_COUNT"></a>GROUP_COUNT\WM_COUNT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># mysql group_concat</span><br><span class="line"># separator 用来替换拼接字段， eg: 水果<span class="operator">-</span>素菜</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">group_concat(c.category_name separator <span class="string">&#x27;-&#x27;</span>) category_name,</span><br><span class="line">cs.store_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dt_category_store <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dt_category <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">cs.category_id <span class="operator">=</span> c.category_id <span class="keyword">and</span> cs.category_type <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cs.store_id</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># dm wm_concat 方式</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">wm_concat(c.category_name) category_name,</span><br><span class="line">cs.store_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dt_category_store <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dt_category <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">cs.category_id <span class="operator">=</span> c.category_id <span class="keyword">and</span> cs.category_type <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cs.store_id</span><br></pre></td></tr></table></figure><h4 id="LEFT（从左开始截取字符串）"><a href="#LEFT（从左开始截取字符串）" class="headerlink" title="LEFT（从左开始截取字符串）"></a>LEFT（从<strong>左</strong>开始截取字符串）</h4><p>用法：left(str, length)，即：left(被截取字符串， 截取长度)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>结果为：www.jzwf</p><h4 id="RIGHT-从右开始截取字符串"><a href="#RIGHT-从右开始截取字符串" class="headerlink" title="RIGHT(从右开始截取字符串)"></a>RIGHT(从<strong>右</strong>开始截取字符串)</h4><p>用法：right(str, length)，即：right(被截取字符串， 截取长度)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>结果为：an.com</p><h4 id="SUBSTRING-截取特定长度的字符串"><a href="#SUBSTRING-截取特定长度的字符串" class="headerlink" title="SUBSTRING(截取特定长度的字符串)"></a>SUBSTRING(截取<strong>特定长度</strong>的字符串)</h4><p>用法：</p><ul><li>substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)</li><li>substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)</li></ul><p>1.从字符串的第9个字符开始读取直至结束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>结果为：an.com</p><p>2.从字符串的第5个字符开始，只取3个字符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>结果为：jzw</p><p>3.从字符串的倒数第6个字符开始读取直至结束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="number">-6</span>)</span><br></pre></td></tr></table></figure><p>结果为：an.com</p><p>4.从字符串的倒数第6个字符开始读取，只取2个字符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="number">-6</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>结果为：an</p><h4 id="SUBSTRING-INDEX-按关键字进行读取"><a href="#SUBSTRING-INDEX-按关键字进行读取" class="headerlink" title="SUBSTRING_INDEX(按关键字进行读取)"></a>SUBSTRING_INDEX(按<strong>关键字</strong>进行读取)</h4><p>用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)</p><p>1.截取第二个“.”之<strong>前</strong>的所有字符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>结果为：www.jzwfan</p><p>2.截取倒数第二个“.”之<strong>后</strong>的所有字符</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;www.jzwfan.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>结果为：jzwfan.com</p><p>3.如果关键字不存在，则返回整个字符串</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;www.yuanrengu.com&#x27;</span>, <span class="string">&#x27;sprite&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>结果为：www.jzwfan.com</p><p>以上，源地址：<a href="https://www.cnblogs.com/heyonggang/p/8117754.html">https://www.cnblogs.com/heyonggang/p/8117754.html</a></p><h4 id="FROM-UNXITIME-时间戳格式化"><a href="#FROM-UNXITIME-时间戳格式化" class="headerlink" title="FROM_UNXITIME(时间戳格式化)"></a>FROM_UNXITIME(时间戳格式化)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># FROM_UNXITIME(unix_timestamp, format)</span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNXITIME(<span class="number">1459338786</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><p>format格式说明：</p><p>%M 月名字(January～December)<br>%W 星期名字(Sunday～Saturday)<br>%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）<br>%Y 年, 数字, 4 位<br>%y 年, 数字, 2 位<br>%a 缩写的星期名字(Sun～Sat)<br>%d 月份中的天数, 数字(00～31)<br>%e 月份中的天数, 数字(0～31)<br>%m 月, 数字(01～12)<br>%c 月, 数字(1～12)<br>%b 缩写的月份名字(Jan～Dec)<br>%j 一年中的天数(001～366)<br>%H 小时(00～23)<br>%k 小时(0～23)<br>%h 小时(01～12)<br>%I 小时(01～12)<br>%l 小时(1～12)<br>%i 分钟, 数字(00～59)<br>%r 时间,12 小时(hh:mm:ss [AP]M)<br>%T 时间,24 小时(hh:mm:ss)<br>%S 秒(00～59)<br>%s 秒(00～59)<br>%p AM或PM<br>%w 一个星期中的天数(0=Sunday ～6=Saturday ）<br>%U 星期(0～52), 这里星期天是星期的第一天<br>%u 星期(0～52), 这里星期一是星期的第一天<br>%% 一个文字%</p><p>原地址：<a href="https://blog.csdn.net/fdipzone/article/details/51018930">https://blog.csdn.net/fdipzone/article/details/51018930</a></p><h4 id="DROP（删除表｜通用）"><a href="#DROP（删除表｜通用）" class="headerlink" title="DROP（删除表｜通用）"></a>DROP（删除表｜通用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Mysql</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"># DM</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure><h4 id="TRUNCATE（清空表数据｜通用）"><a href="#TRUNCATE（清空表数据｜通用）" class="headerlink" title="TRUNCATE（清空表数据｜通用）"></a>TRUNCATE（清空表数据｜通用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Mysql</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"># DM</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure><h3 id="SQL一些常用命令"><a href="#SQL一些常用命令" class="headerlink" title="SQL一些常用命令"></a>SQL一些常用命令</h3><h4 id="DM设置表主键是否自动递增"><a href="#DM设置表主键是否自动递增" class="headerlink" title="DM设置表主键是否自动递增"></a>DM设置表主键是否自动递增</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># OFF 开启， <span class="keyword">ON</span> 关闭</span><br><span class="line"><span class="keyword">SET</span> IDENTITY_INSERT 空间名.表名 <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><h3 id="DM添加索引例子"><a href="#DM添加索引例子" class="headerlink" title="DM添加索引例子"></a>DM添加索引例子</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE  INDEX &quot;索引名&quot; <span class="keyword">ON</span> &quot;空间名&quot;.&quot;表名&quot;(&quot;列名1&quot; <span class="keyword">ASC</span>,&quot;列名2&quot; <span class="keyword">ASC</span>,&quot;列名3&quot; ASC...) STORAGE(<span class="keyword">ON</span> &quot;MAIN&quot;, CLUSTERBTR);</span><br></pre></td></tr></table></figure><h4 id="DM创建表语句模版"><a href="#DM创建表语句模版" class="headerlink" title="DM创建表语句模版"></a>DM创建表语句模版</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;空间名&quot;.&quot;表名&quot;</span><br><span class="line">(</span><br><span class="line">&quot;ID&quot; <span class="type">BIGINT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">&quot;NEIBH_ID&quot; <span class="type">BIGINT</span>,</span><br><span class="line">&quot;CATEGORY_ID&quot; <span class="type">BIGINT</span>,</span><br><span class="line">&quot;CATEGORY_TYPE&quot; <span class="type">VARCHAR</span>(<span class="number">2</span>),</span><br><span class="line">&quot;INSPECTOR_IDS&quot; <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;INSPECTOR_NAMES&quot; <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;TENANT_ID&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;DELETED&quot; BIT <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">&quot;CREATOR&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;CREATE_TIME&quot; <span class="type">TIMESTAMP</span>(<span class="number">0</span>),</span><br><span class="line">&quot;UPDATER&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;UPDATE_TIME&quot; <span class="type">TIMESTAMP</span>(<span class="number">0</span>),</span><br><span class="line"><span class="keyword">NOT</span> CLUSTER <span class="keyword">PRIMARY</span> KEY(&quot;ID&quot;)) STORAGE(<span class="keyword">ON</span> &quot;MAIN&quot;, CLUSTERBTR) ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> DM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis下Mapper文件例子</title>
      <link href="//db/mybatis-mapper.html"/>
      <url>//db/mybatis-mapper.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。</p><hr><h3 id="choose-用法"><a href="#choose-用法" class="headerlink" title="choose 用法"></a>choose 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 3&quot;</span>&gt;</span></span><br><span class="line">        SQL1...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 4&quot;</span>&gt;</span></span><br><span class="line">        SQL2...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        SQL3...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach-用法"><a href="#foreach-用法" class="headerlink" title="foreach 用法"></a>foreach 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;categoryIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;categoryId&quot;</span>&gt;</span></span><br><span class="line">    #&#123;categoryId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名自动化更新证书</title>
      <link href="//network/acme_sh.html"/>
      <url>//network/acme_sh.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。111</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装很简单，一个命令:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure><p>创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code>；</p><p>自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。</p><p>注：如果没有安装crontab，可在安装crontab之后加入以下任务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 0 * * * &quot;~/.acme.sh&quot;/acme.sh --cron --home &quot;~/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="更改服务地址"><a href="#更改服务地址" class="headerlink" title="更改服务地址"></a>更改服务地址</h3><p>acme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pendi ng，The CA is processing your order,please just wait.</p><p>只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。</p><h4 id="http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。"><a href="#http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。" class="headerlink" title="http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。"></a>http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是多个不同的二级域名，要每个单独执行一次</span></span><br><span class="line">acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure><p>只需要指定域名，并指定域名所在的网站根目录。 <strong>acme.sh</strong> 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。</p><p>注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d mydomain.com --standalone</span><br></pre></td></tr></table></figure><h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p><p>注：默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 <code>--install-cert</code> 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:</p><h5 id="Apache-example"><a href="#Apache-example" class="headerlink" title="Apache example:"></a>Apache example:</h5><hr><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试</span></span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.key  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure><h5 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h5><hr><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是docker，可改成 docker <span class="built_in">exec</span> -it 容器名 nginx -s reload</span> </span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.key  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure><h4 id="查看已安装证书信息"><a href="#查看已安装证书信息" class="headerlink" title="查看已安装证书信息"></a>查看已安装证书信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --info -d example.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会输出如下内容：</span></span><br><span class="line">DOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf</span><br><span class="line">Le_Domain=example.com</span><br><span class="line">Le_Alt=no</span><br><span class="line">Le_Webroot=dns_ali</span><br><span class="line">Le_PreHook=</span><br><span class="line">Le_PostHook=</span><br><span class="line">Le_RenewHook=</span><br><span class="line">Le_API=https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">Le_Keylength=</span><br><span class="line">Le_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span><br><span class="line">Le_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span><br><span class="line">Le_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span><br><span class="line">Le_CertCreateTime=1649358725</span><br><span class="line">Le_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022</span><br><span class="line">Le_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022</span><br><span class="line">Le_NextRenewTime=1654456325</span><br><span class="line">Le_RealCertPath=</span><br><span class="line">Le_RealCACertPath=</span><br><span class="line">Le_RealKeyPath=/etc/acme/example.com/privkey.pem</span><br><span class="line">Le_ReloadCmd=service nginx force-reload</span><br><span class="line">Le_RealFullChainPath=/etc/acme/example.com/chain.pem</span><br></pre></td></tr></table></figure><h4 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h4><p>目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab  -l</span><br><span class="line">56 * * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="关于修改ReloadCmd"><a href="#关于修改ReloadCmd" class="headerlink" title="关于修改ReloadCmd"></a>关于修改ReloadCmd</h3><p>目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来实现修改<code>reloadCmd</code>的目的。 此外，安装证书后，相关信息是保存在<code>~/.acme.sh/example.com/example.conf</code>文件下的，内容就是<code>acme.sh --info -d example.com</code>输出的信息，不过<code>ReloadCmd</code>在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改<code>ReloadCmd</code>，且修改时，无需Base64编码，直接写命令原文<code>acme.sh</code>也可以识别。 不过，<code>example.conf</code>文件的位置和内容格式以后可能会改变！<code>example.conf</code>一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。</p><h3 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure><p>如果你不想手动升级， 可以开启自动升级:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure><p>之后，acme.sh 就会自动保持更新了。</p><p>你也可以随时关闭自动更新:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade  0</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果服务http服务设置了<code>return 301 https://$host$request_uri;</code>来跳转到https服务下，且https服务又是代理其他服务，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  example.com;</span><br><span class="line">    ssl_certificate      conf.d/cert.pem;</span><br><span class="line">    ssl_certificate_key  conf.d/key.key;</span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class="line"></span><br><span class="line">    # 这里要加上以下设置，防止nginx找不到文件</span><br><span class="line">    location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">        root /home/wwwroot/mydomain.com;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    location ^~/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:10080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>官网地址：<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p><p>官方文档：<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和git实现多地更新和配置博客源文件</title>
      <link href="//hexo/hexo-git.html"/>
      <url>//hexo/hexo-git.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用<a href="https://hexo.io/zh-cn/">hexo</a>写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。</p><ul><li>利用git分支实现</li><li>hexo生成的静态博客文件默认放在master分支上。</li><li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li></ul><h3 id="hexo搭建博客原理"><a href="#hexo搭建博客原理" class="headerlink" title="hexo搭建博客原理"></a>hexo搭建博客原理</h3><ul><li>hexo帮助把博客发送到github，同时把md文件转换成网页文件。</li><li>hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。</li></ul><h3 id="搭建hexo服务器端电脑设置"><a href="#搭建hexo服务器端电脑设置" class="headerlink" title="搭建hexo服务器端电脑设置"></a>搭建hexo服务器端电脑设置</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>首先确保自己已经使用hexo在<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>搭建好了自己的个人博客。</li></ul><h4 id="对username-github-io仓库新建hexo分支，并克隆"><a href="#对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="对username.github.io仓库新建hexo分支，并克隆"></a>对username.github.io仓库新建hexo分支，并克隆</h4><ul><li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录</li><li>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx</li></ul><h4 id="将本地博客的部署文件拷贝进username-github-io文件目录"><a href="#将本地博客的部署文件拷贝进username-github-io文件目录" class="headerlink" title="将本地博客的部署文件拷贝进username.github.io文件目录"></a>将本地博客的部署文件拷贝进username.github.io文件目录</h4><ul><li>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。</li><li>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：<ul><li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li><li>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目</li></ul></li></ul><h4 id="提交hexo分支"><a href="#提交hexo分支" class="headerlink" title="提交hexo分支"></a>提交hexo分支</h4><ul><li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：</p><p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p></li></ul><h3 id="其他任何一台电脑"><a href="#其他任何一台电脑" class="headerlink" title="其他任何一台电脑"></a>其他任何一台电脑</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p><ul><li>将新电脑的生成的ssh key添加到GitHub账户上</li><li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li><li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li><li>到这里了就可以开始在自己的电脑上写博客了！</li></ul><p>编辑、撰写文章或其他博客更新改动：</p><ul><li>依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新</li><li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li></ul><h3 id="回到hexo服务器端电脑更新并提交博客"><a href="#回到hexo服务器端电脑更新并提交博客" class="headerlink" title="回到hexo服务器端电脑更新并提交博客"></a>回到hexo服务器端电脑更新并提交博客</h3><p>注：<a href="https://blog.csdn.net/qq_41684957/article/details/90680765">原地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo命令</title>
      <link href="//hello-word.html"/>
      <url>//hello-word.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p><hr><h3 id="总要记录一点什么吧"><a href="#总要记录一点什么吧" class="headerlink" title="总要记录一点什么吧"></a>总要记录一点什么吧</h3><p>hexo的一些常用命令模版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s # 启动服务</span><br><span class="line">hexo d -g # 编译项目并推送到github下mater分支</span><br><span class="line">hexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
