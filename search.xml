<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css实用代码合集</title>
      <link href="//html/practical-css.html"/>
      <url>//html/practical-css.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一些在工作和写博客中遇到的一些CSS代码场景,可能这些用的不多，以后也很敢再遇到新的逻辑代码,但总要养成遇到就要记录的习惯。</p><h3 id="img图片保持比例且居中显示"><a href="#img图片保持比例且居中显示" class="headerlink" title="img图片保持比例且居中显示"></a>img图片保持比例且居中显示</h3><p> 外部容器设置 固定宽度高度，设置line-height与height相等（垂直居中），设置text-align是center(水平居中)，内部img设置style（max-height:100%;max-width:100%;vertical-align: middle; <a href="https://so.csdn.net/so/search?q=margin&amp;spm=1001.2101.3001.7020">margin</a>: 0 auto;）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 398px;height: 298px;line-height: 298px;text-align: center;border:1px solid #E09972&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源地址：<a href="https://blog.csdn.net/shijie_nihao/article/details/106348591">https://blog.csdn.net/shijie_nihao/article/details/106348591</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥记录</title>
      <link href="//live/lose-weight-records.html"/>
      <url>//live/lose-weight-records.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在2022年七月，做过一次ercp手术，一个160斤的小胖子瘦到了140斤，当时天真的以为以后一定能保证自己不再胖回来，结果过年回家就胖回到了160斤，然后就自暴自弃的放弃了自己的减肥计划，也<del>没再在意过自己的体重</del>（没敢上称）。今天，因为怀疑小猫是不是得了猫传腹，给猫子称重时，不得不拿自己当工具，结果现在几乎到了200斤了，故今天开减肥记录的文章，以激励自己每天减肥打卡。</p><hr><h3 id="2024-06"><a href="#2024-06" class="headerlink" title="2024.06"></a>2024.06</h3><h4 id="第零天（6月5日｜周三）"><a href="#第零天（6月5日｜周三）" class="headerlink" title="第零天（6月5日｜周三）"></a>第零天（6月5日｜周三）</h4><center style="overflow: hidden;width: 100%;height: 600px;text-align:center">    <img style="width: 500px;" src="https://images.jzwfan.com/image/2024/06/06/000134-0.jpeg" alt=""></center><h4 id="第一天（6月6日｜周四）"><a href="#第一天（6月6日｜周四）" class="headerlink" title="第一天（6月6日｜周四）"></a>第一天（6月6日｜周四）</h4><ul><li>早饭：八宝粥一杯，鸡蛋一个</li><li>中午：麻辣烫一份，忘记拍了，买的东西还没到，公司附近吃的都差不多</li><li>晚上：步行回家，吃了一份煎鱼和鸡胸肉</li></ul><p>下午3点半吃了几颗糖炒花生，忘记拍了</p><center class="half" style="overflow:hidden">      <div style="width: 157px;height: 150px;line-height: 150px;text-align: center;float:left;padding-bottom:10px;">        <img src="https://images.jzwfan.com/image/2024/06/07/092938-0.png" style="max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;" alt="">    </div>    <div style="width: 157px;height: 150px;line-height: 150px;text-align: center;float:left;padding-bottom:10px;">        <img src="https://images.jzwfan.com/image/2024/06/07/093334-0.png" style="max-width:100%;max-height:100%;vertical-align: middle; margin: 0 auto;" alt="">    </div></center>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 减肥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql语句</title>
      <link href="//db/sql.html"/>
      <url>//db/sql.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工作中遇到的SQL查询方法、语法、和优化记录。</p><hr><h3 id="SQL-方法和关键字"><a href="#SQL-方法和关键字" class="headerlink" title="SQL 方法和关键字"></a>SQL 方法和关键字</h3><h4 id="GROUP-COUNT-WM-COUNT"><a href="#GROUP-COUNT-WM-COUNT" class="headerlink" title="GROUP_COUNT\WM_COUNT"></a>GROUP_COUNT\WM_COUNT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># mysql group_concat</span><br><span class="line"># separator 用来替换拼接字段， eg: 水果<span class="operator">-</span>素菜</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">group_concat(c.category_name separator <span class="string">&#x27;-&#x27;</span>) category_name,</span><br><span class="line">cs.store_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dt_category_store <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dt_category <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">cs.category_id <span class="operator">=</span> c.category_id <span class="keyword">and</span> cs.category_type <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cs.store_id</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># dm wm_concat 方式</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">wm_concat(c.category_name) category_name,</span><br><span class="line">cs.store_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dt_category_store <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dt_category <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">cs.category_id <span class="operator">=</span> c.category_id <span class="keyword">and</span> cs.category_type <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cs.store_id</span><br></pre></td></tr></table></figure><h4 id="DROP（删除表｜通用）"><a href="#DROP（删除表｜通用）" class="headerlink" title="DROP（删除表｜通用）"></a>DROP（删除表｜通用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Mysql</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"># DM</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure><h4 id="TRUNCATE（清空表数据｜通用）"><a href="#TRUNCATE（清空表数据｜通用）" class="headerlink" title="TRUNCATE（清空表数据｜通用）"></a>TRUNCATE（清空表数据｜通用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Mysql</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"># DM</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 空间名.表名;</span><br></pre></td></tr></table></figure><h3 id="SQL一些常用命令"><a href="#SQL一些常用命令" class="headerlink" title="SQL一些常用命令"></a>SQL一些常用命令</h3><h4 id="DM设置表主键是否自动递增"><a href="#DM设置表主键是否自动递增" class="headerlink" title="DM设置表主键是否自动递增"></a>DM设置表主键是否自动递增</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># OFF 开启， <span class="keyword">ON</span> 关闭</span><br><span class="line"><span class="keyword">SET</span> IDENTITY_INSERT 空间名.表名 <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><h3 id="DM添加索引例子"><a href="#DM添加索引例子" class="headerlink" title="DM添加索引例子"></a>DM添加索引例子</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE  INDEX &quot;索引名&quot; <span class="keyword">ON</span> &quot;空间名&quot;.&quot;表名&quot;(&quot;列名1&quot; <span class="keyword">ASC</span>,&quot;列名2&quot; <span class="keyword">ASC</span>,&quot;列名3&quot; ASC...) STORAGE(<span class="keyword">ON</span> &quot;MAIN&quot;, CLUSTERBTR);</span><br></pre></td></tr></table></figure><h4 id="DM创建表语句模版"><a href="#DM创建表语句模版" class="headerlink" title="DM创建表语句模版"></a>DM创建表语句模版</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;空间名&quot;.&quot;表名&quot;</span><br><span class="line">(</span><br><span class="line">&quot;ID&quot; <span class="type">BIGINT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">&quot;NEIBH_ID&quot; <span class="type">BIGINT</span>,</span><br><span class="line">&quot;CATEGORY_ID&quot; <span class="type">BIGINT</span>,</span><br><span class="line">&quot;CATEGORY_TYPE&quot; <span class="type">VARCHAR</span>(<span class="number">2</span>),</span><br><span class="line">&quot;INSPECTOR_IDS&quot; <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;INSPECTOR_NAMES&quot; <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&quot;TENANT_ID&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;DELETED&quot; BIT <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">&quot;CREATOR&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;CREATE_TIME&quot; <span class="type">TIMESTAMP</span>(<span class="number">0</span>),</span><br><span class="line">&quot;UPDATER&quot; <span class="type">INT</span>,</span><br><span class="line">&quot;UPDATE_TIME&quot; <span class="type">TIMESTAMP</span>(<span class="number">0</span>),</span><br><span class="line"><span class="keyword">NOT</span> CLUSTER <span class="keyword">PRIMARY</span> KEY(&quot;ID&quot;)) STORAGE(<span class="keyword">ON</span> &quot;MAIN&quot;, CLUSTERBTR) ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> DM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis下Mapper文件例子</title>
      <link href="//db/mybatis-mapper.html"/>
      <url>//db/mybatis-mapper.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记一下Mybatis的常用写法，其中也有一些mybatis-plus的写法文档。</p><hr><h3 id="choose-用法"><a href="#choose-用法" class="headerlink" title="choose 用法"></a>choose 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 3&quot;</span>&gt;</span></span><br><span class="line">        SQL1...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;reqVo.inspectionType == 4&quot;</span>&gt;</span></span><br><span class="line">        SQL2...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        SQL3...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach-用法"><a href="#foreach-用法" class="headerlink" title="foreach 用法"></a>foreach 用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;categoryIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;categoryId&quot;</span>&gt;</span></span><br><span class="line">    #&#123;categoryId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名自动化更新证书</title>
      <link href="//network/acme_sh.html"/>
      <url>//network/acme_sh.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前免费证书的使用期限是90天，证书更新也从以前的一年一换变成了现在的三个月一换，本人自己域名加公司域名有近四十个之多，每次证书更新都是一个很费事又费时的工作，不得不进行自动化处理。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装很简单，一个命令:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure><p>创建 一个 shell 的 alias，例如 .bashrc，方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code>；</p><p>自动为你创建 cronjob,，每天 0:00 点自动检测所有的证书， 如果快过期了，需要更新，则会自动更新证书。</p><p>注：如果没有安装crontab，可在安装crontab之后加入以下任务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 0 * * * &quot;~/.acme.sh&quot;/acme.sh --cron --home &quot;~/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="更改服务地址"><a href="#更改服务地址" class="headerlink" title="更改服务地址"></a>更改服务地址</h3><p>acme.sh脚本默认ca服务器是zerossl，经常出错，会导致获取证书的时候一直出现：Pending，The CA is processing your order,please just wait.</p><p>只需要把ca服务器改成letsencrypt 即可，虽然更改以后还是有概率出现pending，但基本2-3次即可成功。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.，一般有两种方式验证: http 和 dns 验证。本人用的是http方式。</p><h4 id="http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。"><a href="#http-方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权-完成验证-然后就可以生成证书了。" class="headerlink" title="http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。"></a>http 方式需要在你的网站根目录下放置一个文件，来验证你的域名所有权,完成验证. 然后就可以生成证书了。</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注，这里多个-d只会生成一个证书文件夹，所以，只能是www和主域名两个域名可以这样放</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是多个不同的二级域名，要每个单独执行一次</span></span><br><span class="line">acme.sh --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure><p>只需要指定域名，并指定域名所在的网站根目录。 <strong>acme.sh</strong> 会全自动的生成验证文件， 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件， 整个过程没有任何副作用。</p><p>注：如果你还没有运行任何 web 服务，80 端口是空闲的，那么 acme.sh 还能假装自己是一个webserver，临时听在80 端口，完成验证:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d mydomain.com --standalone</span><br></pre></td></tr></table></figure><h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p><p>注：默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，请不要直接使用此目录下的文件，例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用，而且目录结构可能会变化。正确的使用方法是使用 <code>--install-cert</code> 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如:</p><h5 id="Apache-example"><a href="#Apache-example" class="headerlink" title="Apache example:"></a>Apache example:</h5><hr><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：这个没试过，不过官网上文件后缀都写成了.pem，--reloadcmd 的命令也未测试</span></span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.key  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure><h5 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h5><hr><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网上文件后缀都写成了.pem，--reloadcmd 的命令改成nginx -s reload可用，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是docker，可改成 docker <span class="built_in">exec</span> -it 容器名 nginx -s reload</span> </span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.key  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure><h4 id="查看已安装证书信息"><a href="#查看已安装证书信息" class="headerlink" title="查看已安装证书信息"></a>查看已安装证书信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --info -d example.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会输出如下内容：</span></span><br><span class="line">DOMAIN_CONF=/root/.acme.sh/example.com/example.com.conf</span><br><span class="line">Le_Domain=example.com</span><br><span class="line">Le_Alt=no</span><br><span class="line">Le_Webroot=dns_ali</span><br><span class="line">Le_PreHook=</span><br><span class="line">Le_PostHook=</span><br><span class="line">Le_RenewHook=</span><br><span class="line">Le_API=https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">Le_Keylength=</span><br><span class="line">Le_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span><br><span class="line">Le_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span><br><span class="line">Le_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span><br><span class="line">Le_CertCreateTime=1649358725</span><br><span class="line">Le_CertCreateTimeStr=Thu Apr  7 19:12:05 UTC 2022</span><br><span class="line">Le_NextRenewTimeStr=Mon Jun  6 19:12:05 UTC 2022</span><br><span class="line">Le_NextRenewTime=1654456325</span><br><span class="line">Le_RealCertPath=</span><br><span class="line">Le_RealCACertPath=</span><br><span class="line">Le_RealKeyPath=/etc/acme/example.com/privkey.pem</span><br><span class="line">Le_ReloadCmd=service nginx force-reload</span><br><span class="line">Le_RealFullChainPath=/etc/acme/example.com/chain.pem</span><br></pre></td></tr></table></figure><h4 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h4><p>目前证书在 60 天以后会自动更新，你无需任何操作。 今后有可能会缩短这个时间， 不过都是自动的， 你不用关心.请确保 cronjob 正确安装，看起来是类似这样的:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab  -l</span><br><span class="line">56 * * * * &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="关于修改ReloadCmd"><a href="#关于修改ReloadCmd" class="headerlink" title="关于修改ReloadCmd"></a>关于修改ReloadCmd</h3><p>目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来实现修改<code>reloadCmd</code>的目的。 此外，安装证书后，相关信息是保存在<code>~/.acme.sh/example.com/example.conf</code>文件下的，内容就是<code>acme.sh --info -d example.com</code>输出的信息，不过<code>ReloadCmd</code>在文件中使用了Base64编码。理论上可以通过直接修改该文件来修改<code>ReloadCmd</code>，且修改时，无需Base64编码，直接写命令原文<code>acme.sh</code>也可以识别。 不过，<code>example.conf</code>文件的位置和内容格式以后可能会改变！<code>example.conf</code>一直都是内部使用, 后面有可能会改为用 sqlite 或者mysql 格式存储. 所以一般不建议自己修改。</p><h3 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。升级 acme.sh 到最新版 :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure><p>如果你不想手动升级， 可以开启自动升级:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure><p>之后，acme.sh 就会自动保持更新了。</p><p>你也可以随时关闭自动更新:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade  0</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果服务http服务设置了<code>return 301 https://$host$request_uri;</code>来跳转到https服务下，且https服务又是代理其他服务，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  example.com;</span><br><span class="line">    ssl_certificate      conf.d/cert.pem;</span><br><span class="line">    ssl_certificate_key  conf.d/key.key;</span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class="line"></span><br><span class="line">    # 这里要加上以下设置，防止nginx找不到文件</span><br><span class="line">    location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">        root /home/wwwroot/mydomain.com;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    location ^~/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:10080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>官网地址：<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p><p>官方文档：<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和git实现多地更新和配置博客源文件</title>
      <link href="//hexo/hexo-git.html"/>
      <url>//hexo/hexo-git.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用<a href="https://hexo.io/zh-cn/">hexo</a>写博客的一个问题就是源文件都是在本地的，如果换了电脑需要更新博客时就会比较麻烦。目前，觉得比较靠谱的办法就是用github来管理了。</p><ul><li>利用git分支实现</li><li>hexo生成的静态博客文件默认放在master分支上。</li><li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li></ul><h3 id="hexo搭建博客原理"><a href="#hexo搭建博客原理" class="headerlink" title="hexo搭建博客原理"></a>hexo搭建博客原理</h3><ul><li>hexo帮助把博客发送到github，同时把md文件转换成网页文件。</li><li>hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。</li></ul><h3 id="搭建hexo服务器端电脑设置"><a href="#搭建hexo服务器端电脑设置" class="headerlink" title="搭建hexo服务器端电脑设置"></a>搭建hexo服务器端电脑设置</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>首先确保自己已经使用hexo在<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>搭建好了自己的个人博客。</li></ul><h4 id="对username-github-io仓库新建hexo分支，并克隆"><a href="#对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="对username.github.io仓库新建hexo分支，并克隆"></a>对username.github.io仓库新建hexo分支，并克隆</h4><ul><li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录</li><li>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx</li></ul><h4 id="将本地博客的部署文件拷贝进username-github-io文件目录"><a href="#将本地博客的部署文件拷贝进username-github-io文件目录" class="headerlink" title="将本地博客的部署文件拷贝进username.github.io文件目录"></a>将本地博客的部署文件拷贝进username.github.io文件目录</h4><ul><li>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。</li><li>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：<ul><li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li><li>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目</li></ul></li></ul><h4 id="提交hexo分支"><a href="#提交hexo分支" class="headerlink" title="提交hexo分支"></a>提交hexo分支</h4><ul><li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支：</p><p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p></li></ul><h3 id="其他任何一台电脑"><a href="#其他任何一台电脑" class="headerlink" title="其他任何一台电脑"></a>其他任何一台电脑</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p><ul><li>将新电脑的生成的ssh key添加到GitHub账户上</li><li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li><li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li><li>到这里了就可以开始在自己的电脑上写博客了！</li></ul><p>编辑、撰写文章或其他博客更新改动：</p><ul><li>依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新</li><li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li></ul><h3 id="回到hexo服务器端电脑更新并提交博客"><a href="#回到hexo服务器端电脑更新并提交博客" class="headerlink" title="回到hexo服务器端电脑更新并提交博客"></a>回到hexo服务器端电脑更新并提交博客</h3><p>注：<a href="https://blog.csdn.net/qq_41684957/article/details/90680765">原地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo命令</title>
      <link href="//hello-word.html"/>
      <url>//hello-word.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第一次用hexo写博客，之前有自己用自己的服务器写过博客，但后来服务器出问题，不堪回首，现在要用这个来重写博客了！！！</p><hr><h3 id="总要记录一点什么吧"><a href="#总要记录一点什么吧" class="headerlink" title="总要记录一点什么吧"></a>总要记录一点什么吧</h3><p>hexo的一些常用命令模版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s # 启动服务</span><br><span class="line">hexo d -g # 编译项目并推送到github下mater分支</span><br><span class="line">hexo new post 测试 --path hexo/test # 创建title为测试文件名为test.md位置在hexo文件夹下的文章</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
